/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.phoenixbioinformatics.api.db.api;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the SubscriptionDescriptionItem. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A specific item of descriptive text
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractSubscriptionDescriptionItem extends AbstractDto implements ISubscriptionDescriptionItem {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the subscriptionDescription association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QuerySubscriptionDescriptionSetter extends com.poesys.db.dto.AbstractObjectSetter<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QuerySubscriptionDescriptionSetter object.
     */
    public QuerySubscriptionDescriptionSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionDescription.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return subscriptionDescriptionKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionDescription();
    }

    @Override
    protected void set(org.phoenixbioinformatics.api.db.api.ISubscriptionDescription dto) {
      // No status change, this is just filling in the object data.
      subscriptionDescription = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated subscriptionDescription is not null
      return subscriptionDescription != null;
    }
  }

  /**
   * Insert setter for inserting nested object property subscriptionDescription.
   */
  private class InsertSubscriptionDescriptionSetter 
      extends com.poesys.db.dto.AbstractInsertSetter {
    // Property subscriptionDescription source: AddToOneAssociationRequiredObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create an InsertSubscriptionDescriptionSetter object.
     */
    public InsertSubscriptionDescriptionSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionDescription.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      array.add(subscriptionDescription);
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      // Key type: CompositeKey
      return true;
    }
  }

  /**
   * Setter for processing added subscriptionDescription, updated subscriptionDescription, and 
   * deleted subscriptionDescription. 
   */
   
  private class UpdateSubscriptionDescriptionSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObject<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> {
    private static final long serialVersionUID = 1L;

    /**
     * Create an UpdateSubscriptionDescriptionSetter object.
     */
    public UpdateSubscriptionDescriptionSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, org.phoenixbioinformatics.api.db.api.ISubscriptionDescription dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // subscriptionDescription source: AddToOneAssociationRequiredObjectProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionDescription.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdate<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> updater = 
        factory.getUpdate(new org.phoenixbioinformatics.api.db.api.sql.UpdateSubscriptionDescription());

      // Update the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dto);
      // Complete the update by setting the DTO to EXISTING status.
      dto.setExisting();
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, org.phoenixbioinformatics.api.db.api.ISubscriptionDescription dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionDescription.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDelete<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> dao = 
        factory.getDelete(new org.phoenixbioinformatics.api.db.api.sql.DeleteSubscriptionDescription());
      dao.delete(connection, dto);
    }

    @Override
    protected void doNew(java.sql.Connection connection, org.phoenixbioinformatics.api.db.api.ISubscriptionDescription dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionDescription.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsert<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> inserter =
        factory.getInsert(new org.phoenixbioinformatics.api.db.api.sql.InsertSubscriptionDescription(), createKey());


      // Insert the superclass objects from the root down. Suppress nested
      // inserts for the superclasses, wait until the concrete class. Also set 
      // pre-insert suppression off to have the root insert linked, to-one class
      // objects.
      dto.setSuppressNestedInserts(true);
      dto.setSuppressNestedPreInserts(false);

      // Suppress inserts in concrete class.
      dto.setSuppressNestedPreInserts(true);
      
      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      dto.setSuppressNestedInserts(false);
      inserter.setLeaf(true);
      inserter.insert(connection, dto);
    }

    @Override
    protected org.phoenixbioinformatics.api.db.api.ISubscriptionDescription getDto() {
      return subscriptionDescription;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionDescription.class.getName();
    }

    @Override
    protected boolean createKey() {
      // Key type: CompositeKey
      return true;
    }
  }

  /**
   * Foreign key object used by QuerySubscriptionDescriptionSetter nested class to query object
   */
  private IPrimaryKey subscriptionDescriptionKey;
  
  /**
   * Set the foreign key subscriptionDescriptionKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param subscriptionDescriptionKey the foreign key
   */
  void setSubscriptionDescriptionKey(IPrimaryKey subscriptionDescriptionKey) {
    this.subscriptionDescriptionKey = subscriptionDescriptionKey;
  }


  /**
   * Create an empty SubscriptionDescriptionItem for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractSubscriptionDescriptionItem() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the subscriptionDescription property.
    querySetters.add(new QuerySubscriptionDescriptionSetter());
    preSetters.add(new InsertSubscriptionDescriptionSetter());
    postSetters.add(new UpdateSubscriptionDescriptionSetter());
  }

  /**
   * Create a SubscriptionDescriptionItem. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the SubscriptionDescriptionItem
   * @param header composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param partnerId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param itemNo the number that identifies the description item within the description
   * @param text the text to display for the type of context
   */
  public AbstractSubscriptionDescriptionItem(IPrimaryKey key, java.lang.String header, java.math.BigInteger partnerId, java.math.BigInteger itemNo, java.lang.String text) {
    this.key = key;

    this.header = header;

    if (header == null) {
      throw new com.poesys.db.InvalidParametersException("header is required for " + key.getValueList());
    }
    
    this.partnerId = partnerId;

    if (partnerId == null) {
      throw new com.poesys.db.InvalidParametersException("partnerId is required for " + key.getValueList());
    }
    
    this.itemNo = itemNo;

    this.text = text;

    if (text == null) {
      throw new com.poesys.db.InvalidParametersException("text is required for " + key.getValueList());
    }
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the subscriptionDescription property.
    querySetters.add(new QuerySubscriptionDescriptionSetter());
    // Set the object property primary key with a factory method.
    // TODO: fix problem with foreign keys/associated keys VND-168
    // subscriptionDescriptionKey = org.phoenixbioinformatics.api.db.api.ApiFactory.getSubscriptionDescriptionPrimaryKey();
    insertSetters.add(new InsertSubscriptionDescriptionSetter());
    preSetters.add(new InsertSubscriptionDescriptionSetter());
    postSetters.add(new UpdateSubscriptionDescriptionSetter());
    
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    ISubscriptionDescriptionItem other = (ISubscriptionDescriptionItem)arg0;
    return other.getPrimaryKey().equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    ISubscriptionDescriptionItem other = (ISubscriptionDescriptionItem)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.getPrimaryKey().compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.phoenixbioinformatics.api.db.api";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.phoenixbioinformatics.api.db.api");
    String subsystem =
      "org.phoenixbioinformatics.api.db.api"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property header
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddParentKeyAttributes
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String header;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass + AddParentKeyAttributes
   * 
   * @return a java.lang.String
   */

  public java.lang.String getHeader() {
    return header;
  }

  /**
   * Clear the header data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearHeader() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property partnerId
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes + AddParentKeyAttributes
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger partnerId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddParentKeyAttributes + AddParentKeyAttributes
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getPartnerId() {
    return partnerId;
  }

  /**
   * Clear the partnerId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPartnerId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property itemNo
   *
   * <p>
   * the number that identifies the description item within the description
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger itemNo;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getItemNo() {
    return itemNo;
  }

  /**
   * Clear the itemNo data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearItemNo() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property text
   *
   * <p>
   * the text to display for the type of context
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String text;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getText() {
    return text;
  }

  /**
   * Clear the text data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearText() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the text.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the text to display for the type of context
   * </p>
   *
   * @param text the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input text is null
   */
  public void setText(java.lang.String text)
      throws com.poesys.db.InvalidParametersException {
    if (text == null) {
      throw new com.poesys.db.InvalidParametersException("text is required");
    }
    
    this.text = text;
    setChanged();
  }
  /**
   * Nested property subscriptionDescription
   *
   * <p>
   * the description that contains the description items
   * </p>
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private org.phoenixbioinformatics.api.db.api.ISubscriptionDescription subscriptionDescription;
  
  /**
   * Get an object of org.phoenixbioinformatics.api.db.api.ISubscriptionDescription.
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   * 
   * @return a org.phoenixbioinformatics.api.db.api.ISubscriptionDescription
   */

  public org.phoenixbioinformatics.api.db.api.ISubscriptionDescription getSubscriptionDescription() {
    return subscriptionDescription;
  }

  /**
   * Clear the subscriptionDescription data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSubscriptionDescription() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the subscriptionDescription.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the description that contains the description items
   * </p>
   *
   * @param subscriptionDescription the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input subscriptionDescription is null
   */
  public void setSubscriptionDescription(org.phoenixbioinformatics.api.db.api.ISubscriptionDescription subscriptionDescription)
      throws com.poesys.db.InvalidParametersException {
    if (subscriptionDescription == null) {
      throw new com.poesys.db.InvalidParametersException("subscriptionDescription is required");
    }
    
    this.subscriptionDescription = subscriptionDescription;
    // Set the IPrimaryKey cache lookup key.
    this.subscriptionDescriptionKey = subscriptionDescription.getPrimaryKey();
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }

  /**
   * Create the inserters for the SubscriptionDescriptionItem and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> subscriptionDescriptionItemFactory =
      manager.getFactory("org.phoenixbioinformatics.api.db.api.SubscriptionDescriptionItem",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ISubscriptionDescriptionItem> sql =
      new org.phoenixbioinformatics.api.db.api.sql.InsertSubscriptionDescriptionItem();
    com.poesys.db.dao.insert.IInsert<ISubscriptionDescriptionItem> inserter =
      subscriptionDescriptionItemFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}