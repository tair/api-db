/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: IDbDto.vsl

package org.phoenixbioinformatics.api.db.api;

import com.poesys.db.dto.IDbDto;

import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A data-access layer data-transfer-object interface for the Subscription. 
 * The data-transfer-object class and proxy class implement this interface, as
 * does the business-layer data-transfer-object class.
 * </p>
 * <p>
 * An agreement by a party to take and pay for access to a partner system; a
 * relationship between a party and a partner system
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public interface ISubscription extends IDbDto {

  boolean equals(Object arg0);

  int hashCode();

  /**
   * <p>
   * Mark any children of this DTO as deleted.
   * </p>
   *
   * @throws DtoStatusException when the child cannot be set to DELETED status
   */
  void markChildrenDeleted() throws DtoStatusException;

  IPrimaryKey getPrimaryKey();
  

  /**
   * <p>
   * the date and time at which the subscription commences; if this is in the future,
   * the subscription is not yet in effect
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: startDate
   * </p>
   * @return a java.sql.Timestamp startDate
   */
  public java.sql.Timestamp getStartDate();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the startDate.
   * </p>
   *
   * @param startDate the value to set into the startDate
   * @throws com.poesys.db.InvalidParametersException when the startDate 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setStartDate(java.sql.Timestamp startDate) throws com.poesys.db.dto.DtoStatusException, com.poesys.db.InvalidParametersException;


  /**
   * <p>
   * the date and time at which the subscription ends
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: endDate
   * </p>
   * @return a java.sql.Timestamp endDate
   */
  public java.sql.Timestamp getEndDate();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the endDate.
   * </p>
   *
   * @param endDate the value to set into the endDate
   * @throws com.poesys.db.InvalidParametersException when the endDate 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setEndDate(java.sql.Timestamp endDate) throws com.poesys.db.dto.DtoStatusException, com.poesys.db.InvalidParametersException;


  /**
   * <p>
   * an alternate single-number identifier for the subscription
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * Owning DTO: ${property.dto.name}
   * Owning package: ${property.dto.packageName}
   * Property prefix: subscriptionId
   * </p>
   * @return a java.lang.Long subscriptionId
   */
  public java.lang.Long getSubscriptionId();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the subscriptionId.
   * </p>
   *
   * @param subscriptionId the value to set into the subscriptionId
   * @throws com.poesys.db.InvalidParametersException when the subscriptionId 
   *       value is null
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setSubscriptionId(java.lang.Long subscriptionId) throws com.poesys.db.dto.DtoStatusException, com.poesys.db.InvalidParametersException;


  /**
   * <p>
   * the set of subscription transactions for the subscription
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties
   * Owning DTO: SubscriptionTransaction
   * Owning package: org.phoenixbioinformatics.api.db.api
   * Property prefix: subscriptionTransactions
   * </p>
   * @return a java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> subscriptionTransactions
   */
  public java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> getSubscriptionTransactions();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not false
// Read/Write property: true

  /**
   * <p>
   * Set the subscriptionTransactions.
   * </p>
   *
   * @param subscriptionTransactions the value to set into the subscriptionTransactions
   * @throws com.poesys.db.dto.DtoStatusException when the status cannot be set to CHANGED
   */
  public void setSubscriptionTransactions(java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> subscriptionTransactions) throws com.poesys.db.dto.DtoStatusException;


  /**
   * <p>
   * Associated object
   * </p>
   * <p>
   * Added by AddAssociationKeyObjectProperties
   * Owning DTO: Partner
   * Owning package: org.phoenixbioinformatics.api.db.api
   * Property prefix: subscribedPartners
   * </p>
   * <p>
   * This property loads lazily on demand rather than when you first query the 
   * ISubscription object.
   * </p>
   * @return a org.phoenixbioinformatics.api.db.api.IPartner partner
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public org.phoenixbioinformatics.api.db.api.IPartner getPartner() throws java.sql.SQLException;

  /**
   * Clear the partner so that it will lazily reload.
   */
  public void clearPartner();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not true
// Read/Write property: false

  /**
   * <p>
   * Associated object
   * </p>
   * <p>
   * Added by AddAssociationKeyObjectProperties
   * Owning DTO: Party
   * Owning package: org.phoenixbioinformatics.api.db.api
   * Property prefix: subscribers
   * </p>
   * <p>
   * This property loads lazily on demand rather than when you first query the 
   * ISubscription object.
   * </p>
   * @return a org.phoenixbioinformatics.api.db.api.IParty subscriber
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public org.phoenixbioinformatics.api.db.api.IParty getSubscriber() throws java.sql.SQLException;

  /**
   * Clear the subscriber so that it will lazily reload.
   */
  public void clearSubscriber();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not true
// Read/Write property: false

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Owning DTO: Partner
   * Owning package: org.phoenixbioinformatics.api.db.api
   * Property prefix: subscribedPartners
   * </p>
   * @return a java.math.BigInteger partnerId
   */
  public java.math.BigInteger getPartnerId();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not true
// Read/Write property: false

  /**
   * <p>
   * Attribute that is part of the association key
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Owning DTO: Party
   * Owning package: org.phoenixbioinformatics.api.db.api
   * Property prefix: subscribers
   * </p>
   * @return a java.math.BigInteger partyId
   */
  public java.math.BigInteger getPartyId();
// Setter here if the four conditions below are all true or not false
// Read/Write DTO: true
// Mutable DTO: not false
// Mutable property: not true
// Read/Write property: false

  /**
   * Add a SubscriptionTransaction object to the subscriptionTransactions collection.
   *
   * @param object the object to add to the collection
   */
  public void addSubscriptionTransactionsSubscriptionTransaction(org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction object);
}