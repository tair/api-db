/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractUpdate.vsl

package org.phoenixbioinformatics.api.db.api.sql;


import java.sql.PreparedStatement;
import java.sql.SQLException;

import com.poesys.db.dao.update.IUpdateSql;
import com.poesys.db.pk.IPrimaryKey;


/**
 * SQL statement specification for updating a SubscriptionTransaction with read/write properties
 * 
 * @author Robert J. Muller
 */
public class AbstractUpdateSubscriptionTransaction implements IUpdateSql<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> {
  /** SQL UPDATE statement for SubscriptionTransaction */
  private static final String SQL =
    "UPDATE SubscriptionTransaction SET transactionDate = ?, startDate = ?, endDate = ?, transactionType = ?, activationCodeId = ? WHERE ";

  @Override
  public String getSql(IPrimaryKey key) {
    StringBuilder builder = new StringBuilder(SQL);
    builder.append(key.getSqlWhereExpression(""));
    return builder.toString();
  }

  @Override
  public int setParams(PreparedStatement stmt, int index, org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction object)
      throws SQLException {
    stmt.setTimestamp(index, object.getTransactionDate());
    index++;
    stmt.setTimestamp(index, object.getStartDate());
    index++;
    stmt.setTimestamp(index, object.getEndDate());
    index++;
    stmt.setString(index, object.getTransactionType());
    index++;
    // sets key params for optional activationCode object, which may be null
    if (object.getActivationCode() != null) {
      index = object.getActivationCode().getPrimaryKey().setParams(stmt, index);
    } else {
      // Set the individual parameters to null with the associated SQL type.
      stmt.setNull(index, java.sql.Types.VARCHAR);
      index++;
    }
    // sets primary key in where clause
    index = object.getPrimaryKey().setParams(stmt, index);
    return index;
  }
}
