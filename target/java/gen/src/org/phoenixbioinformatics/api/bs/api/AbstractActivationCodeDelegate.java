/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegate.vsl

package org.phoenixbioinformatics.api.bs.api;


import com.poesys.bs.delegate.AbstractDataDelegate;
import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.connection.IConnectionFactory.DBMS;
import com.poesys.db.dao.insert.IInsertSql;
import com.poesys.db.dao.update.IUpdateSql;
import com.poesys.db.dao.delete.IDeleteSql;
import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.dao.query.IQuerySql;


/**
 * <p>
 * A business delegate that provides an application programming interface for
 * ActivationCode objects and their dependents. You should not modify this class;
 * instead, override or add methods in the class ActivationCodeDelegate, which
 * specializes this class.
 * </p>
 * <p>
 * A code that a subscriber can use to activate their subscription to a partner;
 * the code is the key for the class
 * </p>
 * @see ActivationCodeDelegate
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractActivationCodeDelegate
    extends AbstractDataDelegate<BsActivationCode, org.phoenixbioinformatics.api.db.api.IActivationCode, com.poesys.db.pk.GuidPrimaryKey> {
  /**
   * Create an AbstractActivationCodeDelegate object by supplying the database
   * subsystem in the database.properties file.
   * 
   * @param subsystem the database subsystem to use in database.properties
   */
  public AbstractActivationCodeDelegate(String subsystem) {
    super(subsystem, 2147483647);
  }

  /**
   * Create an AbstractActivationCodeDelegate object by supplying the database
   * subsystem in the database.properties file and a specific DBMS, usually
   * IConnectionFactory.DBMS.JNDI.
   * 
   * @param subsystem the database subsystem to use in database.properties
   * @param dbms the DBMS to use (usually IConnectionFactory.DBMS.JNDI)
   */
  public AbstractActivationCodeDelegate(String subsystem, DBMS dbms) {
    super(subsystem, dbms, 2147483647);
  }

  @Override
  protected String getClassName() {
    return org.phoenixbioinformatics.api.db.api.ActivationCode.class.getName();
  }

  @Override
  protected IInsertSql<org.phoenixbioinformatics.api.db.api.IActivationCode> getInsertSql() {
    return new org.phoenixbioinformatics.api.db.api.sql.InsertActivationCode();
  }

  @Override
  protected IDeleteSql<org.phoenixbioinformatics.api.db.api.IActivationCode> getDeleteSql() {
    return new org.phoenixbioinformatics.api.db.api.sql.DeleteActivationCode();
  }

  @Override
  protected IUpdateSql<org.phoenixbioinformatics.api.db.api.IActivationCode> getUpdateSql() {
    return new org.phoenixbioinformatics.api.db.api.sql.UpdateActivationCode();
  }

  @Override
  protected IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IActivationCode> getQueryByKeySql() {
    return new org.phoenixbioinformatics.api.db.api.sql.QueryActivationCode();
  }

  @Override
  protected IQuerySql<org.phoenixbioinformatics.api.db.api.IActivationCode> getQueryListSql() {
    // Query-All method not required
    return new org.phoenixbioinformatics.api.db.api.sql.QueryAllActivationCode();
  }

  @Override
  protected org.phoenixbioinformatics.api.bs.api.BsActivationCode wrapData(org.phoenixbioinformatics.api.db.api.IActivationCode dto) {
    return new org.phoenixbioinformatics.api.bs.api.BsActivationCode(dto);
  }

  /**
   * <p>
   * Create a new ActivationCode with data fields.
   * </p>
   * <p>
   * The ActivationCode class has a globally unique identifier (GUID) key; this 
   * method generates the GUID for later insertion into the database.
   * </p>
   * 
   * @param activationCodeId primary key attribute
   * @param period The number of months for the subscription activated by the code
   * @param purchaseDate the date on which the subscriber purchased the code; possibly used to expire the
code if needed
   * @param partnerId foreign key used by setter to query associated object
   * @return the new ActivationCode object
   * @throws DelegateException when there is a problem generating the key or
   *             creating the object
   */
  public org.phoenixbioinformatics.api.bs.api.BsActivationCode createActivationCode(java.util.UUID activationCodeId, java.lang.Integer period, java.sql.Timestamp purchaseDate, java.math.BigInteger partnerId)
      throws DelegateException {
      com.poesys.db.pk.GuidPrimaryKey key = null;

    // Generate a new ActivationCode GUID if the input key is null.
    if (activationCodeId == null) {
      try {
        // Get the GUID for use as an attribute value.
        key =
          com.poesys.db.pk.PrimaryKeyFactory.createGuidKey("activationCodeId", "ActivationCode");
        activationCodeId = java.util.UUID.fromString(key.getValue());
      } catch (com.poesys.db.InvalidParametersException e) {
        Object[] args = e.getParameters().toArray();
        String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
        throw new DelegateException(message, e);
      } catch (com.poesys.db.NoPrimaryKeyException e) {
        Object[] args = e.getParameters().toArray();
        String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
        throw new DelegateException(message, e);
      }
    }

    // Create a data-access DTO for direct access, no proxy required.
    org.phoenixbioinformatics.api.db.api.IActivationCode dto =
      new org.phoenixbioinformatics.api.db.api.ActivationCode(key, activationCodeId, period, purchaseDate, partnerId);

    // Create the business DTO.
    return new org.phoenixbioinformatics.api.bs.api.BsActivationCode(dto);
  }

}
