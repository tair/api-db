/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.phoenixbioinformatics.api.db.api;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * Party. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An abstract entity that is either a person or an organization
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractPartyProxy extends AbstractLazyLoadingDtoProxy implements IParty {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  // Lazy-loading query setter strategy nested classes for single-object associations
  
    // Setter strategy nested classes for multiple-object associations

  /** Flag indicating whether the subscribedPartners property has been loaded */
  boolean subscribedPartnersLoaded = false;

  /**
   * Query setter for lazily querying nested subscribedPartners collection
   * (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QuerySubscribedPartnersByParty
   */
  private class QuerySubscribedPartnersSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.phoenixbioinformatics.api.db.api.IPartner, IParty, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QuerySubscribedPartnersSetter object.
     */
    public QuerySubscribedPartnersSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Partner.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IParty getParametersDto() {
      return AbstractPartyProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.IPartner, IParty> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySubscribedPartnersByParty();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.phoenixbioinformatics.api.db.api.IPartner child : collection) {
          child.attach(AbstractPartyProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractPartyProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setPartner(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded subscribedPartners
      return subscribedPartnersLoaded;
    }
  }


  /**
   * Read-Object setter for de-serializing nested subscribedPartners collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryPartner
   */
  private class ReadSubscribedPartnersSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.phoenixbioinformatics.api.db.api.IPartner> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadSubscribedPartnersSetter object to read the partner collection.
     */
    public ReadSubscribedPartnersSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Partner.class.getName();
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner> getObjectCollection() {
      java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner> subscribedPartners = null;
      try {
        subscribedPartners = ((org.phoenixbioinformatics.api.db.api.Party)dto).getSubscribedPartners();
      } catch (java.sql.SQLException e) {
        throw new RuntimeException("SQL Exception on collection query: " + e.getMessage(), e);
      }
      return subscribedPartners;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Party)dto).partnerKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IPartner> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryPartner();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner> collection) {
      ((org.phoenixbioinformatics.api.db.api.Party)dto).subscribedPartners = collection;
    }
  }


  /**
   * Add a org.phoenixbioinformatics.api.db.api.IPartner object to the SubscribedPartners collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IPartner object to add to the collection
   * @throws java.sql.SQLException when there is a database problem
   */
  public void addSubscribedPartnersPartner(org.phoenixbioinformatics.api.db.api.IPartner object)throws java.sql.SQLException {
    // Collection is lazily loaded, check and load if necessary.
    if (!subscribedPartnersLoaded) {
      getSubscribedPartners();
    }
    ((Party)dto).addSubscribedPartnersPartner(object);
  }



  /**
   * Read-Object setter for de-serializing nested sessions collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryPageView
   */
  private class ReadSessionsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.phoenixbioinformatics.api.db.api.IPageView> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadSessionsSetter object to read the sessions collection.
     */
    public ReadSessionsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.PageView.class.getName();
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView> getObjectCollection() {
      java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView> sessions =  ((org.phoenixbioinformatics.api.db.api.Party)dto).getSessions();
      return sessions;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Party)dto).sessionsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IPageView> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryPageView();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView> collection) {
      ((org.phoenixbioinformatics.api.db.api.Party)dto).sessions = collection;
    }
  }


  /**
   * Add a org.phoenixbioinformatics.api.db.api.IPageView object to the Sessions collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IPageView object to add to the collection
   */
  public void addSessionsPageView(org.phoenixbioinformatics.api.db.api.IPageView object) {
    ((Party)dto).addSessionsPageView(object);
  }



  /**
   * Read-Object setter for de-serializing nested ipRanges collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryIpRange
   */
  private class ReadIpRangesSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.phoenixbioinformatics.api.db.api.IIpRange> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadIpRangesSetter object to read the ipRanges collection.
     */
    public ReadIpRangesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.IpRange.class.getName();
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange> getObjectCollection() {
      java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange> ipRanges =  ((org.phoenixbioinformatics.api.db.api.Party)dto).getIpRanges();
      return ipRanges;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Party)dto).ipRangesKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IIpRange> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryIpRange();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange> collection) {
      ((org.phoenixbioinformatics.api.db.api.Party)dto).ipRanges = collection;
    }
  }


  /**
   * Add a org.phoenixbioinformatics.api.db.api.IIpRange object to the IpRanges collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IIpRange object to add to the collection
   */
  public void addIpRangesIpRange(org.phoenixbioinformatics.api.db.api.IIpRange object) {
    ((Party)dto).addIpRangesIpRange(object);
  }



  /**
   * Read-Object setter for de-serializing nested login collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryLogin
   */
  private class ReadLoginSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.phoenixbioinformatics.api.db.api.ILogin> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadLoginSetter object to read the login collection.
     */
    public ReadLoginSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Login.class.getName();
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin> getObjectCollection() {
      java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin> login =  ((org.phoenixbioinformatics.api.db.api.Party)dto).getLogin();
      return login;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Party)dto).loginKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.ILogin> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryLogin();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin> collection) {
      ((org.phoenixbioinformatics.api.db.api.Party)dto).login = collection;
    }
  }


  /**
   * Add a org.phoenixbioinformatics.api.db.api.ILogin object to the Login collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ILogin object to add to the collection
   */
  public void addLoginLogin(org.phoenixbioinformatics.api.db.api.ILogin object) {
    ((Party)dto).addLoginLogin(object);
  }

  

  /** Flag indicating whether the subscription property has been loaded */
  boolean subscriptionLoaded = false;

  /**
   * Query setter for lazily querying nested subscription collection
   * (collection property)
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionByParty
   */
  private class QuerySubscriptionSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.phoenixbioinformatics.api.db.api.ISubscription, IParty, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QuerySubscriptionSetter object.
     */
    public QuerySubscriptionSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Subscription.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IParty getParametersDto() {
      return AbstractPartyProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.ISubscription, IParty> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionByParty();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.phoenixbioinformatics.api.db.api.ISubscription child : collection) {
          child.attach(AbstractPartyProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractPartyProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setSubscription(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded subscription
      return subscriptionLoaded;
    }
  }


  /**
   * Read-Object setter for de-serializing nested subscription collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QuerySubscription
   */
  private class ReadSubscriptionSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.phoenixbioinformatics.api.db.api.ISubscription> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadSubscriptionSetter object to read the subscription collection.
     */
    public ReadSubscriptionSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Subscription.class.getName();
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> getObjectCollection() {
      java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> subscription = null;
      try {
        subscription = ((org.phoenixbioinformatics.api.db.api.Party)dto).getSubscription();
      } catch (java.sql.SQLException e) {
        throw new RuntimeException("SQL Exception on collection query: " + e.getMessage(), e);
      }
      return subscription;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Party)dto).subscriptionKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.ISubscription> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySubscription();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> collection) {
      ((org.phoenixbioinformatics.api.db.api.Party)dto).subscription = collection;
    }
  }


  /**
   * Add a org.phoenixbioinformatics.api.db.api.ISubscription object to the Subscription collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ISubscription object to add to the collection
   * @throws java.sql.SQLException when there is a database problem
   */
  public void addSubscriptionSubscription(org.phoenixbioinformatics.api.db.api.ISubscription object)throws java.sql.SQLException {
    // Collection is lazily loaded, check and load if necessary.
    if (!subscriptionLoaded) {
      getSubscription();
    }
    ((Party)dto).addSubscriptionSubscription(object);
  }

  /**
   * Create a PartyProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractPartyProxy(Party dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadSubscribedPartnersSetter());
    readObjectSetters.add(new ReadSessionsSetter());
    readObjectSetters.add(new ReadIpRangesSetter());
    readObjectSetters.add(new ReadLoginSetter());
    readObjectSetters.add(new ReadSubscriptionSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractPartyProxy otherProxy = (AbstractPartyProxy)obj;
    return ((Party)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((Party)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getPartyId() {
    return ((Party)dto).getPartyId();
  }

  /**
   * Get an object of java.lang.String
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getName() {
    return ((Party)dto).getName();
  }

  public void setName(java.lang.String name)
      throws com.poesys.db.InvalidParametersException {
    ((Party)dto).setName(name);
  }

  /**
   * Get an object of java.lang.String
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getPartyType() {
    return ((Party)dto).getPartyType();
  }

  public void setPartyType(java.lang.String partyType)
      throws com.poesys.db.InvalidParametersException {
    ((Party)dto).setPartyType(partyType);
  }

  /**
   * Get an object of java.lang.Boolean
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Boolean
   */
  public java.lang.Boolean getDisplay() {
    return ((Party)dto).getDisplay();
  }

  public void setDisplay(java.lang.Boolean display)
      throws com.poesys.db.InvalidParametersException {
    ((Party)dto).setDisplay(display);
  }

  /**
   * Get an object of org.phoenixbioinformatics.api.db.api.ICountry
   *
   * Source: AddToOneAssociationOptionalObjectProperties
   * Lazy: false
   * 
   * @return a org.phoenixbioinformatics.api.db.api.ICountry
   */
  public org.phoenixbioinformatics.api.db.api.ICountry getCountry() {
    return ((Party)dto).getCountry();
  }

  public void setCountry(org.phoenixbioinformatics.api.db.api.ICountry country)
      {
    ((Party)dto).setCountry(country);
  }

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties + AddToOneAssociationAttributeProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getCountryId() {
    return ((Party)dto).getCountryId();
  }

  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IPartner
   * loading the subscribedPartners association if it is not already in memory.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: true
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner>
   * @throws java.sql.SQLException when there is a database problem
   */
  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner> getSubscribedPartners() throws java.sql.SQLException {
    // Lazy-load the local property subscribedPartners if not loaded.
    if (!subscribedPartnersLoaded) {
      try {
        com.poesys.db.dto.ISet setter = new QuerySubscribedPartnersSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((Party)dto).getSubscribedPartners();
  }

  /**
   * Clear the lazily loaded property subscribedPartners if it is loaded.
   */
  public void clearSubscribedPartners() {
    // Only clear if loaded already.
    if (subscribedPartnersLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Party)dto).setPartner(null);
        ((Party)dto).undoStatus();
        subscribedPartnersLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the subscribedPartners from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param subscribedPartners the lazily loaded value to assign
   */
  public void setPartner(java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner> subscribedPartners)
      {
    ((Party)dto).setPartner(subscribedPartners);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    subscribedPartnersLoaded = true;
  }

  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IPageView
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView>
   */
  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView> getSessions() {
    return ((Party)dto).getSessions();
  }

  public void setSessions(java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView> sessions)
      {
    ((Party)dto).setSessions(sessions);
  }

  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IIpRange
   *
   * Source: AddToManyChildCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange>
   */
  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange> getIpRanges() {
    return ((Party)dto).getIpRanges();
  }

  public void setIpRanges(java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange> ipRanges)
      {
    ((Party)dto).setIpRanges(ipRanges);
  }

  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.ILogin
   *
   * Source: AddToManyChildCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin>
   */
  public java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin> getLogin() {
    return ((Party)dto).getLogin();
  }

  public void setLogin(java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin> login)
      {
    ((Party)dto).setLogin(login);
  }

  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.ISubscription
   * loading the subscription association if it is not already in memory.
   *
   * Source: AddAssociationClassCollectionProperties
   * Lazy: true
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription>
   * @throws java.sql.SQLException when there is a database problem
   */
  public java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> getSubscription() throws java.sql.SQLException {
    // Lazy-load the local property subscription if not loaded.
    if (!subscriptionLoaded) {
      try {
        com.poesys.db.dto.ISet setter = new QuerySubscriptionSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((Party)dto).getSubscription();
  }

  /**
   * Clear the lazily loaded property subscription if it is loaded.
   */
  public void clearSubscription() {
    // Only clear if loaded already.
    if (subscriptionLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Party)dto).setSubscription(null);
        ((Party)dto).undoStatus();
        subscriptionLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the subscription from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param subscription the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setSubscription(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> subscription)
      throws com.poesys.db.InvalidParametersException {
    ((Party)dto).setSubscription(subscription);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    subscriptionLoaded = true;
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((Party)dto).markChildrenDeleted();
  }
}