/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegate.vsl

package org.phoenixbioinformatics.api.bs.api;


import com.poesys.bs.delegate.AbstractDataDelegate;
import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.connection.IConnectionFactory.DBMS;
import com.poesys.db.dao.insert.IInsertSql;
import com.poesys.db.dao.update.IUpdateSql;
import com.poesys.db.dao.delete.IDeleteSql;
import com.poesys.db.dao.query.IKeyQuerySql;
import com.poesys.db.dao.query.IQuerySql;


/**
 * <p>
 * A business delegate that provides an application programming interface for
 * Country objects and their dependents. You should not modify this class;
 * instead, override or add methods in the class CountryDelegate, which
 * specializes this class.
 * </p>
 * <p>
 * a country with a unique name
 * </p>
 * @see CountryDelegate
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractCountryDelegate
    extends AbstractDataDelegate<BsCountry, org.phoenixbioinformatics.api.db.api.ICountry, com.poesys.db.pk.SequencePrimaryKey> {
  /**
   * Create an AbstractCountryDelegate object by supplying the database
   * subsystem in the database.properties file.
   * 
   * @param subsystem the database subsystem to use in database.properties
   */
  public AbstractCountryDelegate(String subsystem) {
    super(subsystem, 2147483647);
  }

  /**
   * Create an AbstractCountryDelegate object by supplying the database
   * subsystem in the database.properties file and a specific DBMS, usually
   * IConnectionFactory.DBMS.JNDI.
   * 
   * @param subsystem the database subsystem to use in database.properties
   * @param dbms the DBMS to use (usually IConnectionFactory.DBMS.JNDI)
   */
  public AbstractCountryDelegate(String subsystem, DBMS dbms) {
    super(subsystem, dbms, 2147483647);
  }

  @Override
  protected String getClassName() {
    return org.phoenixbioinformatics.api.db.api.Country.class.getName();
  }

  @Override
  protected IInsertSql<org.phoenixbioinformatics.api.db.api.ICountry> getInsertSql() {
    return new org.phoenixbioinformatics.api.db.api.sql.InsertCountry();
  }

  @Override
  protected IDeleteSql<org.phoenixbioinformatics.api.db.api.ICountry> getDeleteSql() {
    return new org.phoenixbioinformatics.api.db.api.sql.DeleteCountry();
  }

  @Override
  protected IUpdateSql<org.phoenixbioinformatics.api.db.api.ICountry> getUpdateSql() {
    return new org.phoenixbioinformatics.api.db.api.sql.UpdateCountry();
  }

  @Override
  protected IKeyQuerySql<org.phoenixbioinformatics.api.db.api.ICountry> getQueryByKeySql() {
    return new org.phoenixbioinformatics.api.db.api.sql.QueryCountry();
  }

  @Override
  protected IQuerySql<org.phoenixbioinformatics.api.db.api.ICountry> getQueryListSql() {
    // Query-All method not required
    return new org.phoenixbioinformatics.api.db.api.sql.QueryAllCountry();
  }

  @Override
  protected org.phoenixbioinformatics.api.bs.api.BsCountry wrapData(org.phoenixbioinformatics.api.db.api.ICountry dto) {
    return new org.phoenixbioinformatics.api.bs.api.BsCountry(dto);
  }

  /**
   * <p>
   * Create a new Country with data fields.
   * </p>
   * <p>
   * The Country class has a sequence key; this method generates the
   * sequence for later insertion into the database.
   * </p>
   * 
   * @param countryId primary key attribute
   * @param name the unique name of the country
   * @return the new Country object
   * @throws DelegateException when there is a problem generating the key or
   *             creating the object
   */
  public org.phoenixbioinformatics.api.bs.api.BsCountry createCountry(java.math.BigInteger countryId, java.lang.String name)
      throws DelegateException {
      com.poesys.db.pk.SequencePrimaryKey key = null;

    // Generate a new Country id if the input key is null.
    if (countryId == null) {
      java.sql.Connection connection = null;
      try {
        connection = getConnection();
        if (connection == null) {
          throw new DelegateException("Could not get database connection to generate sequence");
        }
        
        if (dbms.equals(DBMS.MYSQL) || dbms.equals(DBMS.JNDI_MYSQL)) {
          key =
            com.poesys.db.pk.PrimaryKeyFactory.createMySqlSequenceKey(connection,
                                                                      "Country_SEQ",
                                                                      "countryId",
                                                                      "org.phoenixbioinformatics.api.db.api.Country");
        } else if (dbms.equals(DBMS.ORACLE) || dbms.equals(DBMS.JNDI_ORACLE)) {
          // Create key with sequence Country_SEQ
          key =
            com.poesys.db.pk.PrimaryKeyFactory.createOracleSequenceKey(connection,
                                                                       "Country_SEQ",
                                                                       "countryId",
                                                                       "org.phoenixbioinformatics.api.db.api.Country");
        } else {
          throw new DelegateException("com.poesys.bs.delegate.msg.noDbms");
        }
        // Get the sequence number for use as an attribute value.
        countryId = key.getValue();
      } catch (com.poesys.db.InvalidParametersException e) {
        Object[] args = e.getParameters().toArray();
        String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
        throw new DelegateException(message, e);
      } catch (com.poesys.db.NoPrimaryKeyException e) {
        Object[] args = e.getParameters().toArray();
        String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
        throw new DelegateException(message, e);
      } catch (java.sql.SQLException e) {
        throw new DelegateException(e.getMessage(), e);
      } finally {
        // Done with this connection, close it and return it to the pool.
        if (connection != null) {
          try {
            connection.close();
          } catch (java.sql.SQLException e) {
            throw new DelegateException(e.getMessage(), e);
          }
        }
      }
    } else {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("countryId", countryId, "org.phoenixbioinformatics.api.db.api.Country");
    }

    // Create a data-access DTO for direct access, no proxy required.
    org.phoenixbioinformatics.api.db.api.ICountry dto =
      new org.phoenixbioinformatics.api.db.api.Country(key, countryId, name);

    // Create the business DTO.
    return new org.phoenixbioinformatics.api.bs.api.BsCountry(dto);
  }

}
