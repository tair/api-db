/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.phoenixbioinformatics.api.db.api;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * Partner. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * a system that comprises a unit for subscription, authentication, and
 * authorization
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractPartnerProxy extends AbstractLazyLoadingDtoProxy implements IPartner {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
    // Setter strategy nested classes for multiple-object associations

  /** Flag indicating whether the subscribers property has been loaded */
  boolean subscribersLoaded = false;

  /**
   * Query setter for lazily querying nested subscribers collection
   * (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QuerySubscribersByPartner
   */
  private class QuerySubscribersSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.phoenixbioinformatics.api.db.api.IParty, IPartner, java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QuerySubscribersSetter object.
     */
    public QuerySubscribersSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Party.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IPartner getParametersDto() {
      return AbstractPartnerProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.IParty, IPartner> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySubscribersByPartner();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.phoenixbioinformatics.api.db.api.IParty child : collection) {
          child.attach(AbstractPartnerProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractPartnerProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setSubscriber(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded subscribers
      return subscribersLoaded;
    }
  }


  /**
   * Read-Object setter for de-serializing nested subscribers collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryParty
   */
  private class ReadSubscribersSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.phoenixbioinformatics.api.db.api.IParty> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadSubscribersSetter object to read the subscriber collection.
     */
    public ReadSubscribersSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Party.class.getName();
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty> getObjectCollection() {
      java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty> subscribers = null;
      try {
        subscribers = ((org.phoenixbioinformatics.api.db.api.Partner)dto).getSubscribers();
      } catch (java.sql.SQLException e) {
        throw new RuntimeException("SQL Exception on collection query: " + e.getMessage(), e);
      }
      return subscribers;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Partner)dto).subscriberKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IParty> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryParty();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty> collection) {
      ((org.phoenixbioinformatics.api.db.api.Partner)dto).subscribers = collection;
    }
  }


  /**
   * Add a org.phoenixbioinformatics.api.db.api.IParty object to the Subscribers collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IParty object to add to the collection
   * @throws java.sql.SQLException when there is a database problem
   */
  public void addSubscribersParty(org.phoenixbioinformatics.api.db.api.IParty object)throws java.sql.SQLException {
    // Collection is lazily loaded, check and load if necessary.
    if (!subscribersLoaded) {
      getSubscribers();
    }
    ((Partner)dto).addSubscribersParty(object);
  }



  /**
   * Read-Object setter for de-serializing nested activationCodes collection
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryActivationCode
   */
  private class ReadActivationCodesSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.phoenixbioinformatics.api.db.api.IActivationCode> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadActivationCodesSetter object to read the activationCodes collection.
     */
    public ReadActivationCodesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.ActivationCode.class.getName();
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode> getObjectCollection() {
      java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode> activationCodes =  ((org.phoenixbioinformatics.api.db.api.Partner)dto).getActivationCodes();
      return activationCodes;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Partner)dto).activationCodesKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IActivationCode> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryActivationCode();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode> collection) {
      ((org.phoenixbioinformatics.api.db.api.Partner)dto).activationCodes = collection;
    }
  }


  /**
   * Add a org.phoenixbioinformatics.api.db.api.IActivationCode object to the ActivationCodes collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IActivationCode object to add to the collection
   */
  public void addActivationCodesActivationCode(org.phoenixbioinformatics.api.db.api.IActivationCode object) {
    ((Partner)dto).addActivationCodesActivationCode(object);
  }



  /**
   * Read-Object setter for de-serializing nested accessRules collection
   *
   * Source: AddToManyAssociatedKeyCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryAccessRule
   */
  private class ReadAccessRulesSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.phoenixbioinformatics.api.db.api.IAccessRule> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadAccessRulesSetter object to read the accessRules collection.
     */
    public ReadAccessRulesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.AccessRule.class.getName();
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> getObjectCollection() {
      java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> accessRules =  ((org.phoenixbioinformatics.api.db.api.Partner)dto).getAccessRules();
      return accessRules;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Partner)dto).accessRulesKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IAccessRule> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryAccessRule();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> collection) {
      ((org.phoenixbioinformatics.api.db.api.Partner)dto).accessRules = collection;
    }
  }


  /**
   * Add a org.phoenixbioinformatics.api.db.api.IAccessRule object to the AccessRules collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddToManyAssociatedKeyCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IAccessRule object to add to the collection
   */
  public void addAccessRulesAccessRule(org.phoenixbioinformatics.api.db.api.IAccessRule object) {
    ((Partner)dto).addAccessRulesAccessRule(object);
  }



  /**
   * Read-Object setter for de-serializing nested patterns collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryPartnerPattern
   */
  private class ReadPatternsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.phoenixbioinformatics.api.db.api.IPartnerPattern> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadPatternsSetter object to read the patterns collection.
     */
    public ReadPatternsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.PartnerPattern.class.getName();
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern> getObjectCollection() {
      java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern> patterns =  ((org.phoenixbioinformatics.api.db.api.Partner)dto).getPatterns();
      return patterns;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Partner)dto).patternsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IPartnerPattern> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryPartnerPattern();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern> collection) {
      ((org.phoenixbioinformatics.api.db.api.Partner)dto).patterns = collection;
    }
  }


  /**
   * Add a org.phoenixbioinformatics.api.db.api.IPartnerPattern object to the Patterns collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IPartnerPattern object to add to the collection
   */
  public void addPatternsPartnerPattern(org.phoenixbioinformatics.api.db.api.IPartnerPattern object) {
    ((Partner)dto).addPatternsPartnerPattern(object);
  }



  /**
   * Read-Object setter for de-serializing nested subscriptionTerms collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionTerm
   */
  private class ReadSubscriptionTermsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadSubscriptionTermsSetter object to read the subscriptionTerms collection.
     */
    public ReadSubscriptionTermsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionTerm.class.getName();
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> getObjectCollection() {
      java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> subscriptionTerms =  ((org.phoenixbioinformatics.api.db.api.Partner)dto).getSubscriptionTerms();
      return subscriptionTerms;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Partner)dto).subscriptionTermsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionTerm();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> collection) {
      ((org.phoenixbioinformatics.api.db.api.Partner)dto).subscriptionTerms = collection;
    }
  }


  /**
   * Add a org.phoenixbioinformatics.api.db.api.ISubscriptionTerm object to the SubscriptionTerms collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ISubscriptionTerm object to add to the collection
   */
  public void addSubscriptionTermsSubscriptionTerm(org.phoenixbioinformatics.api.db.api.ISubscriptionTerm object) {
    ((Partner)dto).addSubscriptionTermsSubscriptionTerm(object);
  }



  /**
   * Read-Object setter for de-serializing nested subscriptionDescriptions collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionDescription
   */
  private class ReadSubscriptionDescriptionsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadSubscriptionDescriptionsSetter object to read the subscriptionDescriptions collection.
     */
    public ReadSubscriptionDescriptionsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionDescription.class.getName();
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> getObjectCollection() {
      java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> subscriptionDescriptions =  ((org.phoenixbioinformatics.api.db.api.Partner)dto).getSubscriptionDescriptions();
      return subscriptionDescriptions;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Partner)dto).subscriptionDescriptionsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionDescription();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> collection) {
      ((org.phoenixbioinformatics.api.db.api.Partner)dto).subscriptionDescriptions = collection;
    }
  }


  /**
   * Add a org.phoenixbioinformatics.api.db.api.ISubscriptionDescription object to the SubscriptionDescriptions collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ISubscriptionDescription object to add to the collection
   */
  public void addSubscriptionDescriptionsSubscriptionDescription(org.phoenixbioinformatics.api.db.api.ISubscriptionDescription object) {
    ((Partner)dto).addSubscriptionDescriptionsSubscriptionDescription(object);
  }



  /**
   * Read-Object setter for de-serializing nested ipCounts collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryIpCount
   */
  private class ReadIpCountsSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.phoenixbioinformatics.api.db.api.IIpCount> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadIpCountsSetter object to read the ipCounts collection.
     */
    public ReadIpCountsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.IpCount.class.getName();
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount> getObjectCollection() {
      java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount> ipCounts =  ((org.phoenixbioinformatics.api.db.api.Partner)dto).getIpCounts();
      return ipCounts;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Partner)dto).ipCountsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IIpCount> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryIpCount();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount> collection) {
      ((org.phoenixbioinformatics.api.db.api.Partner)dto).ipCounts = collection;
    }
  }


  /**
   * Add a org.phoenixbioinformatics.api.db.api.IIpCount object to the IpCounts collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IIpCount object to add to the collection
   */
  public void addIpCountsIpCount(org.phoenixbioinformatics.api.db.api.IIpCount object) {
    ((Partner)dto).addIpCountsIpCount(object);
  }



  /**
   * Read-Object setter for de-serializing nested limitValues collection
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryLimitValue
   */
  private class ReadLimitValuesSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.phoenixbioinformatics.api.db.api.ILimitValue> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadLimitValuesSetter object to read the limitValues collection.
     */
    public ReadLimitValuesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.LimitValue.class.getName();
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue> getObjectCollection() {
      java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue> limitValues =  ((org.phoenixbioinformatics.api.db.api.Partner)dto).getLimitValues();
      return limitValues;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Partner)dto).limitValuesKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.ILimitValue> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryLimitValue();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue> collection) {
      ((org.phoenixbioinformatics.api.db.api.Partner)dto).limitValues = collection;
    }
  }


  /**
   * Add a org.phoenixbioinformatics.api.db.api.ILimitValue object to the LimitValues collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ILimitValue object to add to the collection
   */
  public void addLimitValuesLimitValue(org.phoenixbioinformatics.api.db.api.ILimitValue object) {
    ((Partner)dto).addLimitValuesLimitValue(object);
  }

  

  /** Flag indicating whether the subscription property has been loaded */
  boolean subscriptionLoaded = false;

  /**
   * Query setter for lazily querying nested subscription collection
   * (collection property)
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionByPartner
   */
  private class QuerySubscriptionSetter 
      extends com.poesys.db.dto.AbstractLazyListSetter<org.phoenixbioinformatics.api.db.api.ISubscription, IPartner, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription>> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QuerySubscriptionSetter object.
     */
    public QuerySubscriptionSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Subscription.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IPartner getParametersDto() {
      return AbstractPartnerProxy.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.ISubscription, IPartner> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionByPartner();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> collection) {
      try {
        // Register the observer parent with the subject children.
        for (org.phoenixbioinformatics.api.db.api.ISubscription child : collection) {
          child.attach(AbstractPartnerProxy.this.dto,
                              com.poesys.db.dao.DataEvent.MARKED_DELETED);
          child.attach(AbstractPartnerProxy.this.dto, com.poesys.db.dao.DataEvent.DELETE);
        }
        setSubscription(collection);
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Just lazy loading here, not actually setting. Ignore this exception.        
      }
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded subscription
      return subscriptionLoaded;
    }
  }


  /**
   * Read-Object setter for de-serializing nested subscription collection
   *
   * Source: AddAssociationClassCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QuerySubscription
   */
  private class ReadSubscriptionSetter 
      extends com.poesys.db.dto.AbstractCollectionReadSetter<org.phoenixbioinformatics.api.db.api.ISubscription> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadSubscriptionSetter object to read the subscription collection.
     */
    public ReadSubscriptionSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Subscription.class.getName();
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> getObjectCollection() {
      java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> subscription = null;
      try {
        subscription = ((org.phoenixbioinformatics.api.db.api.Partner)dto).getSubscription();
      } catch (java.sql.SQLException e) {
        throw new RuntimeException("SQL Exception on collection query: " + e.getMessage(), e);
      }
      return subscription;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Partner)dto).subscriptionKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.ISubscription> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySubscription();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> collection) {
      ((org.phoenixbioinformatics.api.db.api.Partner)dto).subscription = collection;
    }
  }


  /**
   * Add a org.phoenixbioinformatics.api.db.api.ISubscription object to the Subscription collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ISubscription object to add to the collection
   * @throws java.sql.SQLException when there is a database problem
   */
  public void addSubscriptionSubscription(org.phoenixbioinformatics.api.db.api.ISubscription object)throws java.sql.SQLException {
    // Collection is lazily loaded, check and load if necessary.
    if (!subscriptionLoaded) {
      getSubscription();
    }
    ((Partner)dto).addSubscriptionSubscription(object);
  }

  /**
   * Create a PartnerProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractPartnerProxy(Partner dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadSubscribersSetter());
    readObjectSetters.add(new ReadActivationCodesSetter());
    readObjectSetters.add(new ReadAccessRulesSetter());
    readObjectSetters.add(new ReadPatternsSetter());
    readObjectSetters.add(new ReadSubscriptionTermsSetter());
    readObjectSetters.add(new ReadSubscriptionDescriptionsSetter());
    readObjectSetters.add(new ReadIpCountsSetter());
    readObjectSetters.add(new ReadLimitValuesSetter());
    readObjectSetters.add(new ReadSubscriptionSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractPartnerProxy otherProxy = (AbstractPartnerProxy)obj;
    return ((Partner)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((Partner)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.lang.String
   *
   * Source: AddNaturalKeyProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getPartnerId() {
    return ((Partner)dto).getPartnerId();
  }

  /**
   * Get an object of java.lang.String
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getName() {
    return ((Partner)dto).getName();
  }

  public void setName(java.lang.String name)
      throws com.poesys.db.InvalidParametersException {
    ((Partner)dto).setName(name);
  }

  /**
   * Get an object of java.lang.String
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getLogoUri() {
    return ((Partner)dto).getLogoUri();
  }

  public void setLogoUri(java.lang.String logoUri)
      {
    ((Partner)dto).setLogoUri(logoUri);
  }

  /**
   * Get an object of java.lang.String
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getTermOfServiceUri() {
    return ((Partner)dto).getTermOfServiceUri();
  }

  public void setTermOfServiceUri(java.lang.String termOfServiceUri)
      {
    ((Partner)dto).setTermOfServiceUri(termOfServiceUri);
  }

  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IParty
   * loading the subscribers association if it is not already in memory.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: true
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty>
   * @throws java.sql.SQLException when there is a database problem
   */
  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty> getSubscribers() throws java.sql.SQLException {
    // Lazy-load the local property subscribers if not loaded.
    if (!subscribersLoaded) {
      try {
        com.poesys.db.dto.ISet setter = new QuerySubscribersSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((Partner)dto).getSubscribers();
  }

  /**
   * Clear the lazily loaded property subscribers if it is loaded.
   */
  public void clearSubscribers() {
    // Only clear if loaded already.
    if (subscribersLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Partner)dto).setSubscriber(null);
        ((Partner)dto).undoStatus();
        subscribersLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the subscribers from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param subscribers the lazily loaded value to assign
   */
  public void setSubscriber(java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty> subscribers)
      {
    ((Partner)dto).setSubscriber(subscribers);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    subscribersLoaded = true;
  }

  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IActivationCode
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode>
   */
  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode> getActivationCodes() {
    return ((Partner)dto).getActivationCodes();
  }

  public void setActivationCodes(java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode> activationCodes)
      {
    ((Partner)dto).setActivationCodes(activationCodes);
  }

  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IAccessRule
   *
   * Source: AddToManyAssociatedKeyCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule>
   */
  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> getAccessRules() {
    return ((Partner)dto).getAccessRules();
  }

  public void setAccessRules(java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> accessRules)
      {
    ((Partner)dto).setAccessRules(accessRules);
  }

  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IPartnerPattern
   *
   * Source: AddToManyChildCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern>
   */
  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern> getPatterns() {
    return ((Partner)dto).getPatterns();
  }

  public void setPatterns(java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern> patterns)
      throws com.poesys.db.InvalidParametersException {
    ((Partner)dto).setPatterns(patterns);
  }

  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.ISubscriptionTerm
   *
   * Source: AddToManyChildCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm>
   */
  public java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> getSubscriptionTerms() {
    return ((Partner)dto).getSubscriptionTerms();
  }

  public void setSubscriptionTerms(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> subscriptionTerms)
      {
    ((Partner)dto).setSubscriptionTerms(subscriptionTerms);
  }

  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.ISubscriptionDescription
   *
   * Source: AddToManyChildCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription>
   */
  public java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> getSubscriptionDescriptions() {
    return ((Partner)dto).getSubscriptionDescriptions();
  }

  public void setSubscriptionDescriptions(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> subscriptionDescriptions)
      {
    ((Partner)dto).setSubscriptionDescriptions(subscriptionDescriptions);
  }

  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IIpCount
   *
   * Source: AddToManyChildCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount>
   */
  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount> getIpCounts() {
    return ((Partner)dto).getIpCounts();
  }

  public void setIpCounts(java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount> ipCounts)
      {
    ((Partner)dto).setIpCounts(ipCounts);
  }

  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.ILimitValue
   *
   * Source: AddToManyChildCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue>
   */
  public java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue> getLimitValues() {
    return ((Partner)dto).getLimitValues();
  }

  public void setLimitValues(java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue> limitValues)
      throws com.poesys.db.InvalidParametersException {
    ((Partner)dto).setLimitValues(limitValues);
  }

  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.ISubscription
   * loading the subscription association if it is not already in memory.
   *
   * Source: AddAssociationClassCollectionProperties
   * Lazy: true
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription>
   * @throws java.sql.SQLException when there is a database problem
   */
  public java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> getSubscription() throws java.sql.SQLException {
    // Lazy-load the local property subscription if not loaded.
    if (!subscriptionLoaded) {
      try {
        com.poesys.db.dto.ISet setter = new QuerySubscriptionSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    }
    return ((Partner)dto).getSubscription();
  }

  /**
   * Clear the lazily loaded property subscription if it is loaded.
   */
  public void clearSubscription() {
    // Only clear if loaded already.
    if (subscriptionLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Partner)dto).setSubscription(null);
        ((Partner)dto).undoStatus();
        subscriptionLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the subscription from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param subscription the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  public void setSubscription(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> subscription)
      throws com.poesys.db.InvalidParametersException {
    ((Partner)dto).setSubscription(subscription);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    subscriptionLoaded = true;
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((Partner)dto).markChildrenDeleted();
  }
}