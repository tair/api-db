/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.phoenixbioinformatics.api.db.api;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * Subscription. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An agreement by a party to take and pay for access to a partner system; a
 * relationship between a party and a partner system
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractSubscriptionProxy extends AbstractLazyLoadingDtoProxy implements ISubscription {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  // Lazy-loading query setter strategy nested classes for single-object associations
  
  /** Flag indicating whether the partner property has been loaded */
  boolean partnerLoaded = false;

  /**
   * Query setter for lazily querying nested partner object
   * (object property)
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryPartner
   */
  private class QueryPartnerSetter 
      extends com.poesys.db.dto.AbstractLazyObjectSetter<org.phoenixbioinformatics.api.db.api.IPartner> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;

    /**
     * Create a QueryPartnerSetter object.
     */
    public QueryPartnerSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Partner.class.getName();
    }

    @Override
    protected com.poesys.db.pk.IPrimaryKey getKey() {
      // Generate an org.phoenixbioinformatics.api.db.api.IPartner primary key with the value 
      // from the org.phoenixbioinformatics.api.db.api.ISubscription object
      return org.phoenixbioinformatics.api.db.api.ApiFactory.getPartnerPrimaryKey(((ISubscription)dto).getPartnerId());
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IPartner> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryPartner();
    }

    @Override
    protected void set(org.phoenixbioinformatics.api.db.api.IPartner dto)
         throws com.poesys.db.InvalidParametersException, 
                com.poesys.db.dto.DtoStatusException {
      setPartner(dto);
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded partner
      return partnerLoaded;
    }
  }

  /** Flag indicating whether the subscriber property has been loaded */
  boolean subscriberLoaded = false;

  /**
   * Query setter for lazily querying nested subscriber object
   * (object property)
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryParty
   */
  private class QuerySubscriberSetter 
      extends com.poesys.db.dto.AbstractLazyObjectSetter<org.phoenixbioinformatics.api.db.api.IParty> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;

    /**
     * Create a QuerySubscriberSetter object.
     */
    public QuerySubscriberSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Party.class.getName();
    }

    @Override
    protected com.poesys.db.pk.IPrimaryKey getKey() {
      // Generate an org.phoenixbioinformatics.api.db.api.IParty primary key with the value 
      // from the org.phoenixbioinformatics.api.db.api.ISubscription object
      return org.phoenixbioinformatics.api.db.api.ApiFactory.getPartyPrimaryKey(((ISubscription)dto).getPartyId());
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IParty> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryParty();
    }

    @Override
    protected void set(org.phoenixbioinformatics.api.db.api.IParty dto)
         throws com.poesys.db.InvalidParametersException, 
                com.poesys.db.dto.DtoStatusException {
      setSubscriber(dto);
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded subscriber
      return subscriberLoaded;
    }
  }



  /**
   * Read-Object setter for de-serializing nested subscriptionTransactions list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionTransaction
   */
  private class ReadSubscriptionTransactionsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadSubscriptionTransactionsSetter object to read the subscriptionTransactions list.
     */
    public ReadSubscriptionTransactionsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionTransaction.class.getName();
    }

    @Override
    protected java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> getObjectList() {
      java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> subscriptionTransactions =  ((org.phoenixbioinformatics.api.db.api.Subscription)dto).getSubscriptionTransactions();
      return subscriptionTransactions;
    }

    @Override
    protected java.util.List<com.poesys.db.pk.IPrimaryKey> getPrimaryKeys() {
      return ((org.phoenixbioinformatics.api.db.api.Subscription)dto).subscriptionTransactionsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionTransaction();
    }

    @Override
    protected void set(java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> list) {
      ((org.phoenixbioinformatics.api.db.api.Subscription)dto).subscriptionTransactions = list;
    }
  }

  /**
   * Add a org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction object to the SubscriptionTransactions collection. The method
   * loads the collection if it is not already in memory.
   *
   * add method #1 (collection property)
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction object to add to the collection
   */
  public void addSubscriptionTransactionsSubscriptionTransaction(org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction object) {
    ((Subscription)dto).addSubscriptionTransactionsSubscriptionTransaction(object);
  }

  /**
   * Create a SubscriptionProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractSubscriptionProxy(Subscription dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    readObjectSetters.add(new ReadSubscriptionTransactionsSetter());
  }

  @Override
  public boolean equals(Object obj) {
    AbstractSubscriptionProxy otherProxy = (AbstractSubscriptionProxy)obj;
    return ((Subscription)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((Subscription)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.sql.Timestamp
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.sql.Timestamp
   */
  public java.sql.Timestamp getStartDate() {
    return ((Subscription)dto).getStartDate();
  }

  public void setStartDate(java.sql.Timestamp startDate)
      throws com.poesys.db.InvalidParametersException {
    ((Subscription)dto).setStartDate(startDate);
  }

  /**
   * Get an object of java.sql.Timestamp
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.sql.Timestamp
   */
  public java.sql.Timestamp getEndDate() {
    return ((Subscription)dto).getEndDate();
  }

  public void setEndDate(java.sql.Timestamp endDate)
      throws com.poesys.db.InvalidParametersException {
    ((Subscription)dto).setEndDate(endDate);
  }

  /**
   * Get an object of java.lang.Long
   *
   * Source: AddLocalAttributeProperties
   * Lazy: false
   * 
   * @return a java.lang.Long
   */
  public java.lang.Long getSubscriptionId() {
    return ((Subscription)dto).getSubscriptionId();
  }

  public void setSubscriptionId(java.lang.Long subscriptionId)
      throws com.poesys.db.InvalidParametersException {
    ((Subscription)dto).setSubscriptionId(subscriptionId);
  }

  /**
   * Get a list of org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction
   *
   * Source: AddToManyChildCollectionProperties
   * Lazy: false
   * 
   * @return a java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction>
   */
  public java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> getSubscriptionTransactions() {
    return ((Subscription)dto).getSubscriptionTransactions();
  }

  public void setSubscriptionTransactions(java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> subscriptionTransactions)
      {
    ((Subscription)dto).setSubscriptionTransactions(subscriptionTransactions);
  }

  /**
   * Get an object of org.phoenixbioinformatics.api.db.api.IPartner
   * loading the partner association if it is not already in memory.
   *
   * Source: AddAssociationKeyObjectProperties
   * Lazy: true
   * 
   * @return a org.phoenixbioinformatics.api.db.api.IPartner
   * @throws java.sql.SQLException when there is a database problem
   */
  public org.phoenixbioinformatics.api.db.api.IPartner getPartner() throws java.sql.SQLException {
    // Lazy-load the local property partner if not loaded and the key subscribedPartners is not null.
    if (!partnerLoaded && ((ISubscription)dto).getPartnerId() != null) {
      try {
        com.poesys.db.dto.ISet setter = new QueryPartnerSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    } else if (!partnerLoaded) {
      // subscribedPartners key attribute is null but is required
      java.util.List<String> args = new java.util.ArrayList<String>(1);
      args.add("subscribedPartners");
      com.poesys.db.NoRequiredValueException e = 
        new com.poesys.db.NoRequiredValueException("com.poesys.db.dto.msg.lazy_load_no_required_value");
      e.setParameters(args);
      throw e;
    }

    return ((Subscription)dto).getPartner();
  }

  /**
   * Clear the lazily loaded property partner if it is loaded.
   */
  public void clearPartner() {
    // Only clear if loaded already.
    if (partnerLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Subscription)dto).setPartner(null);
        ((Subscription)dto).undoStatus();
        partnerLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the partner from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param partner the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setPartner(org.phoenixbioinformatics.api.db.api.IPartner partner)
      throws com.poesys.db.InvalidParametersException {
    ((Subscription)dto).setPartner(partner);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    partnerLoaded = true;
  }

  /**
   * Get an object of org.phoenixbioinformatics.api.db.api.IParty
   * loading the subscriber association if it is not already in memory.
   *
   * Source: AddAssociationKeyObjectProperties
   * Lazy: true
   * 
   * @return a org.phoenixbioinformatics.api.db.api.IParty
   * @throws java.sql.SQLException when there is a database problem
   */
  public org.phoenixbioinformatics.api.db.api.IParty getSubscriber() throws java.sql.SQLException {
    // Lazy-load the local property subscriber if not loaded and the key subscribers is not null.
    if (!subscriberLoaded && ((ISubscription)dto).getPartyId() != null) {
      try {
        com.poesys.db.dto.ISet setter = new QuerySubscriberSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    } else if (!subscriberLoaded) {
      // subscribers key attribute is null but is required
      java.util.List<String> args = new java.util.ArrayList<String>(1);
      args.add("subscribers");
      com.poesys.db.NoRequiredValueException e = 
        new com.poesys.db.NoRequiredValueException("com.poesys.db.dto.msg.lazy_load_no_required_value");
      e.setParameters(args);
      throw e;
    }

    return ((Subscription)dto).getSubscriber();
  }

  /**
   * Clear the lazily loaded property subscriber if it is loaded.
   */
  public void clearSubscriber() {
    // Only clear if loaded already.
    if (subscriberLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((Subscription)dto).setSubscriber(null);
        ((Subscription)dto).undoStatus();
        subscriberLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the subscriber from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param subscriber the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setSubscriber(org.phoenixbioinformatics.api.db.api.IParty subscriber)
      throws com.poesys.db.InvalidParametersException {
    ((Subscription)dto).setSubscriber(subscriber);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    subscriberLoaded = true;
  }

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getPartnerId() {
    return ((Subscription)dto).getPartnerId();
  }

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getPartyId() {
    return ((Subscription)dto).getPartyId();
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((Subscription)dto).markChildrenDeleted();
  }
}