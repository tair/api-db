/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.phoenixbioinformatics.api.db.api;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the Partner. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * a system that comprises a unit for subscription, authentication, and
 * authorization
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractPartner extends AbstractDto implements IPartner {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
  // Setter strategy nested classes for multiple-object associations


  /**
   * Insert setter for inserting nested to-many association subscriber.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertParty
   */
  private class InsertSubscribersSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association subscribers source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertSubscribersSetter object.
     */
    public InsertSubscribersSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Party.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = subscribers;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added subscriber, updated subscriber, and 
   * deleted subscriber. 
   */
   
  private class UpdateSubscribersSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.IParty, java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateSubscribersSetter object.
     */
    public UpdateSubscribersSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // subscribers source: TransformToProperty + AddToManyAssociationCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IParty> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Party.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.IParty> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateParty());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IParty> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Party.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.IParty> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteParty());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IParty> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Party.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.IParty> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertParty());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty> getDtos() {
      return subscribers;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Party.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.IParty object to subscribers collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IParty object
   */
  public void addSubscribersParty(org.phoenixbioinformatics.api.db.api.IParty object) {
    if (subscribers == null) {
      // Association not yet created, create it.
      subscribers = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.IParty>();
    }
    subscribers.add(object);
    // Add the primary key to the primary key array.
    subscriberKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested activationCodes
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryActivationCodesByPartner
   */
  private class QueryActivationCodesSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.phoenixbioinformatics.api.db.api.IActivationCode, IPartner, java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryActivationCodesSetter object.
     */
    public QueryActivationCodesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.ActivationCode.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IPartner getParametersDto() {
      return AbstractPartner.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.IActivationCode, IPartner> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryActivationCodesByPartner();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode> list) {
      // No status change; this is just filling in the object data.
      activationCodes = list;
      // Add the primary keys to the serialized key list if there are any.
      if (activationCodes != null) {
        for (com.poesys.db.dto.IDbDto object : activationCodes) {
          activationCodesKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated activationCodes list is not null
      return activationCodes != null;
    }
  }

  /**
   * Insert setter for inserting nested to-many association activationCodes.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertActivationCode
   */
  private class InsertActivationCodesSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association activationCodes source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertActivationCodesSetter object.
     */
    public InsertActivationCodesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.ActivationCode.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = activationCodes;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added activationCodes, updated activationCodes, and 
   * deleted activationCodes. 
   */
   
  private class UpdateActivationCodesSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.IActivationCode, java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateActivationCodesSetter object.
     */
    public UpdateActivationCodesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // activationCodes source: TransformToProperty + AddToManyAssociationCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IActivationCode> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.ActivationCode.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.IActivationCode> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateActivationCode());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IActivationCode> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.ActivationCode.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.IActivationCode> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteActivationCode());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IActivationCode> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.ActivationCode.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.IActivationCode> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertActivationCode());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode> getDtos() {
      return activationCodes;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.ActivationCode.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.IActivationCode object to activationCodes collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IActivationCode object
   */
  public void addActivationCodesActivationCode(org.phoenixbioinformatics.api.db.api.IActivationCode object) {
    if (activationCodes == null) {
      // Association not yet created, create it.
      activationCodes = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.IActivationCode>();
    }
    activationCodes.add(object);
    // Add the primary key to the primary key array.
    activationCodesKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested accessRules
   *
   * Source: AddToManyAssociatedKeyCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryAccessRulesByPartner
   */
  private class QueryAccessRulesSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.phoenixbioinformatics.api.db.api.IAccessRule, IPartner, java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryAccessRulesSetter object.
     */
    public QueryAccessRulesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.AccessRule.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IPartner getParametersDto() {
      return AbstractPartner.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.IAccessRule, IPartner> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryAccessRulesByPartner();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> list) {
      // No status change; this is just filling in the object data.
      accessRules = list;
      // Add the primary keys to the serialized key list if there are any.
      if (accessRules != null) {
        for (com.poesys.db.dto.IDbDto object : accessRules) {
          accessRulesKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated accessRules list is not null
      return accessRules != null;
    }
  }

  /**
   * Insert setter for inserting nested to-many association accessRules.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertAccessRule
   */
  private class InsertAccessRulesSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association accessRules source: AddToManyAssociatedKeyCollectionProperties

    /**
     * Create an InsertAccessRulesSetter object.
     */
    public InsertAccessRulesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.AccessRule.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = accessRules;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added accessRules, updated accessRules, and 
   * deleted accessRules. 
   */
   
  private class UpdateAccessRulesSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.IAccessRule, java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateAccessRulesSetter object.
     */
    public UpdateAccessRulesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // accessRules source: AddToManyAssociatedKeyCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IAccessRule> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.AccessRule.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.IAccessRule> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateAccessRule());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IAccessRule> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.AccessRule.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.IAccessRule> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteAccessRule());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IAccessRule> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.AccessRule.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.IAccessRule> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertAccessRule());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> getDtos() {
      return accessRules;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.AccessRule.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.IAccessRule object to accessRules collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IAccessRule object
   */
  public void addAccessRulesAccessRule(org.phoenixbioinformatics.api.db.api.IAccessRule object) {
    if (accessRules == null) {
      // Association not yet created, create it.
      accessRules = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.IAccessRule>();
    }
    accessRules.add(object);
    // Add the primary key to the primary key array.
    accessRulesKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested patterns
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryPatternsByPartner
   */
  private class QueryPatternsSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.phoenixbioinformatics.api.db.api.IPartnerPattern, IPartner, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryPatternsSetter object.
     */
    public QueryPatternsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.PartnerPattern.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IPartner getParametersDto() {
      return AbstractPartner.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.IPartnerPattern, IPartner> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryPatternsByPartner();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern> list) {
      // No status change; this is just filling in the object data.
      patterns = list;
      // Add the primary keys to the serialized key list if there are any.
      if (patterns != null) {
        for (com.poesys.db.dto.IDbDto object : patterns) {
          patternsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated patterns list is not null
      return patterns != null;
    }
  }

  /**
   * Insert setter for inserting nested to-many association patterns.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertPartnerPattern
   */
  private class InsertPatternsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association patterns source: AddToManyChildCollectionProperties

    /**
     * Create an InsertPatternsSetter object.
     */
    public InsertPatternsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.PartnerPattern.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = patterns;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added patterns and updated patterns.
   * Deleted patterns are deleted in the database cascade delete.
   */
   
  private class UpdatePatternsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.IPartnerPattern, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdatePatternsSetter object.
     */
    public UpdatePatternsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // patterns source: AddToManyChildCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IPartnerPattern> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.PartnerPattern.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.IPartnerPattern> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdatePartnerPattern());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IPartnerPattern> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.PartnerPattern.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.IPartnerPattern> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeletePartnerPattern());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IPartnerPattern> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.PartnerPattern.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.IPartnerPattern> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertPartnerPattern());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern> getDtos() {
      return patterns;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.PartnerPattern.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.IPartnerPattern object to patterns collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IPartnerPattern object
   */
  public void addPatternsPartnerPattern(org.phoenixbioinformatics.api.db.api.IPartnerPattern object) {
    if (patterns == null) {
      // Association not yet created, create it.
      patterns = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.IPartnerPattern>();
    }
    patterns.add(object);
    // Add the primary key to the primary key array.
    patternsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested subscriptionTerms
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionTermsByPartner
   */
  private class QuerySubscriptionTermsSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm, IPartner, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QuerySubscriptionTermsSetter object.
     */
    public QuerySubscriptionTermsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionTerm.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IPartner getParametersDto() {
      return AbstractPartner.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm, IPartner> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionTermsByPartner();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> list) {
      // No status change; this is just filling in the object data.
      subscriptionTerms = list;
      // Add the primary keys to the serialized key list if there are any.
      if (subscriptionTerms != null) {
        for (com.poesys.db.dto.IDbDto object : subscriptionTerms) {
          subscriptionTermsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated subscriptionTerms list is not null
      return subscriptionTerms != null;
    }
  }

  /**
   * Insert setter for inserting nested to-many association subscriptionTerms.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertSubscriptionTerm
   */
  private class InsertSubscriptionTermsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association subscriptionTerms source: AddToManyChildCollectionProperties

    /**
     * Create an InsertSubscriptionTermsSetter object.
     */
    public InsertSubscriptionTermsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionTerm.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = subscriptionTerms;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added subscriptionTerms and updated subscriptionTerms.
   * Deleted subscriptionTerms are deleted in the database cascade delete.
   */
   
  private class UpdateSubscriptionTermsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateSubscriptionTermsSetter object.
     */
    public UpdateSubscriptionTermsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // subscriptionTerms source: AddToManyChildCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionTerm.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateSubscriptionTerm());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionTerm.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteSubscriptionTerm());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionTerm.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertSubscriptionTerm());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> getDtos() {
      return subscriptionTerms;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionTerm.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.ISubscriptionTerm object to subscriptionTerms collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ISubscriptionTerm object
   */
  public void addSubscriptionTermsSubscriptionTerm(org.phoenixbioinformatics.api.db.api.ISubscriptionTerm object) {
    if (subscriptionTerms == null) {
      // Association not yet created, create it.
      subscriptionTerms = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm>();
    }
    subscriptionTerms.add(object);
    // Add the primary key to the primary key array.
    subscriptionTermsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested subscriptionDescriptions
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionDescriptionsByPartner
   */
  private class QuerySubscriptionDescriptionsSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription, IPartner, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QuerySubscriptionDescriptionsSetter object.
     */
    public QuerySubscriptionDescriptionsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionDescription.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IPartner getParametersDto() {
      return AbstractPartner.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription, IPartner> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionDescriptionsByPartner();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> list) {
      // No status change; this is just filling in the object data.
      subscriptionDescriptions = list;
      // Add the primary keys to the serialized key list if there are any.
      if (subscriptionDescriptions != null) {
        for (com.poesys.db.dto.IDbDto object : subscriptionDescriptions) {
          subscriptionDescriptionsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated subscriptionDescriptions list is not null
      return subscriptionDescriptions != null;
    }
  }

  /**
   * Insert setter for inserting nested to-many association subscriptionDescriptions.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertSubscriptionDescription
   */
  private class InsertSubscriptionDescriptionsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association subscriptionDescriptions source: AddToManyChildCollectionProperties

    /**
     * Create an InsertSubscriptionDescriptionsSetter object.
     */
    public InsertSubscriptionDescriptionsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionDescription.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = subscriptionDescriptions;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added subscriptionDescriptions and updated subscriptionDescriptions.
   * Deleted subscriptionDescriptions are deleted in the database cascade delete.
   */
   
  private class UpdateSubscriptionDescriptionsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateSubscriptionDescriptionsSetter object.
     */
    public UpdateSubscriptionDescriptionsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // subscriptionDescriptions source: AddToManyChildCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionDescription.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateSubscriptionDescription());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionDescription.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteSubscriptionDescription());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionDescription.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertSubscriptionDescription());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> getDtos() {
      return subscriptionDescriptions;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionDescription.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.ISubscriptionDescription object to subscriptionDescriptions collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ISubscriptionDescription object
   */
  public void addSubscriptionDescriptionsSubscriptionDescription(org.phoenixbioinformatics.api.db.api.ISubscriptionDescription object) {
    if (subscriptionDescriptions == null) {
      // Association not yet created, create it.
      subscriptionDescriptions = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription>();
    }
    subscriptionDescriptions.add(object);
    // Add the primary key to the primary key array.
    subscriptionDescriptionsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested ipCounts
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryIpCountsByPartner
   */
  private class QueryIpCountsSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.phoenixbioinformatics.api.db.api.IIpCount, IPartner, java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryIpCountsSetter object.
     */
    public QueryIpCountsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.IpCount.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IPartner getParametersDto() {
      return AbstractPartner.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.IIpCount, IPartner> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryIpCountsByPartner();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount> list) {
      // No status change; this is just filling in the object data.
      ipCounts = list;
      // Add the primary keys to the serialized key list if there are any.
      if (ipCounts != null) {
        for (com.poesys.db.dto.IDbDto object : ipCounts) {
          ipCountsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated ipCounts list is not null
      return ipCounts != null;
    }
  }

  /**
   * Insert setter for inserting nested to-many association ipCounts.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertIpCount
   */
  private class InsertIpCountsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association ipCounts source: AddToManyChildCollectionProperties

    /**
     * Create an InsertIpCountsSetter object.
     */
    public InsertIpCountsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.IpCount.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = ipCounts;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added ipCounts and updated ipCounts.
   * Deleted ipCounts are deleted in the database cascade delete.
   */
   
  private class UpdateIpCountsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.IIpCount, java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateIpCountsSetter object.
     */
    public UpdateIpCountsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // ipCounts source: AddToManyChildCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IIpCount> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.IpCount.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.IIpCount> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateIpCount());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IIpCount> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.IpCount.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.IIpCount> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteIpCount());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IIpCount> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.IpCount.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.IIpCount> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertIpCount());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount> getDtos() {
      return ipCounts;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.IpCount.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.IIpCount object to ipCounts collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IIpCount object
   */
  public void addIpCountsIpCount(org.phoenixbioinformatics.api.db.api.IIpCount object) {
    if (ipCounts == null) {
      // Association not yet created, create it.
      ipCounts = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.IIpCount>();
    }
    ipCounts.add(object);
    // Add the primary key to the primary key array.
    ipCountsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested limitValues
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryLimitValuesByPartner
   */
  private class QueryLimitValuesSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.phoenixbioinformatics.api.db.api.ILimitValue, IPartner, java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryLimitValuesSetter object.
     */
    public QueryLimitValuesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.LimitValue.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IPartner getParametersDto() {
      return AbstractPartner.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.ILimitValue, IPartner> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryLimitValuesByPartner();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue> list) {
      // No status change; this is just filling in the object data.
      limitValues = list;
      // Add the primary keys to the serialized key list if there are any.
      if (limitValues != null) {
        for (com.poesys.db.dto.IDbDto object : limitValues) {
          limitValuesKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated limitValues list is not null
      return limitValues != null;
    }
  }

  /**
   * Insert setter for inserting nested to-many association limitValues.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertLimitValue
   */
  private class InsertLimitValuesSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association limitValues source: AddToManyChildCollectionProperties

    /**
     * Create an InsertLimitValuesSetter object.
     */
    public InsertLimitValuesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.LimitValue.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = limitValues;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added limitValues and updated limitValues.
   * Deleted limitValues are deleted in the database cascade delete.
   */
   
  private class UpdateLimitValuesSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.ILimitValue, java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateLimitValuesSetter object.
     */
    public UpdateLimitValuesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // limitValues source: AddToManyChildCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ILimitValue> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.LimitValue.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.ILimitValue> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateLimitValue());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ILimitValue> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.LimitValue.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.ILimitValue> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteLimitValue());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ILimitValue> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.LimitValue.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.ILimitValue> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertLimitValue());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue> getDtos() {
      return limitValues;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.LimitValue.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.ILimitValue object to limitValues collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ILimitValue object
   */
  public void addLimitValuesLimitValue(org.phoenixbioinformatics.api.db.api.ILimitValue object) {
    if (limitValues == null) {
      // Association not yet created, create it.
      limitValues = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.ILimitValue>();
    }
    limitValues.add(object);
    // Add the primary key to the primary key array.
    limitValuesKeys.add(object.getPrimaryKey());
  }
   

  /**
   * Insert setter for inserting nested to-many association subscription.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertSubscription
   */
  private class InsertSubscriptionSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association subscription source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertSubscriptionSetter object.
     */
    public InsertSubscriptionSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Subscription.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = subscription;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added subscription and updated subscription.
   * Deleted subscription are deleted in the database cascade delete.
   */
   
  private class UpdateSubscriptionSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.ISubscription, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateSubscriptionSetter object.
     */
    public UpdateSubscriptionSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // subscription source: AddAssociationClassCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscription> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Subscription.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.ISubscription> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateSubscription());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscription> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Subscription.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.ISubscription> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteSubscription());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscription> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Subscription.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.ISubscription> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertSubscription());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> getDtos() {
      return subscription;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Subscription.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.ISubscription object to subscription collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ISubscription object
   */
  public void addSubscriptionSubscription(org.phoenixbioinformatics.api.db.api.ISubscription object) {
    if (subscription == null) {
      // Association not yet created, create it.
      subscription = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.ISubscription>();
    }
    subscription.add(object);
    // Add the primary key to the primary key array.
    subscriptionKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty Partner for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractPartner() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the subscribers property.
    insertSetters.add(new InsertSubscribersSetter());
    postSetters.add(new UpdateSubscribersSetter());
    
    // Add the many-to-many collection setters for the activationCodes property.
    querySetters.add(new QueryActivationCodesSetter());
    insertSetters.add(new InsertActivationCodesSetter());
    postSetters.add(new UpdateActivationCodesSetter());
    
    // Add the many-to-many collection setters for the accessRules property.
    querySetters.add(new QueryAccessRulesSetter());
    insertSetters.add(new InsertAccessRulesSetter());
    postSetters.add(new UpdateAccessRulesSetter());
    
    // Add the many-to-many collection setters for the patterns property.
    querySetters.add(new QueryPatternsSetter());
    insertSetters.add(new InsertPatternsSetter());
    postSetters.add(new UpdatePatternsSetter());
    
    // Add the many-to-many collection setters for the subscriptionTerms property.
    querySetters.add(new QuerySubscriptionTermsSetter());
    insertSetters.add(new InsertSubscriptionTermsSetter());
    postSetters.add(new UpdateSubscriptionTermsSetter());
    
    // Add the many-to-many collection setters for the subscriptionDescriptions property.
    querySetters.add(new QuerySubscriptionDescriptionsSetter());
    insertSetters.add(new InsertSubscriptionDescriptionsSetter());
    postSetters.add(new UpdateSubscriptionDescriptionsSetter());
    
    // Add the many-to-many collection setters for the ipCounts property.
    querySetters.add(new QueryIpCountsSetter());
    insertSetters.add(new InsertIpCountsSetter());
    postSetters.add(new UpdateIpCountsSetter());
    
    // Add the many-to-many collection setters for the limitValues property.
    querySetters.add(new QueryLimitValuesSetter());
    insertSetters.add(new InsertLimitValuesSetter());
    postSetters.add(new UpdateLimitValuesSetter());
    
    // Add the many-to-many collection setters for the subscription property.
    insertSetters.add(new InsertSubscriptionSetter());
    postSetters.add(new UpdateSubscriptionSetter());
  }

  /**
   * Create a Partner. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Partner
   * @param partnerId primary key attribute
   * @param name the name of the partner system
   * @param logoUri a URI that returns a logo for the partner
   * @param termOfServiceUri a URI that returns an array of subscription terms for the partner
   */
  public AbstractPartner(IPrimaryKey key, java.math.BigInteger partnerId, java.lang.String name, java.lang.String logoUri, java.lang.String termOfServiceUri) {
    this.key = key;

    this.partnerId = partnerId;

    if (partnerId == null) {
      throw new com.poesys.db.InvalidParametersException("partnerId is required for " + key.getValueList());
    }
    
    this.name = name;

    if (name == null) {
      throw new com.poesys.db.InvalidParametersException("name is required for " + key.getValueList());
    }
    
    this.logoUri = logoUri;

    this.termOfServiceUri = termOfServiceUri;

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the subscriber property.
    insertSetters.add(new InsertSubscribersSetter());
    postSetters.add(new UpdateSubscribersSetter());
    
    // Add the many-to-many collection setters for the activationCodes property.
    querySetters.add(new QueryActivationCodesSetter());
    insertSetters.add(new InsertActivationCodesSetter());
    postSetters.add(new UpdateActivationCodesSetter());
    
    // Add the many-to-many collection setters for the accessRules property.
    querySetters.add(new QueryAccessRulesSetter());
    insertSetters.add(new InsertAccessRulesSetter());
    postSetters.add(new UpdateAccessRulesSetter());
    
    // Add the many-to-many collection setters for the patterns property.
    querySetters.add(new QueryPatternsSetter());
    insertSetters.add(new InsertPatternsSetter());
    postSetters.add(new UpdatePatternsSetter());
    
    // Add the many-to-many collection setters for the subscriptionTerms property.
    querySetters.add(new QuerySubscriptionTermsSetter());
    insertSetters.add(new InsertSubscriptionTermsSetter());
    postSetters.add(new UpdateSubscriptionTermsSetter());
    
    // Add the many-to-many collection setters for the subscriptionDescriptions property.
    querySetters.add(new QuerySubscriptionDescriptionsSetter());
    insertSetters.add(new InsertSubscriptionDescriptionsSetter());
    postSetters.add(new UpdateSubscriptionDescriptionsSetter());
    
    // Add the many-to-many collection setters for the ipCounts property.
    querySetters.add(new QueryIpCountsSetter());
    insertSetters.add(new InsertIpCountsSetter());
    postSetters.add(new UpdateIpCountsSetter());
    
    // Add the many-to-many collection setters for the limitValues property.
    querySetters.add(new QueryLimitValuesSetter());
    insertSetters.add(new InsertLimitValuesSetter());
    postSetters.add(new UpdateLimitValuesSetter());
    
    // Add the many-to-many collection setters for the subscription property.
    insertSetters.add(new InsertSubscriptionSetter());
    postSetters.add(new UpdateSubscriptionSetter());
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    IPartner other = (IPartner)arg0;
    return other.getPrimaryKey().equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    IPartner other = (IPartner)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.getPrimaryKey().compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.phoenixbioinformatics.api.db.api";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (patterns != null) {
      for (com.poesys.db.dto.IDbDto dto : patterns) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (subscriptionTerms != null) {
      for (com.poesys.db.dto.IDbDto dto : subscriptionTerms) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (subscriptionDescriptions != null) {
      for (com.poesys.db.dto.IDbDto dto : subscriptionDescriptions) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (ipCounts != null) {
      for (com.poesys.db.dto.IDbDto dto : ipCounts) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (limitValues != null) {
      for (com.poesys.db.dto.IDbDto dto : limitValues) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (accessRules != null) {
      for (com.poesys.db.dto.IDbDto dto : accessRules) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (subscription != null) {
      for (com.poesys.db.dto.IDbDto dto : subscription) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.phoenixbioinformatics.api.db.api");
    String subsystem =
      "org.phoenixbioinformatics.api.db.api"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property partnerId
   *
   * <p>
   * Primary key attribute
   * </p>
   *
   * Added by AddGeneratedKeyProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger partnerId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getPartnerId() {
    return partnerId;
  }

  /**
   * Clear the partnerId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPartnerId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property name
   *
   * <p>
   * the name of the partner system
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String name;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getName() {
    return name;
  }

  /**
   * Clear the name data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the name.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the name of the partner system
   * </p>
   *
   * @param name the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input name is null
   */
  public void setName(java.lang.String name)
      throws com.poesys.db.InvalidParametersException {
    if (name == null) {
      throw new com.poesys.db.InvalidParametersException("name is required");
    }
    
    this.name = name;
    setChanged();
  }
  /**
   * Nested property logoUri
   *
   * <p>
   * a URI that returns a logo for the partner
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String logoUri;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getLogoUri() {
    return logoUri;
  }

  /**
   * Clear the logoUri data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLogoUri() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the logoUri.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * a URI that returns a logo for the partner
   * </p>
   *
   * @param logoUri the value with which to set the property
   */
  public  void setLogoUri(java.lang.String logoUri) {
    this.logoUri = logoUri;
    setChanged();
  }
  /**
   * Nested property termOfServiceUri
   *
   * <p>
   * a URI that returns an array of subscription terms for the partner
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String termOfServiceUri;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getTermOfServiceUri() {
    return termOfServiceUri;
  }

  /**
   * Clear the termOfServiceUri data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearTermOfServiceUri() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the termOfServiceUri.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * a URI that returns an array of subscription terms for the partner
   * </p>
   *
   * @param termOfServiceUri the value with which to set the property
   */
  public  void setTermOfServiceUri(java.lang.String termOfServiceUri) {
    this.termOfServiceUri = termOfServiceUri;
    setChanged();
  }
  /**
   * Nested property subscribers
   *
   * <p>
   * the member that subscribes to the system
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty> subscribers;
  // Ordered list of keys of the objects in the subscribers list
  java.util.List<com.poesys.db.pk.IPrimaryKey> subscriberKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IParty.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty>
   * @throws java.sql.SQLException when there is a database problem
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty> getSubscribers() throws java.sql.SQLException {
    return subscribers;
  }

  /**
   * Clear the subscribers data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSubscribers() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the subscribers.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: true (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the member that subscribes to the system
   * </p>
   *
   * @param subscribers the value with which to set the property
   */
  public  void setSubscriber(java.util.Collection<org.phoenixbioinformatics.api.db.api.IParty> subscribers) {
    this.subscribers = subscribers;
    // Add the primary keys of the new collection to the serialized key list.
    subscriberKeys.clear();
    if (subscribers != null) {
      for (com.poesys.db.dto.IDbDto object : subscribers) {
        subscriberKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property activationCodes
   *
   * <p>
   * the set of activation codes for the partner
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode> activationCodes;
  // Ordered list of keys of the objects in the activationCodes list
  java.util.List<com.poesys.db.pk.IPrimaryKey> activationCodesKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IActivationCode.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode>
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode> getActivationCodes() {
    return activationCodes;
  }

  /**
   * Clear the activationCodes data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearActivationCodes() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the activationCodes.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of activation codes for the partner
   * </p>
   *
   * @param activationCodes the value with which to set the property
   */
  public  void setActivationCodes(java.util.Collection<org.phoenixbioinformatics.api.db.api.IActivationCode> activationCodes) {
    this.activationCodes = activationCodes;
    // Add the primary keys of the new collection to the serialized key list.
    activationCodesKeys.clear();
    if (activationCodes != null) {
      for (com.poesys.db.dto.IDbDto object : activationCodes) {
        activationCodesKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property accessRules
   *
   * 
   *
   * Added by AddToManyAssociatedKeyCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> accessRules;
  // Ordered list of keys of the objects in the accessRules list
  java.util.List<com.poesys.db.pk.IPrimaryKey> accessRulesKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IAccessRule.
   *
   * Source: AddToManyAssociatedKeyCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule>
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> getAccessRules() {
    return accessRules;
  }

  /**
   * Clear the accessRules data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAccessRules() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the accessRules.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param accessRules the value with which to set the property
   */
  public  void setAccessRules(java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> accessRules) {
    this.accessRules = accessRules;
    // Add the primary keys of the new collection to the serialized key list.
    accessRulesKeys.clear();
    if (accessRules != null) {
      for (com.poesys.db.dto.IDbDto object : accessRules) {
        accessRulesKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property patterns
   *
   * <p>
   * the set of patterns that identify this partner
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern> patterns;
  // Ordered list of keys of the objects in the patterns list
  java.util.List<com.poesys.db.pk.IPrimaryKey> patternsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IPartnerPattern.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern>
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern> getPatterns() {
    return patterns;
  }

  /**
   * Clear the patterns data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPatterns() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the patterns.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of patterns that identify this partner
   * </p>
   *
   * @param patterns the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input patterns is null
   */
  public void setPatterns(java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartnerPattern> patterns)
      throws com.poesys.db.InvalidParametersException {
    if (patterns == null) {
      throw new com.poesys.db.InvalidParametersException("patterns is required");
    }
    
    this.patterns = patterns;
    // Add the primary keys of the new collection to the serialized key list.
    patternsKeys.clear();
    if (patterns != null) {
      for (com.poesys.db.dto.IDbDto object : patterns) {
        patternsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property subscriptionTerms
   *
   * <p>
   * the set of subscription terms for the partner
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> subscriptionTerms;
  // Ordered list of keys of the objects in the subscriptionTerms list
  java.util.List<com.poesys.db.pk.IPrimaryKey> subscriptionTermsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.ISubscriptionTerm.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm>
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> getSubscriptionTerms() {
    return subscriptionTerms;
  }

  /**
   * Clear the subscriptionTerms data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSubscriptionTerms() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the subscriptionTerms.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of subscription terms for the partner
   * </p>
   *
   * @param subscriptionTerms the value with which to set the property
   */
  public  void setSubscriptionTerms(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> subscriptionTerms) {
    this.subscriptionTerms = subscriptionTerms;
    // Add the primary keys of the new collection to the serialized key list.
    subscriptionTermsKeys.clear();
    if (subscriptionTerms != null) {
      for (com.poesys.db.dto.IDbDto object : subscriptionTerms) {
        subscriptionTermsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property subscriptionDescriptions
   *
   * <p>
   * the set of subscription descriptions within the partner
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> subscriptionDescriptions;
  // Ordered list of keys of the objects in the subscriptionDescriptions list
  java.util.List<com.poesys.db.pk.IPrimaryKey> subscriptionDescriptionsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.ISubscriptionDescription.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription>
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> getSubscriptionDescriptions() {
    return subscriptionDescriptions;
  }

  /**
   * Clear the subscriptionDescriptions data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSubscriptionDescriptions() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the subscriptionDescriptions.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of subscription descriptions within the partner
   * </p>
   *
   * @param subscriptionDescriptions the value with which to set the property
   */
  public  void setSubscriptionDescriptions(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> subscriptionDescriptions) {
    this.subscriptionDescriptions = subscriptionDescriptions;
    // Add the primary keys of the new collection to the serialized key list.
    subscriptionDescriptionsKeys.clear();
    if (subscriptionDescriptions != null) {
      for (com.poesys.db.dto.IDbDto object : subscriptionDescriptions) {
        subscriptionDescriptionsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property ipCounts
   *
   * <p>
   * the set of IP-address metering counts for a partner
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount> ipCounts;
  // Ordered list of keys of the objects in the ipCounts list
  java.util.List<com.poesys.db.pk.IPrimaryKey> ipCountsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IIpCount.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount>
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount> getIpCounts() {
    return ipCounts;
  }

  /**
   * Clear the ipCounts data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearIpCounts() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the ipCounts.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of IP-address metering counts for a partner
   * </p>
   *
   * @param ipCounts the value with which to set the property
   */
  public  void setIpCounts(java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpCount> ipCounts) {
    this.ipCounts = ipCounts;
    // Add the primary keys of the new collection to the serialized key list.
    ipCountsKeys.clear();
    if (ipCounts != null) {
      for (com.poesys.db.dto.IDbDto object : ipCounts) {
        ipCountsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property limitValues
   *
   * 
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue> limitValues;
  // Ordered list of keys of the objects in the limitValues list
  java.util.List<com.poesys.db.pk.IPrimaryKey> limitValuesKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.ILimitValue.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue>
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue> getLimitValues() {
    return limitValues;
  }

  /**
   * Clear the limitValues data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLimitValues() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the limitValues.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param limitValues the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input limitValues is null
   */
  public void setLimitValues(java.util.Collection<org.phoenixbioinformatics.api.db.api.ILimitValue> limitValues)
      throws com.poesys.db.InvalidParametersException {
    if (limitValues == null) {
      throw new com.poesys.db.InvalidParametersException("limitValues is required");
    }
    
    this.limitValues = limitValues;
    // Add the primary keys of the new collection to the serialized key list.
    limitValuesKeys.clear();
    if (limitValues != null) {
      for (com.poesys.db.dto.IDbDto object : limitValues) {
        limitValuesKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property subscription
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> subscription;
  // Ordered list of keys of the objects in the subscription list
  java.util.List<com.poesys.db.pk.IPrimaryKey> subscriptionKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.ISubscription.
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription>
   * @throws java.sql.SQLException when there is a database problem
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> getSubscription() throws java.sql.SQLException {
    return subscription;
  }

  /**
   * Clear the subscription data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSubscription() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the subscription.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: true (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * @param subscription the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input subscription is null
   */
  public void setSubscription(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> subscription)
      throws com.poesys.db.InvalidParametersException {
    if (subscription == null) {
      throw new com.poesys.db.InvalidParametersException("subscription is required");
    }
    
    this.subscription = subscription;
    // Add the primary keys of the new collection to the serialized key list.
    subscriptionKeys.clear();
    if (subscription != null) {
      for (com.poesys.db.dto.IDbDto object : subscription) {
        subscriptionKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up patterns.
    if (subject != null && subject instanceof org.phoenixbioinformatics.api.db.api.IPartnerPattern && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        patterns != null) {
      // Delete to-many patterns child from collection
      patterns.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up subscriptionTerms.
    if (subject != null && subject instanceof org.phoenixbioinformatics.api.db.api.ISubscriptionTerm && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        subscriptionTerms != null) {
      // Delete to-many subscriptionTerms child from collection
      subscriptionTerms.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up subscriptionDescriptions.
    if (subject != null && subject instanceof org.phoenixbioinformatics.api.db.api.ISubscriptionDescription && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        subscriptionDescriptions != null) {
      // Delete to-many subscriptionDescriptions child from collection
      subscriptionDescriptions.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up ipCounts.
    if (subject != null && subject instanceof org.phoenixbioinformatics.api.db.api.IIpCount && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        ipCounts != null) {
      // Delete to-many ipCounts child from collection
      ipCounts.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up limitValues.
    if (subject != null && subject instanceof org.phoenixbioinformatics.api.db.api.ILimitValue && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        limitValues != null) {
      // Delete to-many limitValues child from collection
      limitValues.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up accessRules.
    if (subject != null && subject instanceof org.phoenixbioinformatics.api.db.api.IAccessRule && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        accessRules != null) {
      // Delete to-many accessRules child from collection
      accessRules.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up subscription.
    if (subject != null && subject instanceof org.phoenixbioinformatics.api.db.api.ISubscription && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        subscription != null) {
      // Delete to-many subscription child from collection
      subscription.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to accessRules.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        accessRules != null) {
      // Mark accessRules association object cascade-deleted.
      outer: for (org.phoenixbioinformatics.api.db.api.IAccessRule value : accessRules) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }

    // Cascade delete to subscription.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        subscription != null) {
      // Mark subscription association object cascade-deleted.
      outer: for (org.phoenixbioinformatics.api.db.api.ISubscription value : subscription) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }

  /**
   * Create the inserters for the Partner and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IPartner> partnerFactory =
      manager.getFactory("org.phoenixbioinformatics.api.db.api.Partner",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<IPartner> sql =
      new org.phoenixbioinformatics.api.db.api.sql.InsertPartner();
    com.poesys.db.dao.insert.IInsert<IPartner> inserter =
      partnerFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}