/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractSubsystemFactory.vsl

package org.phoenixbioinformatics.api.db.api;


import java.sql.ResultSet;
import java.sql.SQLException;

import com.poesys.db.InvalidParametersException;
import com.poesys.db.pk.IPrimaryKey;


/**
 * <p>
 * A separate, shareable set of factory methods for all the api
 * classes, including JDBC data-setting, parameter-setting, and
 * primary-key-generation methods. This class is abstract and has a single
 * concrete subclass, ApiFactory, that you can modify to override
 * the default behavior in the abstract class or implement an as-yet 
 * unimplemented method.
 * </p>
 * <p>
 * the API relating to the software systems presented to parties as a single unit
 * for subscription
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractApiFactory {
  /**
   * Retrieve the Partner data from the result set's current row and create
   * a Partner object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a Partner instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IPartner getPartnerData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument partnerId gets the JDBC value with a function call.
    java.lang.String partnerIdValue = rs.getString("partnerId");
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // Constructor argument logoUri gets the JDBC value with a function call.
    java.lang.String logoUriValue = rs.getString("logoUri");
    // Constructor argument termOfServiceUri gets the JDBC value with a function call.
    java.lang.String termOfServiceUriValue = rs.getString("termOfServiceUri");
    // Partner has lazily loaded members or is a lazily loaded association class, so create a Proxy.
    IPartner newObject = 
      new PartnerProxy(new Partner(key, partnerIdValue, nameValue, logoUriValue, termOfServiceUriValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Partner based on a result set that must contain
   * the Partner primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>NaturalKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Partner NaturalKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getPartnerPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String partnerIdValue = rs.getString("partnerId");

    list.add(new com.poesys.db.col.StringColumnValue(prefix + "partnerId", partnerIdValue));
    key = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.Partner");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Partner based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>NaturalKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param partnerId 
   * @return a Partner NaturalKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getPartnerPrimaryKey(java.lang.String partnerId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track generated inputs for nullity.
    boolean noNulls = true;
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (partnerId != null && noNulls) {
      list.add(new com.poesys.db.col.StringColumnValue("partnerId", partnerId));
    } else {
      noNulls = false;
    }
    if (noNulls) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.Partner");
    }
    return key;
  }

  /**
   * Retrieve the SubscriptionTerm data from the result set's current row and create
   * a SubscriptionTerm object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a SubscriptionTerm instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ISubscriptionTerm getSubscriptionTermData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument partnerId gets the JDBC value with a function call.
    java.lang.String partnerIdValue = rs.getString("partnerId");
    // Constructor argument period gets the JDBC value with a function call.
    java.lang.Integer periodValue = rs.getInt("period");
    // Constructor argument price gets the JDBC value with a function call.
    java.lang.Double priceValue = rs.getDouble("price");
    // Constructor argument groupDiscountPercentage gets the JDBC value with a function call.
    java.lang.Double groupDiscountPercentageValue = rs.getDouble("groupDiscountPercentage");
    // Constructor argument description gets the JDBC value with a function call.
    java.lang.String descriptionValue = rs.getString("description");
    // SubscriptionTerm has no lazily loaded members, so there is no need for Proxy.
    ISubscriptionTerm newObject = 
      new SubscriptionTerm(key, partnerIdValue, periodValue, priceValue, groupDiscountPercentageValue, descriptionValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a SubscriptionTerm based on a result set that must contain
   * the SubscriptionTerm primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a SubscriptionTerm CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSubscriptionTermPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getPartnerPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.Integer periodValue = rs.getInt("period");
    list.add(new com.poesys.db.col.IntegerColumnValue(prefix + "period", periodValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.SubscriptionTerm");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.SubscriptionTerm");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a SubscriptionTerm based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param partnerId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param period the period of time for which a subscription allows access to a partner system
   * @return a SubscriptionTerm CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSubscriptionTermPrimaryKey(java.lang.String partnerId, java.lang.Integer period)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getPartnerPrimaryKey(partnerId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.IntegerColumnValue("period", period));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.SubscriptionTerm");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.SubscriptionTerm");
    }
    return key;
  }

  /**
   * Retrieve the PartnerPattern data from the result set's current row and create
   * a PartnerPattern object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a PartnerPattern instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IPartnerPattern getPartnerPatternData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument partnerId gets the JDBC value with a function call.
    java.lang.String partnerIdValue = rs.getString("partnerId");
    // Constructor argument sourceUri gets the JDBC value with a function call.
    java.lang.String sourceUriValue = rs.getString("sourceUri");
    // Constructor argument targetUri gets the JDBC value with a function call.
    java.lang.String targetUriValue = rs.getString("targetUri");
    // PartnerPattern has no lazily loaded members, so there is no need for Proxy.
    IPartnerPattern newObject = 
      new PartnerPattern(key, partnerIdValue, sourceUriValue, targetUriValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a PartnerPattern based on a result set that must contain
   * the PartnerPattern primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a PartnerPattern CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getPartnerPatternPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getPartnerPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String sourceUriValue = rs.getString("sourceUri");
    list.add(new com.poesys.db.col.StringColumnValue(prefix + "sourceUri", sourceUriValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.PartnerPattern");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.PartnerPattern");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a PartnerPattern based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param partnerId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param sourceUri the source URI that the user requests; this is a regular expression that
identifies a set of potential URIs in a complete match scenario; this is the
original URI that comes into the proxy server
   * @return a PartnerPattern CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getPartnerPatternPrimaryKey(java.lang.String partnerId, java.lang.String sourceUri)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getPartnerPrimaryKey(partnerId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("sourceUri", sourceUri));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.PartnerPattern");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.PartnerPattern");
    }
    return key;
  }

  /**
   * Retrieve the SubscriptionDescription data from the result set's current row and create
   * a SubscriptionDescription object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a SubscriptionDescription instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ISubscriptionDescription getSubscriptionDescriptionData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument partnerId gets the JDBC value with a function call.
    java.lang.String partnerIdValue = rs.getString("partnerId");
    // Constructor argument descriptionType gets the JDBC value with a function call.
    java.lang.String descriptionTypeValue = rs.getString("descriptionType");
    // Constructor argument header gets the JDBC value with a function call.
    java.lang.String headerValue = rs.getString("header");
    // SubscriptionDescription has no lazily loaded members, so there is no need for Proxy.
    ISubscriptionDescription newObject = 
      new SubscriptionDescription(key, partnerIdValue, descriptionTypeValue, headerValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a SubscriptionDescription based on a result set that must contain
   * the SubscriptionDescription primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a SubscriptionDescription CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSubscriptionDescriptionPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getPartnerPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String descriptionTypeValue = rs.getString("descriptionType");
    list.add(new com.poesys.db.col.StringColumnValue(prefix + "descriptionType", descriptionTypeValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.SubscriptionDescription");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.SubscriptionDescription");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a SubscriptionDescription based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param descriptionType the type of description:
Default
Individual
Institution
Commercial
   * @param partnerId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @return a SubscriptionDescription CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSubscriptionDescriptionPrimaryKey(java.lang.String descriptionType, java.lang.String partnerId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getPartnerPrimaryKey(partnerId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("descriptionType", descriptionType));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.SubscriptionDescription");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.SubscriptionDescription");
    }
    return key;
  }

  /**
   * Retrieve the SubscriptionDescriptionItem data from the result set's current row and create
   * a SubscriptionDescriptionItem object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a SubscriptionDescriptionItem instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ISubscriptionDescriptionItem getSubscriptionDescriptionItemData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument descriptionType gets the JDBC value with a function call.
    java.lang.String descriptionTypeValue = rs.getString("descriptionType");
    // Constructor argument partnerId gets the JDBC value with a function call.
    java.lang.String partnerIdValue = rs.getString("partnerId");
    // Constructor argument itemNo gets the JDBC value with a function call.
    java.math.BigInteger itemNoValue = rs.getBigDecimal("itemNo") == null ? null : rs.getBigDecimal("itemNo").toBigInteger();;
    // Constructor argument text gets the JDBC value with a function call.
    java.lang.String textValue = rs.getString("text");
    // SubscriptionDescriptionItem has no lazily loaded members, so there is no need for Proxy.
    ISubscriptionDescriptionItem newObject = 
      new SubscriptionDescriptionItem(key, descriptionTypeValue, partnerIdValue, itemNoValue, textValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a SubscriptionDescriptionItem based on a result set that must contain
   * the SubscriptionDescriptionItem primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a SubscriptionDescriptionItem CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSubscriptionDescriptionItemPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getSubscriptionDescriptionPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.math.BigInteger itemNoValue = rs.getBigDecimal("itemNo") == null ? null : rs.getBigDecimal("itemNo").toBigInteger();
    list.add(new com.poesys.db.col.BigIntegerColumnValue(prefix + "itemNo", itemNoValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.SubscriptionDescriptionItem");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.SubscriptionDescriptionItem");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a SubscriptionDescriptionItem based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param descriptionType composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param itemNo the number that identifies the description item within the description
   * @param partnerId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @return a SubscriptionDescriptionItem CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSubscriptionDescriptionItemPrimaryKey(java.lang.String descriptionType, java.math.BigInteger itemNo, java.lang.String partnerId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getSubscriptionDescriptionPrimaryKey(descriptionType, partnerId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.BigIntegerColumnValue("itemNo", itemNo));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.SubscriptionDescriptionItem");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.SubscriptionDescriptionItem");
    }
    return key;
  }

  /**
   * Retrieve the ApiKey data from the result set's current row and create
   * a ApiKey object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a ApiKey instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IApiKey getApiKeyData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument apiKeyId gets the JDBC value with a function call.
    java.math.BigInteger apiKeyIdValue = rs.getBigDecimal("apiKeyId") == null ? null : rs.getBigDecimal("apiKeyId").toBigInteger();;
    // Constructor argument apiKey gets the JDBC value with a function call.
    java.lang.String apiKeyValue = rs.getString("apiKey");
    // ApiKey has no lazily loaded members, so there is no need for Proxy.
    IApiKey newObject = 
      new ApiKey(key, apiKeyIdValue, apiKeyValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a ApiKey based on a result set that must contain
   * the ApiKey primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a ApiKey SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getApiKeyPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger apiKeyIdValue = rs.getBigDecimal("apiKeyId") == null ? null : rs.getBigDecimal("apiKeyId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "apiKeyId", apiKeyIdValue, "org.phoenixbioinformatics.api.db.api.ApiKey");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a ApiKey based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param apiKeyId primary key attribute
   * @return a ApiKey SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getApiKeyPrimaryKey(java.math.BigInteger apiKeyId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (apiKeyId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("apiKeyId", apiKeyId, "org.phoenixbioinformatics.api.db.api.ApiKey");
    }
    return key;
  }

  /**
   * Retrieve the Login data from the result set's current row and create
   * a Login object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a Login instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ILogin getLoginData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument partyId gets the JDBC value with a function call.
    java.math.BigInteger partyIdValue = rs.getBigDecimal("partyId") == null ? null : rs.getBigDecimal("partyId").toBigInteger();;
    // Constructor argument username gets the JDBC value with a function call.
    java.lang.String usernameValue = rs.getString("username");
    // Constructor argument password gets the JDBC value with a function call.
    java.lang.String passwordValue = rs.getString("password");
    // Constructor argument email gets the JDBC value with a function call.
    java.lang.String emailValue = rs.getString("email");
    // Constructor argument institution gets the JDBC value with a function call.
    java.lang.String institutionValue = rs.getString("institution");
    // Constructor argument userIdentifier gets the JDBC value with a function call.
    java.lang.String userIdentifierValue = rs.getString("userIdentifier");
    // Constructor argument partnerId gets the JDBC value with a function call.
    java.lang.String partnerIdValue = rs.getString("partnerId");
    // Login has no lazily loaded members, so there is no need for Proxy.
    ILogin newObject = 
      new Login(key, partyIdValue, usernameValue, passwordValue, emailValue, institutionValue, userIdentifierValue, partnerIdValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Login based on a result set that must contain
   * the Login primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Login CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getLoginPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getPartyPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String usernameValue = rs.getString("username");
    list.add(new com.poesys.db.col.StringColumnValue(prefix + "username", usernameValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.Login");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.Login");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Login based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param partyId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param username the unique, case-insensitive username for a party
   * @return a Login CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getLoginPrimaryKey(java.math.BigInteger partyId, java.lang.String username)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getPartyPrimaryKey(partyId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("username", username));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.Login");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.Login");
    }
    return key;
  }

  /**
   * Retrieve the AccessType data from the result set's current row and create
   * a AccessType object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a AccessType instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IAccessType getAccessTypeData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument accessTypeId gets the JDBC value with a function call.
    java.math.BigInteger accessTypeIdValue = rs.getBigDecimal("accessTypeId") == null ? null : rs.getBigDecimal("accessTypeId").toBigInteger();;
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // AccessType has lazily loaded members or is a lazily loaded association class, so create a Proxy.
    IAccessType newObject = 
      new AccessTypeProxy(new AccessType(key, accessTypeIdValue, nameValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a AccessType based on a result set that must contain
   * the AccessType primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a AccessType SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getAccessTypePrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger accessTypeIdValue = rs.getBigDecimal("accessTypeId") == null ? null : rs.getBigDecimal("accessTypeId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "accessTypeId", accessTypeIdValue, "org.phoenixbioinformatics.api.db.api.AccessType");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a AccessType based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param accessTypeId primary key attribute
   * @return a AccessType SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getAccessTypePrimaryKey(java.math.BigInteger accessTypeId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (accessTypeId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("accessTypeId", accessTypeId, "org.phoenixbioinformatics.api.db.api.AccessType");
    }
    return key;
  }

  /**
   * Retrieve the UriPattern data from the result set's current row and create
   * a UriPattern object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a UriPattern instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IUriPattern getUriPatternData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument uriPatternId gets the JDBC value with a function call.
    java.math.BigInteger uriPatternIdValue = rs.getBigDecimal("uriPatternId") == null ? null : rs.getBigDecimal("uriPatternId").toBigInteger();;
    // Constructor argument pattern gets the JDBC value with a function call.
    java.lang.String patternValue = rs.getString("pattern");
    // UriPattern has lazily loaded members or is a lazily loaded association class, so create a Proxy.
    IUriPattern newObject = 
      new UriPatternProxy(new UriPattern(key, uriPatternIdValue, patternValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a UriPattern based on a result set that must contain
   * the UriPattern primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a UriPattern SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getUriPatternPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger uriPatternIdValue = rs.getBigDecimal("uriPatternId") == null ? null : rs.getBigDecimal("uriPatternId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "uriPatternId", uriPatternIdValue, "org.phoenixbioinformatics.api.db.api.UriPattern");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a UriPattern based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param uriPatternId primary key attribute
   * @return a UriPattern SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getUriPatternPrimaryKey(java.math.BigInteger uriPatternId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (uriPatternId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("uriPatternId", uriPatternId, "org.phoenixbioinformatics.api.db.api.UriPattern");
    }
    return key;
  }

  /**
   * Retrieve the AccessRule data from the result set's current row and create
   * a AccessRule object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a AccessRule instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IAccessRule getAccessRuleData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Assign null to association key object, as this is set by QuerySetter
    org.phoenixbioinformatics.api.db.api.IAccessType accessTypesObject = null;
    // Assign null to association key object, as this is set by QuerySetter
    org.phoenixbioinformatics.api.db.api.IPartner partnerObject = null;
    // Assign null to association key object, as this is set by QuerySetter
    org.phoenixbioinformatics.api.db.api.IUriPattern uriPatternsObject = null;
    // Constructor argument accessTypeId gets the JDBC value with a function call.
    java.math.BigInteger accessTypeIdValue = rs.getBigDecimal("accessTypeId") == null ? null : rs.getBigDecimal("accessTypeId").toBigInteger();;
    // Constructor argument uriPatternId gets the JDBC value with a function call.
    java.math.BigInteger uriPatternIdValue = rs.getBigDecimal("uriPatternId") == null ? null : rs.getBigDecimal("uriPatternId").toBigInteger();;
    // Constructor argument partnerId gets the JDBC value with a function call.
    java.lang.String partnerIdValue = rs.getString("partnerId");
    org.phoenixbioinformatics.api.db.api.IPartner partnerValue = null;
    // AccessRule has lazily loaded members or is a lazily loaded association class, so create a Proxy.
    IAccessRule newObject = 
      new AccessRuleProxy(new AccessRule(key, accessTypesObject, partnerObject, uriPatternsObject, accessTypeIdValue, uriPatternIdValue, partnerIdValue, partnerValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a AccessRule based on a result set that must contain
   * the AccessRule primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a AccessRule AssociationKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getAccessRulePrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    // Associated key type SequenceKey
    // Property source: AddGeneratedKeyProperties + getAssociatedKeys
    java.math.BigInteger accessTypeIdValue = rs.getBigDecimal("accessTypeId") == null ? null : rs.getBigDecimal("accessTypeId").toBigInteger();
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "accessTypeId", accessTypeIdValue, "org.phoenixbioinformatics.api.db.api.AccessRule"));
    // Associated key type NaturalKey
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> partnerKeys =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    // Property source: AddNaturalKeyProperties + addAssociationForeignKeys: partnerId
    java.lang.String partnerIdValue = rs.getString("partnerId");
    partnerKeys.add(new com.poesys.db.col.StringColumnValue(prefix + "partnerId", partnerIdValue));
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(partnerKeys, "org.phoenixbioinformatics.api.db.api.AccessRule"));
    // Associated key type SequenceKey
    // Property source: AddGeneratedKeyProperties + getAssociatedKeys
    java.math.BigInteger uriPatternIdValue = rs.getBigDecimal("uriPatternId") == null ? null : rs.getBigDecimal("uriPatternId").toBigInteger();
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "uriPatternId", uriPatternIdValue, "org.phoenixbioinformatics.api.db.api.AccessRule"));
	key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "org.phoenixbioinformatics.api.db.api.AccessRule");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a AccessRule based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param accessTypeId Attribute that is part of the association key
   * @param partnerId foreign key used as primary key in association class
   * @param uriPatternId Attribute that is part of the association key
   * @return a AccessRule AssociationKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getAccessRulePrimaryKey(java.math.BigInteger accessTypeId, java.lang.String partnerId, java.math.BigInteger uriPatternId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track whether any input keys are null.
    boolean noNulls = true;
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    // Associated key: accessTypes with type SequenceKey
    if (accessTypeId != null) {
      list.add(com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("accessTypeId", accessTypeId, "org.phoenixbioinformatics.api.db.api.AccessRule"));
    } else {
      noNulls = false;
    }
    // Associated key: partner with type NaturalKey
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> partnerKeys =
      new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (partnerId != null && noNulls) {
      partnerKeys.add(new com.poesys.db.col.StringColumnValue("partnerId", partnerId));
    } else {
      noNulls = false;
    }
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(partnerKeys, "org.phoenixbioinformatics.api.db.api.AccessRule"));
    // Associated key: uriPatterns with type SequenceKey
    if (uriPatternId != null) {
      list.add(com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("uriPatternId", uriPatternId, "org.phoenixbioinformatics.api.db.api.AccessRule"));
    } else {
      noNulls = false;
    }
    if (noNulls) {
	  key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "org.phoenixbioinformatics.api.db.api.AccessRule");
	}
    return key;
  }

  /**
   * Retrieve the PageView data from the result set's current row and create
   * a PageView object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a PageView instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IPageView getPageViewData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument pageViewId gets the JDBC value with a function call.
    java.math.BigInteger pageViewIdValue = rs.getBigDecimal("pageViewId") == null ? null : rs.getBigDecimal("pageViewId").toBigInteger();;
    // Constructor argument pageViewDate gets the JDBC value with a function call.
    java.sql.Timestamp pageViewDateValue = rs.getTimestamp("pageViewDate");
    // Constructor argument uri gets the JDBC value with a function call.
    java.lang.String uriValue = rs.getString("uri");
    // Constructor argument ip gets the JDBC value with a function call.
    java.lang.String ipValue = rs.getString("ip");
    // Constructor argument sessionId gets the JDBC value with a function call.
    java.lang.String sessionIdValue = rs.getString("sessionId");
    // Constructor argument partyId gets the JDBC value with a function call.
    java.math.BigInteger partyIdValue = rs.getBigDecimal("partyId") == null ? null : rs.getBigDecimal("partyId").toBigInteger();;
    // PageView has no lazily loaded members, so there is no need for Proxy.
    IPageView newObject = 
      new PageView(key, pageViewIdValue, pageViewDateValue, uriValue, ipValue, sessionIdValue, partyIdValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a PageView based on a result set that must contain
   * the PageView primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a PageView SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getPageViewPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger pageViewIdValue = rs.getBigDecimal("pageViewId") == null ? null : rs.getBigDecimal("pageViewId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "pageViewId", pageViewIdValue, "org.phoenixbioinformatics.api.db.api.PageView");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a PageView based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param pageViewId primary key attribute
   * @return a PageView SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getPageViewPrimaryKey(java.math.BigInteger pageViewId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (pageViewId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("pageViewId", pageViewId, "org.phoenixbioinformatics.api.db.api.PageView");
    }
    return key;
  }

  /**
   * Retrieve the IpCount data from the result set's current row and create
   * a IpCount object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a IpCount instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IIpCount getIpCountData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument partnerId gets the JDBC value with a function call.
    java.lang.String partnerIdValue = rs.getString("partnerId");
    // Constructor argument ip gets the JDBC value with a function call.
    java.lang.String ipValue = rs.getString("ip");
    // Constructor argument count gets the JDBC value with a function call.
    java.lang.Integer countValue = rs.getInt("count");
    // IpCount has no lazily loaded members, so there is no need for Proxy.
    IIpCount newObject = 
      new IpCount(key, partnerIdValue, ipValue, countValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a IpCount based on a result set that must contain
   * the IpCount primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a IpCount CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getIpCountPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getPartnerPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String ipValue = rs.getString("ip");
    list.add(new com.poesys.db.col.StringColumnValue(prefix + "ip", ipValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.IpCount");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.IpCount");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a IpCount based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param ip the IP address being tracked (IPv4 or IPv6)
   * @param partnerId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @return a IpCount CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getIpCountPrimaryKey(java.lang.String ip, java.lang.String partnerId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getPartnerPrimaryKey(partnerId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("ip", ip));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.IpCount");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.IpCount");
    }
    return key;
  }

  /**
   * Retrieve the LimitValue data from the result set's current row and create
   * a LimitValue object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a LimitValue instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ILimitValue getLimitValueData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument partnerId gets the JDBC value with a function call.
    java.lang.String partnerIdValue = rs.getString("partnerId");
    // Constructor argument value gets the JDBC value with a function call.
    java.lang.Integer valueValue = rs.getInt("value");
    // LimitValue has no lazily loaded members, so there is no need for Proxy.
    ILimitValue newObject = 
      new LimitValue(key, partnerIdValue, valueValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a LimitValue based on a result set that must contain
   * the LimitValue primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a LimitValue CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getLimitValuePrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getPartnerPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.Integer valueValue = rs.getInt("value");
    list.add(new com.poesys.db.col.IntegerColumnValue(prefix + "value", valueValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.LimitValue");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.LimitValue");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a LimitValue based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param partnerId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param value the count at which the limit applies
   * @return a LimitValue CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getLimitValuePrimaryKey(java.lang.String partnerId, java.lang.Integer value)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getPartnerPrimaryKey(partnerId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.IntegerColumnValue("value", value));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.LimitValue");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.LimitValue");
    }
    return key;
  }

  /**
   * Retrieve the Party data from the result set's current row and create
   * a Party object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a Party instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IParty getPartyData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument partyId gets the JDBC value with a function call.
    java.math.BigInteger partyIdValue = rs.getBigDecimal("partyId") == null ? null : rs.getBigDecimal("partyId").toBigInteger();;
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // Constructor argument partyType gets the JDBC value with a function call.
    java.lang.String partyTypeValue = rs.getString("partyType");
    // Constructor argument display gets the JDBC value with a function call.
    java.lang.Boolean displayValue = rs.getBoolean("display");
    // Constructor argument countryId gets the JDBC value with a function call.
    java.math.BigInteger countryIdValue = rs.getBigDecimal("countryId") == null ? null : rs.getBigDecimal("countryId").toBigInteger();;
    // Party has lazily loaded members or is a lazily loaded association class, so create a Proxy.
    IParty newObject = 
      new PartyProxy(new Party(key, partyIdValue, nameValue, partyTypeValue, displayValue, countryIdValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Party based on a result set that must contain
   * the Party primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Party SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getPartyPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger partyIdValue = rs.getBigDecimal("partyId") == null ? null : rs.getBigDecimal("partyId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "partyId", partyIdValue, "org.phoenixbioinformatics.api.db.api.Party");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Party based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param partyId primary key attribute
   * @return a Party SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getPartyPrimaryKey(java.math.BigInteger partyId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (partyId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("partyId", partyId, "org.phoenixbioinformatics.api.db.api.Party");
    }
    return key;
  }

  /**
   * Retrieve the Country data from the result set's current row and create
   * a Country object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a Country instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ICountry getCountryData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument countryId gets the JDBC value with a function call.
    java.math.BigInteger countryIdValue = rs.getBigDecimal("countryId") == null ? null : rs.getBigDecimal("countryId").toBigInteger();;
    // Constructor argument name gets the JDBC value with a function call.
    java.lang.String nameValue = rs.getString("name");
    // Country has no lazily loaded members, so there is no need for Proxy.
    ICountry newObject = 
      new Country(key, countryIdValue, nameValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Country based on a result set that must contain
   * the Country primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Country SequenceKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCountryPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.math.BigInteger countryIdValue = rs.getBigDecimal("countryId") == null ? null : rs.getBigDecimal("countryId").toBigInteger();;
    key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "countryId", countryIdValue, "org.phoenixbioinformatics.api.db.api.Country");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Country based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>Persistent</li>
   *     <li>SequenceKey</li>
   * </ul>
   * 
   * @param countryId primary key attribute
   * @return a Country SequenceKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getCountryPrimaryKey(java.math.BigInteger countryId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (countryId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("countryId", countryId, "org.phoenixbioinformatics.api.db.api.Country");
    }
    return key;
  }

  /**
   * Retrieve the IpRange data from the result set's current row and create
   * a IpRange object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a IpRange instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IIpRange getIpRangeData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument partyId gets the JDBC value with a function call.
    java.math.BigInteger partyIdValue = rs.getBigDecimal("partyId") == null ? null : rs.getBigDecimal("partyId").toBigInteger();;
    // Constructor argument start gets the JDBC value with a function call.
    java.lang.String startValue = rs.getString("startIp");
    // Constructor argument end gets the JDBC value with a function call.
    java.lang.String endValue = rs.getString("endIp");
    // IpRange has no lazily loaded members, so there is no need for Proxy.
    IIpRange newObject = 
      new IpRange(key, partyIdValue, startValue, endValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a IpRange based on a result set that must contain
   * the IpRange primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a IpRange CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getIpRangePrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getPartyPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.lang.String startValue = rs.getString("startIp");
    list.add(new com.poesys.db.col.StringColumnValue(prefix + "startIp", startValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.IpRange");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.IpRange");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a IpRange based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param partyId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param start the IP address that is the first address in the range; must not be part of any
other range for the subscription
   * @return a IpRange CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getIpRangePrimaryKey(java.math.BigInteger partyId, java.lang.String start)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getPartyPrimaryKey(partyId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.StringColumnValue("startIp", start));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.IpRange");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.IpRange");
    }
    return key;
  }

  /**
   * Retrieve the ActivationCode data from the result set's current row and create
   * a ActivationCode object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a ActivationCode instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static IActivationCode getActivationCodeData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument activationCodeId gets the JDBC value with a function call.
    java.util.UUID activationCodeIdValue = java.util.UUID.fromString(rs.getString("activationCodeId"));
    // Constructor argument period gets the JDBC value with a function call.
    java.lang.Integer periodValue = rs.getInt("period");
    // Constructor argument purchaseDate gets the JDBC value with a function call.
    java.sql.Timestamp purchaseDateValue = rs.getTimestamp("purchaseDate");
    // Constructor argument partnerId gets the JDBC value with a function call.
    java.lang.String partnerIdValue = rs.getString("partnerId");
    // ActivationCode has no lazily loaded members, so there is no need for Proxy.
    IActivationCode newObject = 
      new ActivationCode(key, activationCodeIdValue, periodValue, purchaseDateValue, partnerIdValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a ActivationCode based on a result set that must contain
   * the ActivationCode primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>GuidKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a ActivationCode GuidKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getActivationCodePrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.UUID activationCodeIdValue = java.util.UUID.fromString(rs.getString("activationCodeId"));
    key = com.poesys.db.pk.PrimaryKeyFactory.createGuidKey(prefix + "activationCodeId", activationCodeIdValue, "org.phoenixbioinformatics.api.db.api.ActivationCode");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a ActivationCode based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>GuidKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param activationCodeId primary key attribute
   * @return a ActivationCode GuidKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getActivationCodePrimaryKey(java.util.UUID activationCodeId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Only create a key if the input value is present.
    if (activationCodeId != null) {
      key = com.poesys.db.pk.PrimaryKeyFactory.createGuidKey("activationCodeId", activationCodeId, "org.phoenixbioinformatics.api.db.api.ActivationCode");
    }
    return key;
  }

  /**
   * Retrieve the SubscriptionTransaction data from the result set's current row and create
   * a SubscriptionTransaction object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a SubscriptionTransaction instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ISubscriptionTransaction getSubscriptionTransactionData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Constructor argument partnerId gets the JDBC value with a function call.
    java.lang.String partnerIdValue = rs.getString("partnerId");
    // Constructor argument partyId gets the JDBC value with a function call.
    java.math.BigInteger partyIdValue = rs.getBigDecimal("partyId") == null ? null : rs.getBigDecimal("partyId").toBigInteger();;
    // Constructor argument transactionNo gets the JDBC value with a function call.
    java.math.BigInteger transactionNoValue = rs.getBigDecimal("transactionNo") == null ? null : rs.getBigDecimal("transactionNo").toBigInteger();;
    // Constructor argument transactionDate gets the JDBC value with a function call.
    java.sql.Timestamp transactionDateValue = rs.getTimestamp("transactionDate");
    // Constructor argument startDate gets the JDBC value with a function call.
    java.sql.Timestamp startDateValue = rs.getTimestamp("startDate");
    // Constructor argument endDate gets the JDBC value with a function call.
    java.sql.Timestamp endDateValue = rs.getTimestamp("endDate");
    // Constructor argument transactionType gets the JDBC value with a function call.
    java.lang.String transactionTypeValue = rs.getString("transactionType");
    // Constructor argument activationCodeId gets the JDBC value with a function call.
    java.util.UUID activationCodeIdValue = java.util.UUID.fromString(rs.getString("activationCodeId"));
    // SubscriptionTransaction has no lazily loaded members, so there is no need for Proxy.
    ISubscriptionTransaction newObject = 
      new SubscriptionTransaction(key, partnerIdValue, partyIdValue, transactionNoValue, transactionDateValue, startDateValue, endDateValue, transactionTypeValue, activationCodeIdValue);
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a SubscriptionTransaction based on a result set that must contain
   * the SubscriptionTransaction primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a SubscriptionTransaction CompositeKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSubscriptionTransactionPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    IPrimaryKey parentKey = getSubscriptionPrimaryKey(rs, "");
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    java.math.BigInteger transactionNoValue = rs.getBigDecimal("transactionNo") == null ? null : rs.getBigDecimal("transactionNo").toBigInteger();
    list.add(new com.poesys.db.col.BigIntegerColumnValue(prefix + "transactionNo", transactionNoValue));
	IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.SubscriptionTransaction");
    key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.SubscriptionTransaction");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a SubscriptionTransaction based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>CompositeKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param partnerId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param partyId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param transactionNo the identifying transaction number within the subscription that uniquely
identifies the transaction along with the subscription key
   * @return a SubscriptionTransaction CompositeKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSubscriptionTransactionPrimaryKey(java.lang.String partnerId, java.math.BigInteger partyId, java.math.BigInteger transactionNo)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    IPrimaryKey parentKey = getSubscriptionPrimaryKey(partnerId, partyId);

    // Check the parent key; if it is null, the return key should be null.
    if (parentKey != null) {
      java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> list =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
      list.add(new com.poesys.db.col.BigIntegerColumnValue("transactionNo", transactionNo));
	  IPrimaryKey subKey = com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(list, "org.phoenixbioinformatics.api.db.api.SubscriptionTransaction");
      key = com.poesys.db.pk.PrimaryKeyFactory.createCompositeKey(parentKey, subKey, "org.phoenixbioinformatics.api.db.api.SubscriptionTransaction");
    }
    return key;
  }

  /**
   * Retrieve the Subscription data from the result set's current row and create
   * a Subscription object.
   * 
   * @param key the primary key for the Api
   * @param rs the query result set
   * @return a Subscription instance based on the result set data
   * @throws SQLException when there is a problem getting data from the results
   * @throws InvalidParametersException when a required value is null
   */
  public static ISubscription getSubscriptionData(IPrimaryKey key, ResultSet rs)
      throws SQLException, InvalidParametersException {
    // Assign null to association key object, as this is set by QuerySetter
    org.phoenixbioinformatics.api.db.api.IPartner subscribedPartnersObject = null;
    // Assign null to association key object, as this is set by QuerySetter
    org.phoenixbioinformatics.api.db.api.IParty subscribersObject = null;
    // Constructor argument partnerId gets the JDBC value with a function call.
    java.lang.String partnerIdValue = rs.getString("partnerId");
    // Constructor argument partyId gets the JDBC value with a function call.
    java.math.BigInteger partyIdValue = rs.getBigDecimal("partyId") == null ? null : rs.getBigDecimal("partyId").toBigInteger();;
    // Constructor argument startDate gets the JDBC value with a function call.
    java.sql.Timestamp startDateValue = rs.getTimestamp("startDate");
    // Constructor argument endDate gets the JDBC value with a function call.
    java.sql.Timestamp endDateValue = rs.getTimestamp("endDate");
    // Constructor argument subscriptionId gets the JDBC value with a function call.
    java.math.BigInteger subscriptionIdValue = rs.getBigDecimal("subscriptionId") == null ? null : rs.getBigDecimal("subscriptionId").toBigInteger();;
    // Subscription has lazily loaded members or is a lazily loaded association class, so create a Proxy.
    ISubscription newObject = 
      new SubscriptionProxy(new Subscription(key, subscribedPartnersObject, subscribersObject, partnerIdValue, partyIdValue, startDateValue, endDateValue, subscriptionIdValue));
    return newObject;
  }
  
  /**
   * <p>
   * Get a primary key for a Subscription based on a result set that must contain
   * the Subscription primary key columns. The method creates a primary key of
   * a type specified by the primary key stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param rs a JDBC result set with primary key columns
   * @param prefix an optional prefix string for derived column names in 
   *               associations
   * @return a Subscription AssociationKey primary key
   * @throws SQLException when there is a problem getting data from the result
   *             set
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSubscriptionPrimaryKey(ResultSet rs, String prefix)
      throws SQLException, InvalidParametersException {
    IPrimaryKey key = null;
    if (prefix == null) {
      prefix = "";
    }
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    // Associated key type NaturalKey
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> subscribedPartnersKeys =
        new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    // Property source: AddNaturalKeyProperties + getAssociatedKeys
    java.lang.String partnerIdValue = rs.getString("partnerId");
    subscribedPartnersKeys.add(new com.poesys.db.col.StringColumnValue(prefix + "partnerId", partnerIdValue));
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(subscribedPartnersKeys, "org.phoenixbioinformatics.api.db.api.Subscription"));
    // Associated key type SequenceKey
    // Property source: AddGeneratedKeyProperties + getAssociatedKeys
    java.math.BigInteger partyIdValue = rs.getBigDecimal("partyId") == null ? null : rs.getBigDecimal("partyId").toBigInteger();
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey(prefix + "partyId", partyIdValue, "org.phoenixbioinformatics.api.db.api.Subscription"));
	key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "org.phoenixbioinformatics.api.db.api.Subscription");
    return key;
  }

  /**
   * <p>
   * Get a primary key for a Subscription based on input key attributes. 
   * The method creates a primary key of a type specified by the primary key 
   * stereotype on the persistent class.
   * </p>
   * <p>
   * Stereotypes:
   * </p>
   * <ul>
   *     <li>AssociationKey</li>
   *     <li>Persistent</li>
   * </ul>
   * 
   * @param partnerId Attribute that is part of the association key
   * @param partyId Attribute that is part of the association key
   * @return a Subscription AssociationKey primary key
   * @throws InvalidParametersException when there is a problem creating a key
   */
  public static IPrimaryKey getSubscriptionPrimaryKey(java.lang.String partnerId, java.math.BigInteger partyId)
      throws InvalidParametersException {
    IPrimaryKey key = null;
    // Track whether any input keys are null.
    boolean noNulls = true;
    java.util.ArrayList<IPrimaryKey> list =
        new java.util.ArrayList<IPrimaryKey>();
    // Associated key: subscribedPartners with type NaturalKey
    java.util.ArrayList<com.poesys.db.col.AbstractColumnValue> subscribedPartnersKeys =
      new java.util.ArrayList<com.poesys.db.col.AbstractColumnValue>();
    if (partnerId != null && noNulls) {
      subscribedPartnersKeys.add(new com.poesys.db.col.StringColumnValue("partnerId", partnerId));
    } else {
      noNulls = false;
    }
    list.add(com.poesys.db.pk.PrimaryKeyFactory.createNaturalKey(subscribedPartnersKeys, "org.phoenixbioinformatics.api.db.api.Subscription"));
    // Associated key: subscribers with type SequenceKey
    if (partyId != null) {
      list.add(com.poesys.db.pk.PrimaryKeyFactory.createSequenceKey("partyId", partyId, "org.phoenixbioinformatics.api.db.api.Subscription"));
    } else {
      noNulls = false;
    }
    if (noNulls) {
	  key = com.poesys.db.pk.PrimaryKeyFactory.createAssociationKey(list, "org.phoenixbioinformatics.api.db.api.Subscription");
	}
    return key;
  }

}