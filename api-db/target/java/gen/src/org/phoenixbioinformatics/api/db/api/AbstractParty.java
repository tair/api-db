/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.phoenixbioinformatics.api.db.api;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the Party. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An abstract entity that is either a person or an organization
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractParty extends AbstractDto implements IParty {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the country association data
   *
   * Source: AddToOneAssociationOptionalObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryCountrySetter extends com.poesys.db.dto.AbstractObjectSetter<org.phoenixbioinformatics.api.db.api.ICountry> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryCountrySetter object.
     */
    public QueryCountrySetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Country.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return countryKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.ICountry> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryCountry();
    }

    @Override
    protected void set(org.phoenixbioinformatics.api.db.api.ICountry dto) {
      // No status change, this is just filling in the object data.
      country = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated country is not null
      return country != null;
    }
  }

  /**
   * Insert setter for inserting nested object property country.
   */
  private class InsertCountrySetter 
      extends com.poesys.db.dto.AbstractInsertSetter {
    // Property country source: AddToOneAssociationOptionalObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create an InsertCountrySetter object.
     */
    public InsertCountrySetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Country.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      array.add(country);
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      // Key type: SequenceKey
      return true;
    }
  }

  /**
   * Setter for processing added country, updated country, and 
   * deleted country. 
   */
   
  private class UpdateCountrySetter 
      extends com.poesys.db.dto.AbstractProcessNestedObject<org.phoenixbioinformatics.api.db.api.ICountry> {
    private static final long serialVersionUID = 1L;

    /**
     * Create an UpdateCountrySetter object.
     */
    public UpdateCountrySetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, org.phoenixbioinformatics.api.db.api.ICountry dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // country source: AddToOneAssociationOptionalObjectProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ICountry> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Country.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdate<org.phoenixbioinformatics.api.db.api.ICountry> updater = 
        factory.getUpdate(new org.phoenixbioinformatics.api.db.api.sql.UpdateCountry());

      // Update the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dto);
      // Complete the update by setting the DTO to EXISTING status.
      dto.setExisting();
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, org.phoenixbioinformatics.api.db.api.ICountry dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ICountry> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Country.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDelete<org.phoenixbioinformatics.api.db.api.ICountry> dao = 
        factory.getDelete(new org.phoenixbioinformatics.api.db.api.sql.DeleteCountry());
      dao.delete(connection, dto);
    }

    @Override
    protected void doNew(java.sql.Connection connection, org.phoenixbioinformatics.api.db.api.ICountry dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ICountry> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Country.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsert<org.phoenixbioinformatics.api.db.api.ICountry> inserter =
        factory.getInsert(new org.phoenixbioinformatics.api.db.api.sql.InsertCountry(), createKey());


      // Insert the superclass objects from the root down. Suppress nested
      // inserts for the superclasses, wait until the concrete class. Also set 
      // pre-insert suppression off to have the root insert linked, to-one class
      // objects.
      dto.setSuppressNestedInserts(true);
      dto.setSuppressNestedPreInserts(false);

      // Suppress inserts in concrete class.
      dto.setSuppressNestedPreInserts(true);
      
      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      dto.setSuppressNestedInserts(false);
      inserter.setLeaf(true);
      inserter.insert(connection, dto);
    }

    @Override
    protected org.phoenixbioinformatics.api.db.api.ICountry getDto() {
      return country;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Country.class.getName();
    }

    @Override
    protected boolean createKey() {
      // Key type: SequenceKey
      return true;
    }
  }

  /**
   * Foreign key object used by QueryCountrySetter nested class to query object
   */
  private IPrimaryKey countryKey;
  
  /**
   * Set the foreign key countryKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param countryKey the foreign key
   */
  void setCountryKey(IPrimaryKey countryKey) {
    this.countryKey = countryKey;
  }

  // Setter strategy nested classes for multiple-object associations


  /**
   * Insert setter for inserting nested to-many association partner.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertPartner
   */
  private class InsertSubscribedPartnersSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association subscribedPartners source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertSubscribedPartnersSetter object.
     */
    public InsertSubscribedPartnersSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Partner.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = subscribedPartners;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added partner, updated partner, and 
   * deleted partner. 
   */
   
  private class UpdateSubscribedPartnersSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.IPartner, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateSubscribedPartnersSetter object.
     */
    public UpdateSubscribedPartnersSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // subscribedPartners source: TransformToProperty + AddToManyAssociationCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IPartner> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Partner.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.IPartner> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdatePartner());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IPartner> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Partner.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.IPartner> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeletePartner());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IPartner> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Partner.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.IPartner> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertPartner());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner> getDtos() {
      return subscribedPartners;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Partner.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.IPartner object to subscribedPartners collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IPartner object
   */
  public void addSubscribedPartnersPartner(org.phoenixbioinformatics.api.db.api.IPartner object) {
    if (subscribedPartners == null) {
      // Association not yet created, create it.
      subscribedPartners = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.IPartner>();
    }
    subscribedPartners.add(object);
    // Add the primary key to the primary key array.
    partnerKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested sessions
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QuerySessionsByParty
   */
  private class QuerySessionsSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.phoenixbioinformatics.api.db.api.IPageView, IParty, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QuerySessionsSetter object.
     */
    public QuerySessionsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.PageView.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IParty getParametersDto() {
      return AbstractParty.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.IPageView, IParty> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySessionsByParty();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView> list) {
      // No status change; this is just filling in the object data.
      sessions = list;
      // Add the primary keys to the serialized key list if there are any.
      if (sessions != null) {
        for (com.poesys.db.dto.IDbDto object : sessions) {
          sessionsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated sessions list is not null
      return sessions != null;
    }
  }

  /**
   * Insert setter for inserting nested to-many association sessions.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertPageView
   */
  private class InsertSessionsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association sessions source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertSessionsSetter object.
     */
    public InsertSessionsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.PageView.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = sessions;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added sessions, updated sessions, and 
   * deleted sessions. 
   */
   
  private class UpdateSessionsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.IPageView, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateSessionsSetter object.
     */
    public UpdateSessionsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // sessions source: TransformToProperty + AddToManyAssociationCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IPageView> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.PageView.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.IPageView> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdatePageView());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IPageView> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.PageView.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.IPageView> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeletePageView());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IPageView> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.PageView.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.IPageView> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertPageView());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView> getDtos() {
      return sessions;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.PageView.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.IPageView object to sessions collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IPageView object
   */
  public void addSessionsPageView(org.phoenixbioinformatics.api.db.api.IPageView object) {
    if (sessions == null) {
      // Association not yet created, create it.
      sessions = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.IPageView>();
    }
    sessions.add(object);
    // Add the primary key to the primary key array.
    sessionsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested ipRanges
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryIpRangesByParty
   */
  private class QueryIpRangesSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.phoenixbioinformatics.api.db.api.IIpRange, IParty, java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryIpRangesSetter object.
     */
    public QueryIpRangesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.IpRange.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IParty getParametersDto() {
      return AbstractParty.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.IIpRange, IParty> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryIpRangesByParty();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange> list) {
      // No status change; this is just filling in the object data.
      ipRanges = list;
      // Add the primary keys to the serialized key list if there are any.
      if (ipRanges != null) {
        for (com.poesys.db.dto.IDbDto object : ipRanges) {
          ipRangesKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated ipRanges list is not null
      return ipRanges != null;
    }
  }

  /**
   * Insert setter for inserting nested to-many association ipRanges.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertIpRange
   */
  private class InsertIpRangesSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association ipRanges source: AddToManyChildCollectionProperties

    /**
     * Create an InsertIpRangesSetter object.
     */
    public InsertIpRangesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.IpRange.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = ipRanges;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added ipRanges and updated ipRanges.
   * Deleted ipRanges are deleted in the database cascade delete.
   */
   
  private class UpdateIpRangesSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.IIpRange, java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateIpRangesSetter object.
     */
    public UpdateIpRangesSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // ipRanges source: AddToManyChildCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IIpRange> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.IpRange.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.IIpRange> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateIpRange());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IIpRange> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.IpRange.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.IIpRange> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteIpRange());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IIpRange> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.IpRange.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.IIpRange> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertIpRange());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange> getDtos() {
      return ipRanges;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.IpRange.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.IIpRange object to ipRanges collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IIpRange object
   */
  public void addIpRangesIpRange(org.phoenixbioinformatics.api.db.api.IIpRange object) {
    if (ipRanges == null) {
      // Association not yet created, create it.
      ipRanges = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.IIpRange>();
    }
    ipRanges.add(object);
    // Add the primary key to the primary key array.
    ipRangesKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Query setter for querying nested login
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryLoginByParty
   */
  private class QueryLoginSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.phoenixbioinformatics.api.db.api.ILogin, IParty, java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryLoginSetter object.
     */
    public QueryLoginSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Login.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected IParty getParametersDto() {
      return AbstractParty.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.ILogin, IParty> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryLoginByParty();
    }

    @Override
    protected void set(java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin> list) {
      // No status change; this is just filling in the object data.
      login = list;
      // Add the primary keys to the serialized key list if there are any.
      if (login != null) {
        for (com.poesys.db.dto.IDbDto object : login) {
          loginKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated login list is not null
      return login != null;
    }
  }

  /**
   * Insert setter for inserting nested to-many association login.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertLogin
   */
  private class InsertLoginSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association login source: AddToManyChildCollectionProperties

    /**
     * Create an InsertLoginSetter object.
     */
    public InsertLoginSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Login.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = login;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added login and updated login.
   * Deleted login are deleted in the database cascade delete.
   */
   
  private class UpdateLoginSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.ILogin, java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateLoginSetter object.
     */
    public UpdateLoginSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // login source: AddToManyChildCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ILogin> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Login.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.ILogin> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateLogin());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ILogin> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Login.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.ILogin> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteLogin());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ILogin> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Login.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.ILogin> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertLogin());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin> getDtos() {
      return login;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Login.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.ILogin object to login collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ILogin object
   */
  public void addLoginLogin(org.phoenixbioinformatics.api.db.api.ILogin object) {
    if (login == null) {
      // Association not yet created, create it.
      login = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.ILogin>();
    }
    login.add(object);
    // Add the primary key to the primary key array.
    loginKeys.add(object.getPrimaryKey());
  }
   

  /**
   * Insert setter for inserting nested to-many association subscription.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertSubscription
   */
  private class InsertSubscriptionSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association subscription source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertSubscriptionSetter object.
     */
    public InsertSubscriptionSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Subscription.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = subscription;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added subscription and updated subscription.
   * Deleted subscription are deleted in the database cascade delete.
   */
   
  private class UpdateSubscriptionSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.ISubscription, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateSubscriptionSetter object.
     */
    public UpdateSubscriptionSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // subscription source: AddAssociationClassCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscription> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Subscription.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.ISubscription> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateSubscription());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscription> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Subscription.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.ISubscription> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteSubscription());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscription> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Subscription.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.ISubscription> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertSubscription());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> getDtos() {
      return subscription;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Subscription.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.ISubscription object to subscription collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ISubscription object
   */
  public void addSubscriptionSubscription(org.phoenixbioinformatics.api.db.api.ISubscription object) {
    if (subscription == null) {
      // Association not yet created, create it.
      subscription = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.ISubscription>();
    }
    subscription.add(object);
    // Add the primary key to the primary key array.
    subscriptionKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty Party for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractParty() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the country property.
    querySetters.add(new QueryCountrySetter());
    preSetters.add(new InsertCountrySetter());
    postSetters.add(new UpdateCountrySetter());
    
    // Add the many-to-many collection setters for the subscribedPartners property.
    insertSetters.add(new InsertSubscribedPartnersSetter());
    postSetters.add(new UpdateSubscribedPartnersSetter());
    
    // Add the many-to-many collection setters for the sessions property.
    querySetters.add(new QuerySessionsSetter());
    insertSetters.add(new InsertSessionsSetter());
    postSetters.add(new UpdateSessionsSetter());
    
    // Add the many-to-many collection setters for the ipRanges property.
    querySetters.add(new QueryIpRangesSetter());
    insertSetters.add(new InsertIpRangesSetter());
    postSetters.add(new UpdateIpRangesSetter());
    
    // Add the many-to-many collection setters for the login property.
    querySetters.add(new QueryLoginSetter());
    insertSetters.add(new InsertLoginSetter());
    postSetters.add(new UpdateLoginSetter());
    
    // Add the many-to-many collection setters for the subscription property.
    insertSetters.add(new InsertSubscriptionSetter());
    postSetters.add(new UpdateSubscriptionSetter());
  }

  /**
   * Create a Party. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Party
   * @param partyId primary key attribute
   * @param name the name by which the party is known
   * @param partyType the kind of Party this is:
User
   * @param display 
   * @param countryId foreign key used by setter to query associated object
   */
  public AbstractParty(IPrimaryKey key, java.math.BigInteger partyId, java.lang.String name, java.lang.String partyType, java.lang.Boolean display, java.math.BigInteger countryId) {
    this.key = key;

    this.partyId = partyId;

    if (partyId == null) {
      throw new com.poesys.db.InvalidParametersException("partyId is required for " + key.getValueList());
    }
    
    this.name = name;

    if (name == null) {
      throw new com.poesys.db.InvalidParametersException("name is required for " + key.getValueList());
    }
    
    this.partyType = partyType;

    if (partyType == null) {
      throw new com.poesys.db.InvalidParametersException("partyType is required for " + key.getValueList());
    }
    
    this.display = display;

    if (display == null) {
      throw new com.poesys.db.InvalidParametersException("display is required for " + key.getValueList());
    }
    
    this.countryId = countryId;

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the country property.
    querySetters.add(new QueryCountrySetter());
    // Set the object property primary key with a factory method.
    // TODO: fix problem with foreign keys/associated keys VND-168
    // countryKey = org.phoenixbioinformatics.api.db.api.ApiFactory.getCountryPrimaryKey();
    insertSetters.add(new InsertCountrySetter());
    preSetters.add(new InsertCountrySetter());
    postSetters.add(new UpdateCountrySetter());
    
    
    // Add the many-to-many collection setters for the partner property.
    insertSetters.add(new InsertSubscribedPartnersSetter());
    postSetters.add(new UpdateSubscribedPartnersSetter());
    
    // Add the many-to-many collection setters for the sessions property.
    querySetters.add(new QuerySessionsSetter());
    insertSetters.add(new InsertSessionsSetter());
    postSetters.add(new UpdateSessionsSetter());
    
    // Add the many-to-many collection setters for the ipRanges property.
    querySetters.add(new QueryIpRangesSetter());
    insertSetters.add(new InsertIpRangesSetter());
    postSetters.add(new UpdateIpRangesSetter());
    
    // Add the many-to-many collection setters for the login property.
    querySetters.add(new QueryLoginSetter());
    insertSetters.add(new InsertLoginSetter());
    postSetters.add(new UpdateLoginSetter());
    
    // Add the many-to-many collection setters for the subscription property.
    insertSetters.add(new InsertSubscriptionSetter());
    postSetters.add(new UpdateSubscriptionSetter());
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    IParty other = (IParty)arg0;
    return other.getPrimaryKey().equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    IParty other = (IParty)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.getPrimaryKey().compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.phoenixbioinformatics.api.db.api";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (ipRanges != null) {
      for (com.poesys.db.dto.IDbDto dto : ipRanges) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (login != null) {
      for (com.poesys.db.dto.IDbDto dto : login) {
        dto.cascadeDelete();
      }
    }
    // Only process deletes if child exists.
    if (subscription != null) {
      for (com.poesys.db.dto.IDbDto dto : subscription) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.phoenixbioinformatics.api.db.api");
    String subsystem =
      "org.phoenixbioinformatics.api.db.api"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property partyId
   *
   * <p>
   * Primary key attribute
   * </p>
   *
   * Added by AddGeneratedKeyProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger partyId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getPartyId() {
    return partyId;
  }

  /**
   * Clear the partyId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPartyId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property name
   *
   * <p>
   * the name by which the party is known
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String name;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getName() {
    return name;
  }

  /**
   * Clear the name data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the name.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the name by which the party is known
   * </p>
   *
   * @param name the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input name is null
   */
  public void setName(java.lang.String name)
      throws com.poesys.db.InvalidParametersException {
    if (name == null) {
      throw new com.poesys.db.InvalidParametersException("name is required");
    }
    
    this.name = name;
    setChanged();
  }
  /**
   * Nested property partyType
   *
   * <p>
   * the kind of Party this is:
   * </p>
   * <p>
   * User
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String partyType;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getPartyType() {
    return partyType;
  }

  /**
   * Clear the partyType data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPartyType() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the partyType.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the kind of Party this is:
   * </p>
   * <p>
   * User
   * </p>
   *
   * @param partyType the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input partyType is null
   */
  public void setPartyType(java.lang.String partyType)
      throws com.poesys.db.InvalidParametersException {
    if (partyType == null) {
      throw new com.poesys.db.InvalidParametersException("partyType is required");
    }
    
    this.partyType = partyType;
    setChanged();
  }
  /**
   * Nested property display
   *
   * 
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.Boolean display;
  
  /**
   * Get an object of java.lang.Boolean.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.Boolean
   */

  public java.lang.Boolean getDisplay() {
    return display;
  }

  /**
   * Clear the display data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDisplay() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the display.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param display the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input display is null
   */
  public void setDisplay(java.lang.Boolean display)
      throws com.poesys.db.InvalidParametersException {
    if (display == null) {
      throw new com.poesys.db.InvalidParametersException("display is required");
    }
    
    this.display = display;
    setChanged();
  }
  /**
   * Nested property country
   *
   * 
   *
   * Added by AddToOneAssociationOptionalObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private org.phoenixbioinformatics.api.db.api.ICountry country;
  
  /**
   * Get an object of org.phoenixbioinformatics.api.db.api.ICountry.
   *
   * Source: AddToOneAssociationOptionalObjectProperties
   * 
   * @return a org.phoenixbioinformatics.api.db.api.ICountry
   */

  public org.phoenixbioinformatics.api.db.api.ICountry getCountry() {
    return country;
  }

  /**
   * Clear the country data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCountry() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the country.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * 
   *
   * @param country the value with which to set the property
   */
  public  void setCountry(org.phoenixbioinformatics.api.db.api.ICountry country) {
    this.country = country;
    // Set the IPrimaryKey cache lookup key.
    this.countryKey = country.getPrimaryKey();
    setChanged();
  }
  /**
   * Nested property countryId
   *
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddToOneAssociationAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger countryId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddToOneAssociationAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getCountryId() {
    return countryId;
  }

  /**
   * Clear the countryId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearCountryId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property subscribedPartners
   *
   * <p>
   * the system to which the organization subscribes
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner> subscribedPartners;
  // Ordered list of keys of the objects in the subscribedPartners list
  java.util.List<com.poesys.db.pk.IPrimaryKey> partnerKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IPartner.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner>
   * @throws java.sql.SQLException when there is a database problem
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner> getSubscribedPartners() throws java.sql.SQLException {
    return subscribedPartners;
  }

  /**
   * Clear the subscribedPartners data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSubscribedPartners() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the subscribedPartners.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: true (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the system to which the organization subscribes
   * </p>
   *
   * @param subscribedPartners the value with which to set the property
   */
  public  void setPartner(java.util.Collection<org.phoenixbioinformatics.api.db.api.IPartner> subscribedPartners) {
    this.subscribedPartners = subscribedPartners;
    // Add the primary keys of the new collection to the serialized key list.
    partnerKeys.clear();
    if (subscribedPartners != null) {
      for (com.poesys.db.dto.IDbDto object : subscribedPartners) {
        partnerKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property sessions
   *
   * <p>
   * the set of sessions initiated by the party
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView> sessions;
  // Ordered list of keys of the objects in the sessions list
  java.util.List<com.poesys.db.pk.IPrimaryKey> sessionsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IPageView.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView>
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView> getSessions() {
    return sessions;
  }

  /**
   * Clear the sessions data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSessions() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the sessions.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of sessions initiated by the party
   * </p>
   *
   * @param sessions the value with which to set the property
   */
  public  void setSessions(java.util.Collection<org.phoenixbioinformatics.api.db.api.IPageView> sessions) {
    this.sessions = sessions;
    // Add the primary keys of the new collection to the serialized key list.
    sessionsKeys.clear();
    if (sessions != null) {
      for (com.poesys.db.dto.IDbDto object : sessions) {
        sessionsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property ipRanges
   *
   * <p>
   * the set of IP ranges associated with the party
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange> ipRanges;
  // Ordered list of keys of the objects in the ipRanges list
  java.util.List<com.poesys.db.pk.IPrimaryKey> ipRangesKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IIpRange.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange>
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange> getIpRanges() {
    return ipRanges;
  }

  /**
   * Clear the ipRanges data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearIpRanges() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the ipRanges.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of IP ranges associated with the party
   * </p>
   *
   * @param ipRanges the value with which to set the property
   */
  public  void setIpRanges(java.util.Collection<org.phoenixbioinformatics.api.db.api.IIpRange> ipRanges) {
    this.ipRanges = ipRanges;
    // Add the primary keys of the new collection to the serialized key list.
    ipRangesKeys.clear();
    if (ipRanges != null) {
      for (com.poesys.db.dto.IDbDto object : ipRanges) {
        ipRangesKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property login
   *
   * <p>
   * the set of logins for the party for different partners
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin> login;
  // Ordered list of keys of the objects in the login list
  java.util.List<com.poesys.db.pk.IPrimaryKey> loginKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.ILogin.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin>
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin> getLogin() {
    return login;
  }

  /**
   * Clear the login data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearLogin() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the login.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of logins for the party for different partners
   * </p>
   *
   * @param login the value with which to set the property
   */
  public  void setLogin(java.util.Collection<org.phoenixbioinformatics.api.db.api.ILogin> login) {
    this.login = login;
    // Add the primary keys of the new collection to the serialized key list.
    loginKeys.clear();
    if (login != null) {
      for (com.poesys.db.dto.IDbDto object : login) {
        loginKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property subscription
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> subscription;
  // Ordered list of keys of the objects in the subscription list
  java.util.List<com.poesys.db.pk.IPrimaryKey> subscriptionKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.ISubscription.
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription>
   * @throws java.sql.SQLException when there is a database problem
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> getSubscription() throws java.sql.SQLException {
    return subscription;
  }

  /**
   * Clear the subscription data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSubscription() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the subscription.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: true (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * @param subscription the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input subscription is null
   */
  public void setSubscription(java.util.Collection<org.phoenixbioinformatics.api.db.api.ISubscription> subscription)
      throws com.poesys.db.InvalidParametersException {
    if (subscription == null) {
      throw new com.poesys.db.InvalidParametersException("subscription is required");
    }
    
    this.subscription = subscription;
    // Add the primary keys of the new collection to the serialized key list.
    subscriptionKeys.clear();
    if (subscription != null) {
      for (com.poesys.db.dto.IDbDto object : subscription) {
        subscriptionKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up ipRanges.
    if (subject != null && subject instanceof org.phoenixbioinformatics.api.db.api.IIpRange && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        ipRanges != null) {
      // Delete to-many ipRanges child from collection
      ipRanges.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up login.
    if (subject != null && subject instanceof org.phoenixbioinformatics.api.db.api.ILogin && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        login != null) {
      // Delete to-many login child from collection
      login.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Clean up subscription.
    if (subject != null && subject instanceof org.phoenixbioinformatics.api.db.api.ISubscription && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        subscription != null) {
      // Delete to-many subscription child from collection
      subscription.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to subscription.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        subscription != null) {
      // Mark subscription association object cascade-deleted.
      outer: for (org.phoenixbioinformatics.api.db.api.ISubscription value : subscription) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }

  /**
   * Create the inserters for the Party and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IParty> partyFactory =
      manager.getFactory("org.phoenixbioinformatics.api.db.api.Party",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<IParty> sql =
      new org.phoenixbioinformatics.api.db.api.sql.InsertParty();
    com.poesys.db.dao.insert.IInsert<IParty> inserter =
      partyFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}