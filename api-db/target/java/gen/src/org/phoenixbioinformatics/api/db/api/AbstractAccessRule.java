/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.phoenixbioinformatics.api.db.api;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the AccessRule. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A rule that links a set of URIs to a specific access type for a specific partner
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractAccessRule extends AbstractDto implements IAccessRule {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  


  /**
   * Nested class that manages the partner association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryPartnerSetter extends com.poesys.db.dto.AbstractObjectSetter<org.phoenixbioinformatics.api.db.api.IPartner> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryPartnerSetter object.
     */
    public QueryPartnerSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Partner.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return partnerKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IPartner> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryPartner();
    }

    @Override
    protected void set(org.phoenixbioinformatics.api.db.api.IPartner dto) {
      // No status change, this is just filling in the object data.
      partner = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated partner is not null
      return partner != null;
    }
  }


  /**
   * Foreign key object used by QueryPartnerSetter nested class to query object
   */
  private IPrimaryKey partnerKey;
  
  /**
   * Set the foreign key partnerKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param partnerKey the foreign key
   */
  void setPartnerKey(IPrimaryKey partnerKey) {
    this.partnerKey = partnerKey;
  }


  /**
   * Create an empty AccessRule for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractAccessRule() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the accessType property.

    // Add the setters for the uriPattern property.

    // Add the setters for the partner property.
    querySetters.add(new QueryPartnerSetter());
  }

  /**
   * Create a AccessRule. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the AccessRule
   * @param accessTypesObject wraps an associated IAccessType object
   * @param partnerObject wraps an associated IPartner object
   * @param uriPatternsObject wraps an associated IUriPattern object
   * @param accessTypeId Attribute that is part of the association key
   * @param uriPatternId Attribute that is part of the association key
   * @param partnerId foreign key used as primary key in association class
   * @param partner 
   */
  public AbstractAccessRule(IPrimaryKey key, org.phoenixbioinformatics.api.db.api.IAccessType accessTypesObject, org.phoenixbioinformatics.api.db.api.IPartner partnerObject, org.phoenixbioinformatics.api.db.api.IUriPattern uriPatternsObject, java.math.BigInteger accessTypeId, java.math.BigInteger uriPatternId, java.math.BigInteger partnerId, org.phoenixbioinformatics.api.db.api.IPartner partner) {
    this.key = key;

    this.accessTypeId = accessTypeId;

    if (accessTypeId == null) {
      throw new com.poesys.db.InvalidParametersException("accessTypeId is required for " + key.getValueList());
    }
    
    this.uriPatternId = uriPatternId;

    if (uriPatternId == null) {
      throw new com.poesys.db.InvalidParametersException("uriPatternId is required for " + key.getValueList());
    }
    
    this.partnerId = partnerId;

    if (partnerId == null) {
      throw new com.poesys.db.InvalidParametersException("partnerId is required for " + key.getValueList());
    }
    
    this.partner = partner;

    // Associated key object
    accessType = accessTypesObject;
    
    // Associated key object
    partner = partnerObject;
    
    // Associated key object
    uriPattern = uriPatternsObject;
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the accessType property.
    
    
    // Add the setters for the uriPattern property.
    
    
    // Add the setters for the partner property.
    querySetters.add(new QueryPartnerSetter());
    // Set the object property primary key with a factory method.
    // TODO: fix problem with foreign keys/associated keys VND-168
    // partnerKey = org.phoenixbioinformatics.api.db.api.ApiFactory.getPartnerPrimaryKey();
    
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    IAccessRule other = (IAccessRule)arg0;
    return other.getPrimaryKey().equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    IAccessRule other = (IAccessRule)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.getPrimaryKey().compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.phoenixbioinformatics.api.db.api";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.phoenixbioinformatics.api.db.api");
    String subsystem =
      "org.phoenixbioinformatics.api.db.api"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property partnerId
   *
   * <p>
   * Foreign key used as primary key in association class
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddExplicitAssociationKeyProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger partnerId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddExplicitAssociationKeyProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getPartnerId() {
    return partnerId;
  }

  /**
   * Clear the partnerId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPartnerId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property partner
   *
   * 
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private org.phoenixbioinformatics.api.db.api.IPartner partner;
  
  /**
   * Get an object of org.phoenixbioinformatics.api.db.api.IPartner.
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   * 
   * @return a org.phoenixbioinformatics.api.db.api.IPartner
   */

  public org.phoenixbioinformatics.api.db.api.IPartner getPartner() {
    return partner;
  }

  /**
   * Clear the partner data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPartner() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property accessType
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  private org.phoenixbioinformatics.api.db.api.IAccessType accessType;
  
  /**
   * Get an object of org.phoenixbioinformatics.api.db.api.IAccessType.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a org.phoenixbioinformatics.api.db.api.IAccessType
   * @throws java.sql.SQLException when there is a database problem
   */

  public org.phoenixbioinformatics.api.db.api.IAccessType getAccessType() throws java.sql.SQLException {
    return accessType;
  }

  /**
   * Clear the accessType data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAccessType() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  void setAccessType(org.phoenixbioinformatics.api.db.api.IAccessType accessType)
      throws com.poesys.db.InvalidParametersException {
    if (accessType == null) {
      throw new com.poesys.db.InvalidParametersException("accessType is required");
    }
    
    this.accessType = accessType;
    setChanged();
  }
  /**
   * Nested property uriPattern
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  private org.phoenixbioinformatics.api.db.api.IUriPattern uriPattern;
  
  /**
   * Get an object of org.phoenixbioinformatics.api.db.api.IUriPattern.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a org.phoenixbioinformatics.api.db.api.IUriPattern
   * @throws java.sql.SQLException when there is a database problem
   */

  public org.phoenixbioinformatics.api.db.api.IUriPattern getUriPattern() throws java.sql.SQLException {
    return uriPattern;
  }

  /**
   * Clear the uriPattern data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearUriPattern() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  void setUriPattern(org.phoenixbioinformatics.api.db.api.IUriPattern uriPattern)
      throws com.poesys.db.InvalidParametersException {
    if (uriPattern == null) {
      throw new com.poesys.db.InvalidParametersException("uriPattern is required");
    }
    
    this.uriPattern = uriPattern;
    setChanged();
  }
  /**
   * Nested property accessTypeId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger accessTypeId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getAccessTypeId() {
    return accessTypeId;
  }

  /**
   * Clear the accessTypeId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAccessTypeId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property uriPatternId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger uriPatternId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getUriPatternId() {
    return uriPatternId;
  }

  /**
   * Clear the uriPatternId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearUriPatternId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {
  }

  /**
   * Create the inserters for the AccessRule and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IAccessRule> accessRuleFactory =
      manager.getFactory("org.phoenixbioinformatics.api.db.api.AccessRule",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<IAccessRule> sql =
      new org.phoenixbioinformatics.api.db.api.sql.InsertAccessRule();
    com.poesys.db.dao.insert.IInsert<IAccessRule> inserter =
      accessRuleFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}