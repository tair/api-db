/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.phoenixbioinformatics.api.bs.api;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.phoenixbioinformatics.api.db.api.IParty;
import org.phoenixbioinformatics.api.db.api.PartyProxy;
import org.phoenixbioinformatics.api.db.api.Party;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the Party. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An abstract entity that is either a person or an organization
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsParty 
    extends AbstractDto<org.phoenixbioinformatics.api.db.api.IParty> {

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsPartner objects from a Collection subscribedPartners of data-access-layer 
   * org.phoenixbioinformatics.api.db.api.IPartner objects
   */
  private class BsSubscribedPartnersCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.phoenixbioinformatics.api.db.api.IPartner, org.phoenixbioinformatics.api.bs.api.BsPartner> {
    @Override
    public org.phoenixbioinformatics.api.bs.api.BsPartner get(org.phoenixbioinformatics.api.db.api.IPartner dto) {
      return new org.phoenixbioinformatics.api.bs.api.BsPartner(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of Partner objects from an input Collection subscribedPartners of 
   * business-layer BsPartner objects
   */
  private class SubscribedPartnersCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.phoenixbioinformatics.api.bs.api.BsPartner, org.phoenixbioinformatics.api.db.api.IPartner> {
    @Override
    public org.phoenixbioinformatics.api.db.api.IPartner get(org.phoenixbioinformatics.api.bs.api.BsPartner dto) {
      return dto.toDto();
    }
  }

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsPageView objects from a Collection sessions of data-access-layer 
   * org.phoenixbioinformatics.api.db.api.IPageView objects
   */
  private class BsSessionsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.phoenixbioinformatics.api.db.api.IPageView, org.phoenixbioinformatics.api.bs.api.BsPageView> {
    @Override
    public org.phoenixbioinformatics.api.bs.api.BsPageView get(org.phoenixbioinformatics.api.db.api.IPageView dto) {
      return new org.phoenixbioinformatics.api.bs.api.BsPageView(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of PageView objects from an input Collection sessions of 
   * business-layer BsPageView objects
   */
  private class SessionsCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.phoenixbioinformatics.api.bs.api.BsPageView, org.phoenixbioinformatics.api.db.api.IPageView> {
    @Override
    public org.phoenixbioinformatics.api.db.api.IPageView get(org.phoenixbioinformatics.api.bs.api.BsPageView dto) {
      return dto.toDto();
    }
  }

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsIpRange objects from a Collection ipRanges of data-access-layer 
   * org.phoenixbioinformatics.api.db.api.IIpRange objects
   */
  private class BsIpRangesCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.phoenixbioinformatics.api.db.api.IIpRange, org.phoenixbioinformatics.api.bs.api.BsIpRange> {
    @Override
    public org.phoenixbioinformatics.api.bs.api.BsIpRange get(org.phoenixbioinformatics.api.db.api.IIpRange dto) {
      return new org.phoenixbioinformatics.api.bs.api.BsIpRange(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of IpRange objects from an input Collection ipRanges of 
   * business-layer BsIpRange objects
   */
  private class IpRangesCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.phoenixbioinformatics.api.bs.api.BsIpRange, org.phoenixbioinformatics.api.db.api.IIpRange> {
    @Override
    public org.phoenixbioinformatics.api.db.api.IIpRange get(org.phoenixbioinformatics.api.bs.api.BsIpRange dto) {
      return dto.toDto();
    }
  }

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsLogin objects from a Collection login of data-access-layer 
   * org.phoenixbioinformatics.api.db.api.ILogin objects
   */
  private class BsLoginCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.phoenixbioinformatics.api.db.api.ILogin, org.phoenixbioinformatics.api.bs.api.BsLogin> {
    @Override
    public org.phoenixbioinformatics.api.bs.api.BsLogin get(org.phoenixbioinformatics.api.db.api.ILogin dto) {
      return new org.phoenixbioinformatics.api.bs.api.BsLogin(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of Login objects from an input Collection login of 
   * business-layer BsLogin objects
   */
  private class LoginCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.phoenixbioinformatics.api.bs.api.BsLogin, org.phoenixbioinformatics.api.db.api.ILogin> {
    @Override
    public org.phoenixbioinformatics.api.db.api.ILogin get(org.phoenixbioinformatics.api.bs.api.BsLogin dto) {
      return dto.toDto();
    }
  }

  /**
   * A Collection builder helper class for building a business-layer Collection 
   * of BsSubscription objects from a Collection subscription of data-access-layer 
   * org.phoenixbioinformatics.api.db.api.ISubscription objects
   */
  private class BsSubscriptionCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.phoenixbioinformatics.api.db.api.ISubscription, org.phoenixbioinformatics.api.bs.api.BsSubscription> {
    @Override
    public org.phoenixbioinformatics.api.bs.api.BsSubscription get(org.phoenixbioinformatics.api.db.api.ISubscription dto) {
      return new org.phoenixbioinformatics.api.bs.api.BsSubscription(dto);
    }
  }

  /**
   * A Collection builder helper class for building a data-access-layer Collection 
   * of Subscription objects from an input Collection subscription of 
   * business-layer BsSubscription objects
   */
  private class SubscriptionCollectionBuilder 
      extends com.poesys.bs.dto.CollectionBuilder<org.phoenixbioinformatics.api.bs.api.BsSubscription, org.phoenixbioinformatics.api.db.api.ISubscription> {
    @Override
    public org.phoenixbioinformatics.api.db.api.ISubscription get(org.phoenixbioinformatics.api.bs.api.BsSubscription dto) {
      return dto.toDto();
    }
  }

  /**
   * Create a BsParty object from a Party object.
   * 
   * @param dto the data-access layer Party DTO
   * @throws DelegateException when there is a problem creating the Party
   */
  public AbstractBsParty(IParty dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a Party from new data.
   *
   * @param key the primary key of the Party
   * @param partyId primary key attribute
   * @param name the name by which the party is known
   * @param partyType the kind of Party this is:
User
   * @param display 
   * @param countryId foreign key used by setter to query associated object
   */
  public AbstractBsParty(IPrimaryKey key, java.math.BigInteger partyId, java.lang.String name, java.lang.String partyType, java.lang.Boolean display, java.math.BigInteger countryId) {
    super(new PartyProxy(new Party(key, partyId, name, partyType, display, countryId)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<IParty> other = (IDto<IParty>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<IParty> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Primary key attribute
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger partyId
   */
  public java.math.BigInteger getPartyId() {
    return dto.getPartyId();
  }

  /**
   * <p>
   * the name by which the party is known
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @return a java.lang.String name
   */
  public java.lang.String getName() {
    return dto.getName();
  }

  /**
   * <p>
   * Set the name.
   * </p>
   * <p>
   * the name by which the party is known
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @param name the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter name is null
   */
  public void setName(java.lang.String name) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setName(name);
  }

  /**
   * <p>
   * the kind of Party this is:
   * </p>
   * <p>
   * User
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @return a java.lang.String partyType
   */
  public java.lang.String getPartyType() {
    return dto.getPartyType();
  }

  /**
   * <p>
   * Set the partyType.
   * </p>
   * <p>
   * the kind of Party this is:
   * </p>
   * <p>
   * User
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @param partyType the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter partyType is null
   */
  public void setPartyType(java.lang.String partyType) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setPartyType(partyType);
  }

  /**
   * 
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @return a java.lang.Boolean display
   */
  public java.lang.Boolean getDisplay() {
    return dto.getDisplay();
  }

  /**
   * <p>
   * Set the display.
   * </p>
   * 
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @param display the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter display is null
   */
  public void setDisplay(java.lang.Boolean display) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setDisplay(display);
  }

  /**
   * 
   * <p>
   * Added by AddToOneAssociationOptionalObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @return a org.phoenixbioinformatics.api.bs.api.BsCountry country
   */
  public org.phoenixbioinformatics.api.bs.api.BsCountry getCountry() {
    org.phoenixbioinformatics.api.bs.api.BsCountry bsObject = null;
    org.phoenixbioinformatics.api.db.api.ICountry object = dto.getCountry();
	if (object != null) {
	  bsObject = new org.phoenixbioinformatics.api.bs.api.BsCountry(object);
	}
	return bsObject;
  }

  /**
   * <p>
   * Set the country.
   * </p>
   * 
   * <p>
   * Added by AddToOneAssociationOptionalObjectProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @param country the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setCountry(org.phoenixbioinformatics.api.bs.api.BsCountry country) 
      throws com.poesys.db.dto.DtoStatusException {
    dto.setCountry(country == null ? null : country.toDto());
  }

  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddToOneAssociationAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger countryId
   */
  public java.math.BigInteger getCountryId() {
    java.math.BigInteger bsObject = null;
    java.math.BigInteger object = dto.getCountryId();
    bsObject = object;
	return bsObject;
  }

  /**
   * <p>
   * the system to which the organization subscribes
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties as data member
   * </p>
   * <p>
   * This property loads lazily on demand the first time you call this method,
   * not when you instantiate the BsParty object.
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @return a org.phoenixbioinformatics.api.bs.api.BsPartner countryId
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public java.util.Collection<org.phoenixbioinformatics.api.bs.api.BsPartner> getSubscribedPartners() throws java.sql.SQLException {
    BsSubscribedPartnersCollectionBuilder builder = new BsSubscribedPartnersCollectionBuilder();
    return builder.getCollection(dto.getSubscribedPartners());
  }

  /**
   * <p>
   * Set the partner.
   * </p>
   * <p>
   * the system to which the organization subscribes
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @param countryId the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setPartner(java.util.Collection<org.phoenixbioinformatics.api.bs.api.BsPartner> countryId) 
      throws com.poesys.db.dto.DtoStatusException{
    SubscribedPartnersCollectionBuilder builder = new SubscribedPartnersCollectionBuilder();
      dto.setPartner(builder.getCollection(countryId));
  }

  /**
   * <p>
   * the set of sessions initiated by the party
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @return a org.phoenixbioinformatics.api.bs.api.BsPageView countryId
   */
  public java.util.Collection<org.phoenixbioinformatics.api.bs.api.BsPageView> getSessions() {
    BsSessionsCollectionBuilder builder = new BsSessionsCollectionBuilder();
    return builder.getCollection(dto.getSessions());
  }

  /**
   * <p>
   * Set the sessions.
   * </p>
   * <p>
   * the set of sessions initiated by the party
   * </p>
   * <p>
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @param countryId the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setSessions(java.util.Collection<org.phoenixbioinformatics.api.bs.api.BsPageView> countryId) 
      throws com.poesys.db.dto.DtoStatusException{
    SessionsCollectionBuilder builder = new SessionsCollectionBuilder();
      dto.setSessions(builder.getCollection(countryId));
  }

  /**
   * <p>
   * the set of IP ranges associated with the party
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @return a org.phoenixbioinformatics.api.bs.api.BsIpRange countryId
   */
  public java.util.Collection<org.phoenixbioinformatics.api.bs.api.BsIpRange> getIpRanges() {
    BsIpRangesCollectionBuilder builder = new BsIpRangesCollectionBuilder();
    return builder.getCollection(dto.getIpRanges());
  }

  /**
   * <p>
   * Set the ipRanges.
   * </p>
   * <p>
   * the set of IP ranges associated with the party
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @param countryId the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setIpRanges(java.util.Collection<org.phoenixbioinformatics.api.bs.api.BsIpRange> countryId) 
      throws com.poesys.db.dto.DtoStatusException{
    IpRangesCollectionBuilder builder = new IpRangesCollectionBuilder();
      dto.setIpRanges(builder.getCollection(countryId));
  }

  /**
   * <p>
   * the set of logins for the party for different partners
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @return a org.phoenixbioinformatics.api.bs.api.BsLogin countryId
   */
  public java.util.Collection<org.phoenixbioinformatics.api.bs.api.BsLogin> getLogin() {
    BsLoginCollectionBuilder builder = new BsLoginCollectionBuilder();
    return builder.getCollection(dto.getLogin());
  }

  /**
   * <p>
   * Set the login.
   * </p>
   * <p>
   * the set of logins for the party for different partners
   * </p>
   * <p>
   * Added by AddToManyChildCollectionProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @param countryId the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setLogin(java.util.Collection<org.phoenixbioinformatics.api.bs.api.BsLogin> countryId) 
      throws com.poesys.db.dto.DtoStatusException{
    LoginCollectionBuilder builder = new LoginCollectionBuilder();
      dto.setLogin(builder.getCollection(countryId));
  }

  /**
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties as data member
   * </p>
   * <p>
   * This property loads lazily on demand the first time you call this method,
   * not when you instantiate the BsParty object.
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @return a org.phoenixbioinformatics.api.bs.api.BsSubscription countryId
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public java.util.Collection<org.phoenixbioinformatics.api.bs.api.BsSubscription> getSubscription() throws java.sql.SQLException {
    BsSubscriptionCollectionBuilder builder = new BsSubscriptionCollectionBuilder();
    return builder.getCollection(dto.getSubscription());
  }

  /**
   * <p>
   * Set the subscription.
   * </p>
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   * <p>
   * Added by AddAssociationClassCollectionProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Party</li>
   * </ul>
   * </p>
   * @param countryId the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter countryId is null
   */
  public void setSubscription(java.util.Collection<org.phoenixbioinformatics.api.bs.api.BsSubscription> countryId) 
      throws com.poesys.db.dto.DtoStatusException, com.poesys.db.InvalidParametersException {
    SubscriptionCollectionBuilder builder = new SubscriptionCollectionBuilder();
      dto.setSubscription(builder.getCollection(countryId));
  }

  /**
   * Add a Partner object to the subscribedPartners collection.
   *
   * @param object the object to add to the collection
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public void addSubscribedPartnersPartner(org.phoenixbioinformatics.api.bs.api.BsPartner object) throws java.sql.SQLException {
    dto.addSubscribedPartnersPartner(object.toDto());
  }

  /**
   * Add a PageView object to the sessions collection.
   *
   * @param object the object to add to the collection
   */
  public void addSessionsPageView(org.phoenixbioinformatics.api.bs.api.BsPageView object) {
    dto.addSessionsPageView(object.toDto());
  }

  /**
   * Add a IpRange object to the ipRanges collection.
   *
   * @param object the object to add to the collection
   */
  public void addIpRangesIpRange(org.phoenixbioinformatics.api.bs.api.BsIpRange object) {
    dto.addIpRangesIpRange(object.toDto());
  }

  /**
   * Add a Login object to the login collection.
   *
   * @param object the object to add to the collection
   */
  public void addLoginLogin(org.phoenixbioinformatics.api.bs.api.BsLogin object) {
    dto.addLoginLogin(object.toDto());
  }

  /**
   * Add a Subscription object to the subscription collection.
   *
   * @param object the object to add to the collection
   * @throws java.sql.SQLException when the method can't get a SQL connection to 
   *                               load the property lazily
   */
  public void addSubscriptionSubscription(org.phoenixbioinformatics.api.bs.api.BsSubscription object) throws java.sql.SQLException {
    dto.addSubscriptionSubscription(object.toDto());
  }
}