/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.phoenixbioinformatics.api.bs.api;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.phoenixbioinformatics.api.db.api.ISubscriptionTerm;
import org.phoenixbioinformatics.api.db.api.SubscriptionTermProxy;
import org.phoenixbioinformatics.api.db.api.SubscriptionTerm;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the SubscriptionTerm. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A standardized period of time and price for access during that period
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsSubscriptionTerm 
    extends AbstractDto<org.phoenixbioinformatics.api.db.api.ISubscriptionTerm> {

  /**
   * Create a BsSubscriptionTerm object from a SubscriptionTerm object.
   * 
   * @param dto the data-access layer SubscriptionTerm DTO
   * @throws DelegateException when there is a problem creating the SubscriptionTerm
   */
  public AbstractBsSubscriptionTerm(ISubscriptionTerm dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a SubscriptionTerm from new data.
   *
   * @param key the primary key of the SubscriptionTerm
   * @param partnerId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param period the period of time for which a subscription allows access to a partner system
   * @param price the price for a subscription for this term
   * @param groupDiscountPercentage the discount for this term for a group subscription expressed as a decimal
number with 2 significant digits
   * @param description text describing the term suitable for display in the user interface, such as
"Annual ($199 USD)" for a 365-day term priced at $199
   */
  public AbstractBsSubscriptionTerm(IPrimaryKey key, java.lang.String partnerId, java.lang.Integer period, java.lang.Double price, java.lang.Double groupDiscountPercentage, java.lang.String description) {
    super(new SubscriptionTermProxy(new SubscriptionTerm(key, partnerId, period, price, groupDiscountPercentage, description)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ISubscriptionTerm> other = (IDto<ISubscriptionTerm>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ISubscriptionTerm> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object SubscriptionTerm</li>
   * </ul>
   * </p>
   * @return a java.lang.String partnerId
   */
  public java.lang.String getPartnerId() {
    return dto.getPartnerId();
  }

  /**
   * <p>
   * the period of time for which a subscription allows access to a partner system
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object SubscriptionTerm</li>
   * </ul>
   * </p>
   * @return a java.lang.Integer period
   */
  public java.lang.Integer getPeriod() {
    return dto.getPeriod();
  }

  /**
   * <p>
   * the price for a subscription for this term
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object SubscriptionTerm</li>
   * </ul>
   * </p>
   * @return a java.lang.Double price
   */
  public java.lang.Double getPrice() {
    return dto.getPrice();
  }

  /**
   * <p>
   * Set the price.
   * </p>
   * <p>
   * the price for a subscription for this term
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object SubscriptionTerm</li>
   * </ul>
   * </p>
   * @param price the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter price is null
   */
  public void setPrice(java.lang.Double price) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setPrice(price);
  }

  /**
   * <p>
   * the discount for this term for a group subscription expressed as a decimal
   * number with 2 significant digits
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object SubscriptionTerm</li>
   * </ul>
   * </p>
   * @return a java.lang.Double groupDiscountPercentage
   */
  public java.lang.Double getGroupDiscountPercentage() {
    return dto.getGroupDiscountPercentage();
  }

  /**
   * <p>
   * Set the groupDiscountPercentage.
   * </p>
   * <p>
   * the discount for this term for a group subscription expressed as a decimal
   * number with 2 significant digits
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object SubscriptionTerm</li>
   * </ul>
   * </p>
   * @param groupDiscountPercentage the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter groupDiscountPercentage is null
   */
  public void setGroupDiscountPercentage(java.lang.Double groupDiscountPercentage) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setGroupDiscountPercentage(groupDiscountPercentage);
  }

  /**
   * <p>
   * text describing the term suitable for display in the user interface, such as
   * "Annual ($199 USD)" for a 365-day term priced at $199
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object SubscriptionTerm</li>
   * </ul>
   * </p>
   * @return a java.lang.String description
   */
  public java.lang.String getDescription() {
    return dto.getDescription();
  }

  /**
   * <p>
   * Set the description.
   * </p>
   * <p>
   * text describing the term suitable for display in the user interface, such as
   * "Annual ($199 USD)" for a 365-day term priced at $199
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object SubscriptionTerm</li>
   * </ul>
   * </p>
   * @param description the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter description is null
   */
  public void setDescription(java.lang.String description) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setDescription(description);
  }

  /**
   * <p>
   * the partner to which the subscription terms apply
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object SubscriptionTerm</li>
   * </ul>
   * </p>
   * @return a org.phoenixbioinformatics.api.bs.api.BsPartner partner
   */
  public org.phoenixbioinformatics.api.bs.api.BsPartner getPartner() {
    // Return 4
    return new org.phoenixbioinformatics.api.bs.api.BsPartner(dto.getPartner());
  }

  /**
   * <p>
   * Set the partner.
   * </p>
   * <p>
   * the partner to which the subscription terms apply
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object SubscriptionTerm</li>
   * </ul>
   * </p>
   * @param partner the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter partner is null
   */
  public void setPartner(org.phoenixbioinformatics.api.bs.api.BsPartner partner) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setPartner(partner == null ? null : partner.toDto());
  }
}