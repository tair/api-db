/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.phoenixbioinformatics.api.bs.api;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.phoenixbioinformatics.api.db.api.IIpCount;
import org.phoenixbioinformatics.api.db.api.IpCountProxy;
import org.phoenixbioinformatics.api.db.api.IpCount;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the IpCount. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A counter for each IP address that has accessed a partner
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsIpCount 
    extends AbstractDto<org.phoenixbioinformatics.api.db.api.IIpCount> {

  /**
   * Create a BsIpCount object from a IpCount object.
   * 
   * @param dto the data-access layer IpCount DTO
   * @throws DelegateException when there is a problem creating the IpCount
   */
  public AbstractBsIpCount(IIpCount dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a IpCount from new data.
   *
   * @param key the primary key of the IpCount
   * @param partnerId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param ip the IP address being tracked (IPv4 or IPv6)
   * @param count the count of page views by the IP address since initialization
   */
  public AbstractBsIpCount(IPrimaryKey key, java.lang.String partnerId, java.lang.String ip, java.lang.Integer count) {
    super(new IpCountProxy(new IpCount(key, partnerId, ip, count)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<IIpCount> other = (IDto<IIpCount>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<IIpCount> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object IpCount</li>
   * </ul>
   * </p>
   * @return a java.lang.String partnerId
   */
  public java.lang.String getPartnerId() {
    return dto.getPartnerId();
  }

  /**
   * <p>
   * the IP address being tracked (IPv4 or IPv6)
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object IpCount</li>
   * </ul>
   * </p>
   * @return a java.lang.String ip
   */
  public java.lang.String getIp() {
    return dto.getIp();
  }

  /**
   * <p>
   * the count of page views by the IP address since initialization
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object IpCount</li>
   * </ul>
   * </p>
   * @return a java.lang.Integer count
   */
  public java.lang.Integer getCount() {
    return dto.getCount();
  }

  /**
   * <p>
   * Set the count.
   * </p>
   * <p>
   * the count of page views by the IP address since initialization
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object IpCount</li>
   * </ul>
   * </p>
   * @param count the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter count is null
   */
  public void setCount(java.lang.Integer count) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setCount(count);
  }

  /**
   * <p>
   * the partner that owns the set of meter counts
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object IpCount</li>
   * </ul>
   * </p>
   * @return a org.phoenixbioinformatics.api.bs.api.BsPartner partner
   */
  public org.phoenixbioinformatics.api.bs.api.BsPartner getPartner() {
    // Return 4
    return new org.phoenixbioinformatics.api.bs.api.BsPartner(dto.getPartner());
  }

  /**
   * <p>
   * Set the partner.
   * </p>
   * <p>
   * the partner that owns the set of meter counts
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object IpCount</li>
   * </ul>
   * </p>
   * @param partner the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter partner is null
   */
  public void setPartner(org.phoenixbioinformatics.api.bs.api.BsPartner partner) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setPartner(partner == null ? null : partner.toDto());
  }
}