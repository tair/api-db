/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDtoProxy.vsl

package org.phoenixbioinformatics.api.db.api;


import com.poesys.db.dto.AbstractLazyLoadingDtoProxy;


/**
 * <p>
 * A data-access layer data-transfer object (DTO) lazy-loading proxy for the 
 * AccessRule. This class is an abstract class that contains AndroMDA 
 * generated code; change nothing in this class. Instead, override any methods 
 * in the concrete subclass generated in the same package. AndroMDA will 
 * overwrite this class each time you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A rule that links a set of URIs to a specific access type for a specific partner
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractAccessRuleProxy extends AbstractLazyLoadingDtoProxy implements IAccessRule {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;

  // Lazy-loading query setter strategy nested classes for single-object associations
  
  /** Flag indicating whether the accessType property has been loaded */
  boolean accessTypeLoaded = false;

  /**
   * Query setter for lazily querying nested accessType object
   * (object property)
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryAccessType
   */
  private class QueryAccessTypeSetter 
      extends com.poesys.db.dto.AbstractLazyObjectSetter<org.phoenixbioinformatics.api.db.api.IAccessType> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;

    /**
     * Create a QueryAccessTypeSetter object.
     */
    public QueryAccessTypeSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.AccessType.class.getName();
    }

    @Override
    protected com.poesys.db.pk.IPrimaryKey getKey() {
      // Generate an org.phoenixbioinformatics.api.db.api.IAccessType primary key with the value 
      // from the org.phoenixbioinformatics.api.db.api.IAccessRule object
      return org.phoenixbioinformatics.api.db.api.ApiFactory.getAccessTypePrimaryKey(((IAccessRule)dto).getAccessTypeId());
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IAccessType> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryAccessType();
    }

    @Override
    protected void set(org.phoenixbioinformatics.api.db.api.IAccessType dto)
         throws com.poesys.db.InvalidParametersException, 
                com.poesys.db.dto.DtoStatusException {
      setAccessType(dto);
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded accessType
      return accessTypeLoaded;
    }
  }

  /** Flag indicating whether the uriPattern property has been loaded */
  boolean uriPatternLoaded = false;

  /**
   * Query setter for lazily querying nested uriPattern object
   * (object property)
   *
   * Source: AddAssociationKeyObjectProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryUriPattern
   */
  private class QueryUriPatternSetter 
      extends com.poesys.db.dto.AbstractLazyObjectSetter<org.phoenixbioinformatics.api.db.api.IUriPattern> {
    /** Serial version UID for Serializable object */
    private static final long serialVersionUID = 1L;

    /**
     * Create a QueryUriPatternSetter object.
     */
    public QueryUriPatternSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.UriPattern.class.getName();
    }

    @Override
    protected com.poesys.db.pk.IPrimaryKey getKey() {
      // Generate an org.phoenixbioinformatics.api.db.api.IUriPattern primary key with the value 
      // from the org.phoenixbioinformatics.api.db.api.IAccessRule object
      return org.phoenixbioinformatics.api.db.api.ApiFactory.getUriPatternPrimaryKey(((IAccessRule)dto).getUriPatternId());
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IUriPattern> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryUriPattern();
    }

    @Override
    protected void set(org.phoenixbioinformatics.api.db.api.IUriPattern dto)
         throws com.poesys.db.InvalidParametersException, 
                com.poesys.db.dto.DtoStatusException {
      setUriPattern(dto);
    }

    @Override
    public boolean isSet() {
      // Set if proxy has loaded uriPattern
      return uriPatternLoaded;
    }
  }

  /**
   * Create a AccessRuleProxy. The concrete subclass must call this constructor.
   *
   * @param dto the DTO to proxy
   */
  public AbstractAccessRuleProxy(AccessRule dto) {
    super(dto);

    // Setter arrays
    readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
  }

  @Override
  public boolean equals(Object obj) {
    AbstractAccessRuleProxy otherProxy = (AbstractAccessRuleProxy)obj;
    return ((AccessRule)dto).equals(otherProxy.dto);
  }

  @Override
  public int hashCode() {
    return ((AccessRule)dto).hashCode();
  }

  // Local properties (attributes, associations, and association classes)

  /**
   * Get an object of java.lang.String
   *
   * Source: AddNaturalKeyProperties + AddExplicitAssociationKeyProperties
   * Lazy: false
   * 
   * @return a java.lang.String
   */
  public java.lang.String getPartnerId() {
    return ((AccessRule)dto).getPartnerId();
  }

  /**
   * Get an object of org.phoenixbioinformatics.api.db.api.IPartner
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   * Lazy: false
   * 
   * @return a org.phoenixbioinformatics.api.db.api.IPartner
   */
  public org.phoenixbioinformatics.api.db.api.IPartner getPartner() {
    return ((AccessRule)dto).getPartner();
  }

  /**
   * Get an object of org.phoenixbioinformatics.api.db.api.IAccessType
   * loading the accessType association if it is not already in memory.
   *
   * Source: AddAssociationKeyObjectProperties
   * Lazy: true
   * 
   * @return a org.phoenixbioinformatics.api.db.api.IAccessType
   * @throws java.sql.SQLException when there is a database problem
   */
  public org.phoenixbioinformatics.api.db.api.IAccessType getAccessType() throws java.sql.SQLException {
    // Lazy-load the local property accessType if not loaded and the key accessTypes is not null.
    if (!accessTypeLoaded && ((IAccessRule)dto).getAccessTypeId() != null) {
      try {
        com.poesys.db.dto.ISet setter = new QueryAccessTypeSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    } else if (!accessTypeLoaded) {
      // accessTypes key attribute is null but is required
      java.util.List<String> args = new java.util.ArrayList<String>(1);
      args.add("accessTypes");
      com.poesys.db.NoRequiredValueException e = 
        new com.poesys.db.NoRequiredValueException("com.poesys.db.dto.msg.lazy_load_no_required_value");
      e.setParameters(args);
      throw e;
    }

    return ((AccessRule)dto).getAccessType();
  }

  /**
   * Clear the lazily loaded property accessType if it is loaded.
   */
  public void clearAccessType() {
    // Only clear if loaded already.
    if (accessTypeLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((AccessRule)dto).setAccessType(null);
        ((AccessRule)dto).undoStatus();
        accessTypeLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the accessType from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param accessType the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setAccessType(org.phoenixbioinformatics.api.db.api.IAccessType accessType)
      throws com.poesys.db.InvalidParametersException {
    ((AccessRule)dto).setAccessType(accessType);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    accessTypeLoaded = true;
  }

  /**
   * Get an object of org.phoenixbioinformatics.api.db.api.IUriPattern
   * loading the uriPattern association if it is not already in memory.
   *
   * Source: AddAssociationKeyObjectProperties
   * Lazy: true
   * 
   * @return a org.phoenixbioinformatics.api.db.api.IUriPattern
   * @throws java.sql.SQLException when there is a database problem
   */
  public org.phoenixbioinformatics.api.db.api.IUriPattern getUriPattern() throws java.sql.SQLException {
    // Lazy-load the local property uriPattern if not loaded and the key uriPatterns is not null.
    if (!uriPatternLoaded && ((IAccessRule)dto).getUriPatternId() != null) {
      try {
        com.poesys.db.dto.ISet setter = new QueryUriPatternSetter();
        setter.set(dto.getConnection());
      } catch (com.poesys.db.InvalidParametersException e) {
        throw new java.sql.SQLException(e.getMessage());
      }
    } else if (!uriPatternLoaded) {
      // uriPatterns key attribute is null but is required
      java.util.List<String> args = new java.util.ArrayList<String>(1);
      args.add("uriPatterns");
      com.poesys.db.NoRequiredValueException e = 
        new com.poesys.db.NoRequiredValueException("com.poesys.db.dto.msg.lazy_load_no_required_value");
      e.setParameters(args);
      throw e;
    }

    return ((AccessRule)dto).getUriPattern();
  }

  /**
   * Clear the lazily loaded property uriPattern if it is loaded.
   */
  public void clearUriPattern() {
    // Only clear if loaded already.
    if (uriPatternLoaded) {
      try {
        // Call the local lazy property setter to clear the property.
        ((AccessRule)dto).setUriPattern(null);
        ((AccessRule)dto).undoStatus();
        uriPatternLoaded = false;
      } catch (com.poesys.db.dto.DtoStatusException e) {
        // Couldn't set status to CHANGED, ignore because we don't want it set
      }
    }
  }

  /**
   * Set the uriPattern from a lazy-loading proxy. The IDbDto-
   * derived interface does not contain this method.
   *
   * @param uriPattern the lazily loaded value to assign
   * @throws com.poesys.db.InvalidParametersException when the property value is null
   */
  void setUriPattern(org.phoenixbioinformatics.api.db.api.IUriPattern uriPattern)
      throws com.poesys.db.InvalidParametersException {
    ((AccessRule)dto).setUriPattern(uriPattern);
    // Mark the property loaded and undo the status change.
    dto.undoStatus();
    uriPatternLoaded = true;
  }

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getAccessTypeId() {
    return ((AccessRule)dto).getAccessTypeId();
  }

  /**
   * Get an object of java.math.BigInteger
   *
   * Source: AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Lazy: false
   * 
   * @return a java.math.BigInteger
   */
  public java.math.BigInteger getUriPatternId() {
    return ((AccessRule)dto).getUriPatternId();
  }

  public void markChildrenDeleted() throws com.poesys.db.dto.DtoStatusException {
  	((AccessRule)dto).markChildrenDeleted();
  }
}