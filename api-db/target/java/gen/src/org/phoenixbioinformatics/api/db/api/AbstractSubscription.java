/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.phoenixbioinformatics.api.db.api;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the Subscription. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * An agreement by a party to take and pay for access to a partner system; a
 * relationship between a party and a partner system
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>AssociationKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractSubscription extends AbstractDto implements ISubscription {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  


  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested subscriptionTransactions
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionTransactionsBySubscription
   */
  private class QuerySubscriptionTransactionsSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction, ISubscription, java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QuerySubscriptionTransactionsSetter object.
     */
    public QuerySubscriptionTransactionsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionTransaction.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ISubscription getParametersDto() {
      return AbstractSubscription.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction, ISubscription> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionTransactionsBySubscription();
    }

    @Override
    protected void set(java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> list) {
      // No status change; this is just filling in the object data.
      subscriptionTransactions = list;
      // Add the primary keys to the serialized key list if there are any.
      if (subscriptionTransactions != null) {
        for (com.poesys.db.dto.IDbDto object : subscriptionTransactions) {
          subscriptionTransactionsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated subscriptionTransactions list is not null
      return subscriptionTransactions != null;
    }
  }

  /**
   * Insert setter for inserting nested to-many association subscriptionTransactions.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertSubscriptionTransaction
   */
  private class InsertSubscriptionTransactionsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association subscriptionTransactions source: AddToManyChildCollectionProperties

    /**
     * Create an InsertSubscriptionTransactionsSetter object.
     */
    public InsertSubscriptionTransactionsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionTransaction.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = subscriptionTransactions;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added subscriptionTransactions and updated subscriptionTransactions.
   * Deleted subscriptionTransactions are deleted in the database cascade delete.
   */
   
  private class UpdateSubscriptionTransactionsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction, java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateSubscriptionTransactionsSetter object.
     */
    public UpdateSubscriptionTransactionsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // subscriptionTransactions source: AddToManyChildCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionTransaction.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateSubscriptionTransaction());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionTransaction.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteSubscriptionTransaction());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionTransaction.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertSubscriptionTransaction());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> getDtos() {
      return subscriptionTransactions;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionTransaction.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction object to subscriptionTransactions collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction object
   */
  public void addSubscriptionTransactionsSubscriptionTransaction(org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction object) {
    if (subscriptionTransactions == null) {
      // Association not yet created, create it.
      subscriptionTransactions = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction>();
    }
    subscriptionTransactions.add(object);
    // Add the primary key to the primary key array.
    subscriptionTransactionsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty Subscription for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractSubscription() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the partner property.

    // Add the setters for the party property.
    
    // Add the many-to-many collection setters for the subscriptionTransactions property.
    querySetters.add(new QuerySubscriptionTransactionsSetter());
    insertSetters.add(new InsertSubscriptionTransactionsSetter());
    postSetters.add(new UpdateSubscriptionTransactionsSetter());
  }

  /**
   * Create a Subscription. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the Subscription
   * @param subscribedPartnersObject wraps an associated IPartner object
   * @param subscribersObject wraps an associated IParty object
   * @param partnerId Attribute that is part of the association key
   * @param partyId Attribute that is part of the association key
   * @param startDate the date and time at which the subscription commences; if this is in the future,
the subscription is not yet in effect
   * @param endDate the date and time at which the subscription ends
   * @param subscriptionId an alternate single-number identifier for the subscription
   */
  public AbstractSubscription(IPrimaryKey key, org.phoenixbioinformatics.api.db.api.IPartner subscribedPartnersObject, org.phoenixbioinformatics.api.db.api.IParty subscribersObject, java.lang.String partnerId, java.math.BigInteger partyId, java.sql.Timestamp startDate, java.sql.Timestamp endDate, java.math.BigInteger subscriptionId) {
    this.key = key;

    this.partnerId = partnerId;

    this.partyId = partyId;

    if (partyId == null) {
      throw new com.poesys.db.InvalidParametersException("partyId is required for " + key.getValueList());
    }
    
    this.startDate = startDate;

    if (startDate == null) {
      throw new com.poesys.db.InvalidParametersException("startDate is required for " + key.getValueList());
    }
    
    this.endDate = endDate;

    if (endDate == null) {
      throw new com.poesys.db.InvalidParametersException("endDate is required for " + key.getValueList());
    }
    
    this.subscriptionId = subscriptionId;

    if (subscriptionId == null) {
      throw new com.poesys.db.InvalidParametersException("subscriptionId is required for " + key.getValueList());
    }
    
    // Associated key object
    partner = subscribedPartnersObject;
    
    // Associated key object
    subscriber = subscribersObject;
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the partner property.
    
    
    // Add the setters for the subscriber property.
    
    
    // Add the many-to-many collection setters for the subscriptionTransactions property.
    querySetters.add(new QuerySubscriptionTransactionsSetter());
    insertSetters.add(new InsertSubscriptionTransactionsSetter());
    postSetters.add(new UpdateSubscriptionTransactionsSetter());
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    ISubscription other = (ISubscription)arg0;
    return other.getPrimaryKey().equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    ISubscription other = (ISubscription)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.getPrimaryKey().compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.phoenixbioinformatics.api.db.api";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (subscriptionTransactions != null) {
      for (com.poesys.db.dto.IDbDto dto : subscriptionTransactions) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.phoenixbioinformatics.api.db.api");
    String subsystem =
      "org.phoenixbioinformatics.api.db.api"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property startDate
   *
   * <p>
   * the date and time at which the subscription commences; if this is in the future,
   * the subscription is not yet in effect
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.sql.Timestamp startDate;
  
  /**
   * Get an object of java.sql.Timestamp.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.sql.Timestamp
   */

  public java.sql.Timestamp getStartDate() {
    return startDate;
  }

  /**
   * Clear the startDate data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearStartDate() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the startDate.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the date and time at which the subscription commences; if this is in the future,
   * the subscription is not yet in effect
   * </p>
   *
   * @param startDate the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input startDate is null
   */
  public void setStartDate(java.sql.Timestamp startDate)
      throws com.poesys.db.InvalidParametersException {
    if (startDate == null) {
      throw new com.poesys.db.InvalidParametersException("startDate is required");
    }
    
    this.startDate = startDate;
    setChanged();
  }
  /**
   * Nested property endDate
   *
   * <p>
   * the date and time at which the subscription ends
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.sql.Timestamp endDate;
  
  /**
   * Get an object of java.sql.Timestamp.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.sql.Timestamp
   */

  public java.sql.Timestamp getEndDate() {
    return endDate;
  }

  /**
   * Clear the endDate data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearEndDate() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the endDate.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the date and time at which the subscription ends
   * </p>
   *
   * @param endDate the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input endDate is null
   */
  public void setEndDate(java.sql.Timestamp endDate)
      throws com.poesys.db.InvalidParametersException {
    if (endDate == null) {
      throw new com.poesys.db.InvalidParametersException("endDate is required");
    }
    
    this.endDate = endDate;
    setChanged();
  }
  /**
   * Nested property subscriptionId
   *
   * <p>
   * an alternate single-number identifier for the subscription
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.math.BigInteger subscriptionId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getSubscriptionId() {
    return subscriptionId;
  }

  /**
   * Clear the subscriptionId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSubscriptionId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the subscriptionId.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * an alternate single-number identifier for the subscription
   * </p>
   *
   * @param subscriptionId the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input subscriptionId is null
   */
  public void setSubscriptionId(java.math.BigInteger subscriptionId)
      throws com.poesys.db.InvalidParametersException {
    if (subscriptionId == null) {
      throw new com.poesys.db.InvalidParametersException("subscriptionId is required");
    }
    
    this.subscriptionId = subscriptionId;
    setChanged();
  }
  /**
   * Nested property subscriptionTransactions
   *
   * <p>
   * the set of subscription transactions for the subscription
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> subscriptionTransactions;
  // Ordered list of keys of the objects in the subscriptionTransactions list
  java.util.List<com.poesys.db.pk.IPrimaryKey> subscriptionTransactionsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a list of org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction>
   */

  public java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> getSubscriptionTransactions() {
    return subscriptionTransactions;
  }

  /**
   * Clear the subscriptionTransactions data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSubscriptionTransactions() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the subscriptionTransactions.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of subscription transactions for the subscription
   * </p>
   *
   * @param subscriptionTransactions the value with which to set the property
   */
  public  void setSubscriptionTransactions(java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction> subscriptionTransactions) {
    this.subscriptionTransactions = subscriptionTransactions;
    // Add the primary keys of the new collection to the serialized key list.
    subscriptionTransactionsKeys.clear();
    if (subscriptionTransactions != null) {
      for (com.poesys.db.dto.IDbDto object : subscriptionTransactions) {
        subscriptionTransactionsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property partner
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  private org.phoenixbioinformatics.api.db.api.IPartner partner;
  
  /**
   * Get an object of org.phoenixbioinformatics.api.db.api.IPartner.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a org.phoenixbioinformatics.api.db.api.IPartner
   * @throws java.sql.SQLException when there is a database problem
   */

  public org.phoenixbioinformatics.api.db.api.IPartner getPartner() throws java.sql.SQLException {
    return partner;
  }

  /**
   * Clear the partner data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPartner() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  void setPartner(org.phoenixbioinformatics.api.db.api.IPartner partner)
      throws com.poesys.db.InvalidParametersException {
    if (partner == null) {
      throw new com.poesys.db.InvalidParametersException("partner is required");
    }
    
    this.partner = partner;
    setChanged();
  }
  /**
   * Nested property subscriber
   *
   * <p>
   * Associated object
   * </p>
   *
   * Added by AddAssociationKeyObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: true
   */
  private org.phoenixbioinformatics.api.db.api.IParty subscriber;
  
  /**
   * Get an object of org.phoenixbioinformatics.api.db.api.IParty.
   *
   * Source: AddAssociationKeyObjectProperties
   * 
   * @return a org.phoenixbioinformatics.api.db.api.IParty
   * @throws java.sql.SQLException when there is a database problem
   */

  public org.phoenixbioinformatics.api.db.api.IParty getSubscriber() throws java.sql.SQLException {
    return subscriber;
  }

  /**
   * Clear the subscriber data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearSubscriber() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  void setSubscriber(org.phoenixbioinformatics.api.db.api.IParty subscriber)
      throws com.poesys.db.InvalidParametersException {
    if (subscriber == null) {
      throw new com.poesys.db.InvalidParametersException("subscriber is required");
    }
    
    this.subscriber = subscriber;
    setChanged();
  }
  /**
   * Nested property partnerId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String partnerId;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddNaturalKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getPartnerId() {
    return partnerId;
  }

  /**
   * Clear the partnerId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPartnerId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property partyId
   *
   * <p>
   * Attribute that is part of the association key
   * </p>
   *
   * Added by AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger partyId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties + AddAssociationKeyAttributeProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getPartyId() {
    return partyId;
  }

  /**
   * Clear the partyId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPartyId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up subscriptionTransactions.
    if (subject != null && subject instanceof org.phoenixbioinformatics.api.db.api.ISubscriptionTransaction && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        subscriptionTransactions != null) {
      // Delete to-many subscriptionTransactions child from collection
      subscriptionTransactions.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }
  }

  /**
   * Create the inserters for the Subscription and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscription> subscriptionFactory =
      manager.getFactory("org.phoenixbioinformatics.api.db.api.Subscription",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ISubscription> sql =
      new org.phoenixbioinformatics.api.db.api.sql.InsertSubscription();
    com.poesys.db.dao.insert.IInsert<ISubscription> inserter =
      subscriptionFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}