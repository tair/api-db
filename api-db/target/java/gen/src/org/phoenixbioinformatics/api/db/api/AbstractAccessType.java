/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.phoenixbioinformatics.api.db.api;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the AccessType. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A particular kind of access to authorize
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>Persistent</li>
 *     <li>SequenceKey</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractAccessType extends AbstractDto implements IAccessType {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  
  // Setter strategy nested classes for multiple-object associations


  /**
   * Insert setter for inserting nested to-many association uriPattern.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertUriPattern
   */
  private class InsertUriPatternsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association uriPatterns source: TransformToProperty + AddToManyAssociationCollectionProperties

    /**
     * Create an InsertUriPatternsSetter object.
     */
    public InsertUriPatternsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.UriPattern.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = uriPatterns;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added uriPattern, updated uriPattern, and 
   * deleted uriPattern. 
   */
   
  private class UpdateUriPatternsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.IUriPattern, java.util.Collection<org.phoenixbioinformatics.api.db.api.IUriPattern>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateUriPatternsSetter object.
     */
    public UpdateUriPatternsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IUriPattern> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // uriPatterns source: TransformToProperty + AddToManyAssociationCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IUriPattern> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.UriPattern.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.IUriPattern> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateUriPattern());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IUriPattern> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IUriPattern> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.UriPattern.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.IUriPattern> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteUriPattern());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IUriPattern> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IUriPattern> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.UriPattern.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.IUriPattern> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertUriPattern());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IUriPattern> getDtos() {
      return uriPatterns;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.UriPattern.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.IUriPattern object to uriPatterns collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IUriPattern object
   */
  public void addUriPatternsUriPattern(org.phoenixbioinformatics.api.db.api.IUriPattern object) {
    if (uriPatterns == null) {
      // Association not yet created, create it.
      uriPatterns = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.IUriPattern>();
    }
    uriPatterns.add(object);
    // Add the primary key to the primary key array.
    uriPatternKeys.add(object.getPrimaryKey());
  }
   

  /**
   * Insert setter for inserting nested to-many association accessRule.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertAccessRule
   */
  private class InsertAccessRuleSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association accessRule source: AddAssociationClassCollectionProperties

    /**
     * Create an InsertAccessRuleSetter object.
     */
    public InsertAccessRuleSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.AccessRule.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = accessRule;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added accessRule and updated accessRule.
   * Deleted accessRule are deleted in the database cascade delete.
   */
   
  private class UpdateAccessRuleSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.IAccessRule, java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateAccessRuleSetter object.
     */
    public UpdateAccessRuleSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // accessRule source: AddAssociationClassCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IAccessRule> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.AccessRule.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.IAccessRule> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateAccessRule());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IAccessRule> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.AccessRule.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.IAccessRule> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteAccessRule());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IAccessRule> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.AccessRule.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.IAccessRule> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertAccessRule());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> getDtos() {
      return accessRule;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.AccessRule.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.IAccessRule object to accessRule collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.IAccessRule object
   */
  public void addAccessRuleAccessRule(org.phoenixbioinformatics.api.db.api.IAccessRule object) {
    if (accessRule == null) {
      // Association not yet created, create it.
      accessRule = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.IAccessRule>();
    }
    accessRule.add(object);
    // Add the primary key to the primary key array.
    accessRuleKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty AccessType for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractAccessType() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the uriPatterns property.
    insertSetters.add(new InsertUriPatternsSetter());
    postSetters.add(new UpdateUriPatternsSetter());
    
    // Add the many-to-many collection setters for the accessRule property.
    insertSetters.add(new InsertAccessRuleSetter());
    postSetters.add(new UpdateAccessRuleSetter());
  }

  /**
   * Create a AccessType. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the AccessType
   * @param accessTypeId primary key attribute
   * @param name the name of the access type
   */
  public AbstractAccessType(IPrimaryKey key, java.math.BigInteger accessTypeId, java.lang.String name) {
    this.key = key;

    this.accessTypeId = accessTypeId;

    if (accessTypeId == null) {
      throw new com.poesys.db.InvalidParametersException("accessTypeId is required for " + key.getValueList());
    }
    
    this.name = name;

    if (name == null) {
      throw new com.poesys.db.InvalidParametersException("name is required for " + key.getValueList());
    }
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the many-to-many collection setters for the uriPattern property.
    insertSetters.add(new InsertUriPatternsSetter());
    postSetters.add(new UpdateUriPatternsSetter());
    
    // Add the many-to-many collection setters for the accessRule property.
    insertSetters.add(new InsertAccessRuleSetter());
    postSetters.add(new UpdateAccessRuleSetter());
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    IAccessType other = (IAccessType)arg0;
    return other.getPrimaryKey().equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    IAccessType other = (IAccessType)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.getPrimaryKey().compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.phoenixbioinformatics.api.db.api";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (accessRule != null) {
      for (com.poesys.db.dto.IDbDto dto : accessRule) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.phoenixbioinformatics.api.db.api");
    String subsystem =
      "org.phoenixbioinformatics.api.db.api"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property accessTypeId
   *
   * <p>
   * Primary key attribute
   * </p>
   *
   * Added by AddGeneratedKeyProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.math.BigInteger accessTypeId;
  
  /**
   * Get an object of java.math.BigInteger.
   *
   * Source: AddGeneratedKeyProperties
   * 
   * @return a java.math.BigInteger
   */

  public java.math.BigInteger getAccessTypeId() {
    return accessTypeId;
  }

  /**
   * Clear the accessTypeId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAccessTypeId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property name
   *
   * <p>
   * the name of the access type
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String name;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getName() {
    return name;
  }

  /**
   * Clear the name data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearName() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the name.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the name of the access type
   * </p>
   *
   * @param name the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input name is null
   */
  public void setName(java.lang.String name)
      throws com.poesys.db.InvalidParametersException {
    if (name == null) {
      throw new com.poesys.db.InvalidParametersException("name is required");
    }
    
    this.name = name;
    setChanged();
  }
  /**
   * Nested property uriPatterns
   *
   * <p>
   * the set of URI patterns
   * </p>
   *
   * Added by TransformToProperty + AddToManyAssociationCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.IUriPattern> uriPatterns;
  // Ordered list of keys of the objects in the uriPatterns list
  java.util.List<com.poesys.db.pk.IPrimaryKey> uriPatternKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IUriPattern.
   *
   * Source: TransformToProperty + AddToManyAssociationCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IUriPattern>
   * @throws java.sql.SQLException when there is a database problem
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IUriPattern> getUriPatterns() throws java.sql.SQLException {
    return uriPatterns;
  }

  /**
   * Clear the uriPatterns data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearUriPatterns() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the uriPatterns.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: true (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of URI patterns
   * </p>
   *
   * @param uriPatterns the value with which to set the property
   */
  public  void setUriPattern(java.util.Collection<org.phoenixbioinformatics.api.db.api.IUriPattern> uriPatterns) {
    this.uriPatterns = uriPatterns;
    // Add the primary keys of the new collection to the serialized key list.
    uriPatternKeys.clear();
    if (uriPatterns != null) {
      for (com.poesys.db.dto.IDbDto object : uriPatterns) {
        uriPatternKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }
  /**
   * Nested property accessRule
   *
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * Added by AddAssociationClassCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: true
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> accessRule;
  // Ordered list of keys of the objects in the accessRule list
  java.util.List<com.poesys.db.pk.IPrimaryKey> accessRuleKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a collection of org.phoenixbioinformatics.api.db.api.IAccessRule.
   *
   * Source: AddAssociationClassCollectionProperties
   * 
   * @return a java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule>
   * @throws java.sql.SQLException when there is a database problem
   */

  public java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> getAccessRule() throws java.sql.SQLException {
    return accessRule;
  }

  /**
   * Clear the accessRule data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearAccessRule() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the accessRule.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: true (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * Collection of association class objects (not the associated objects)
   * </p>
   *
   * @param accessRule the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input accessRule is null
   */
  public void setAccessRule(java.util.Collection<org.phoenixbioinformatics.api.db.api.IAccessRule> accessRule)
      throws com.poesys.db.InvalidParametersException {
    if (accessRule == null) {
      throw new com.poesys.db.InvalidParametersException("accessRule is required");
    }
    
    this.accessRule = accessRule;
    // Add the primary keys of the new collection to the serialized key list.
    accessRuleKeys.clear();
    if (accessRule != null) {
      for (com.poesys.db.dto.IDbDto object : accessRule) {
        accessRuleKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up accessRule.
    if (subject != null && subject instanceof org.phoenixbioinformatics.api.db.api.IAccessRule && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        accessRule != null) {
      // Delete to-many accessRule child from collection
      accessRule.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }

    // Cascade delete to accessRule.
    if (event == com.poesys.db.dao.DataEvent.MARKED_DELETED &&
        accessRule != null) {
      // Mark accessRule association object cascade-deleted.
      outer: for (org.phoenixbioinformatics.api.db.api.IAccessRule value : accessRule) {
        com.poesys.db.pk.AssociationPrimaryKey keys = 
          (com.poesys.db.pk.AssociationPrimaryKey) value.getPrimaryKey();
        for (com.poesys.db.pk.IPrimaryKey key : keys.getKeyListCopy()) {
          if (key.equals(subject.getPrimaryKey())) {
            value.cascadeDelete();
            break outer;
          }
        }
      }
    }
  }

  /**
   * Create the inserters for the AccessType and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IAccessType> accessTypeFactory =
      manager.getFactory("org.phoenixbioinformatics.api.db.api.AccessType",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<IAccessType> sql =
      new org.phoenixbioinformatics.api.db.api.sql.InsertAccessType();
    com.poesys.db.dao.insert.IInsert<IAccessType> inserter =
      accessTypeFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}