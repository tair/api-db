/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractBsDto.vsl


package org.phoenixbioinformatics.api.bs.api;


import com.poesys.bs.delegate.DelegateException;
import com.poesys.bs.dto.IDto;
import com.poesys.db.dto.DtoStatusException;
import com.poesys.db.pk.IPrimaryKey;
import com.poesys.bs.dto.AbstractDto;


import org.phoenixbioinformatics.api.db.api.ILogin;
import org.phoenixbioinformatics.api.db.api.LoginProxy;
import org.phoenixbioinformatics.api.db.api.Login;


/**
 * <p>
 * A business layer data-transfer object (DTO) for the Login. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * the username and password that correspond to a party and partner; the system
 * verifies the identity of the party by comparison of the password given the
 * username; note that the name changed from "User" because that was an Oracle
 * keyword
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractBsLogin 
    extends AbstractDto<org.phoenixbioinformatics.api.db.api.ILogin> {

  /**
   * Create a BsLogin object from a Login object.
   * 
   * @param dto the data-access layer Login DTO
   * @throws DelegateException when there is a problem creating the Login
   */
  public AbstractBsLogin(ILogin dto) throws DelegateException {
    super(dto);
  }

  /**
   * Create a Login from new data.
   *
   * @param key the primary key of the Login
   * @param partyId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param username the unique, case-insensitive username for a party
   * @param password the password that authenticates the user/party
   * @param email the party's email address
   * @param institution the name of the organization to which the party belongs, such as a company or
university name
   * @param userIdentifier a partner-specific identifier for the user, represented as a string (such as the
TAIR community id); used by the partner to identify the user
   * @param partnerId foreign key used by setter to query associated object
   */
  public AbstractBsLogin(IPrimaryKey key, java.math.BigInteger partyId, java.lang.String username, java.lang.String password, java.lang.String email, java.lang.String institution, java.lang.String userIdentifier, java.lang.String partnerId) {
    super(new LoginProxy(new Login(key, partyId, username, password, email, institution, userIdentifier, partnerId)));
  }

  @SuppressWarnings("unchecked")
  @Override
  public boolean equals(Object arg0) {
    // Unchecked cast here
    IDto<ILogin> other = (IDto<ILogin>)arg0;
    return dto.equals(other.toDto());
  }

  @Override
  public int hashCode() {
    return dto.hashCode();
  }

  public int compareTo(IDto<ILogin> o) {
    return dto.compareTo(o.toDto());
  }

  public void markChildrenDeleted() throws DtoStatusException {
    dto.markChildrenDeleted();
  }
  
  public IPrimaryKey getPrimaryKey() {
    return dto.getPrimaryKey();
  }

  // Data member properties

  /**
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   * <p>
   * Added by AddGeneratedKeyProperties + AddParentKeyAttributes as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @return a java.math.BigInteger partyId
   */
  public java.math.BigInteger getPartyId() {
    return dto.getPartyId();
  }

  /**
   * <p>
   * the unique, case-insensitive username for a party
   * </p>
   * <p>
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @return a java.lang.String username
   */
  public java.lang.String getUsername() {
    return dto.getUsername();
  }

  /**
   * <p>
   * the password that authenticates the user/party
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @return a java.lang.String password
   */
  public java.lang.String getPassword() {
    return dto.getPassword();
  }

  /**
   * <p>
   * Set the password.
   * </p>
   * <p>
   * the password that authenticates the user/party
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @param password the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter password is null
   */
  public void setPassword(java.lang.String password) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setPassword(password);
  }

  /**
   * <p>
   * the party's email address
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @return a java.lang.String email
   */
  public java.lang.String getEmail() {
    return dto.getEmail();
  }

  /**
   * <p>
   * Set the email.
   * </p>
   * <p>
   * the party's email address
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @param email the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setEmail(java.lang.String email) 
      throws com.poesys.db.dto.DtoStatusException {
    dto.setEmail(email);
  }

  /**
   * <p>
   * the name of the organization to which the party belongs, such as a company or
   * university name
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @return a java.lang.String institution
   */
  public java.lang.String getInstitution() {
    return dto.getInstitution();
  }

  /**
   * <p>
   * Set the institution.
   * </p>
   * <p>
   * the name of the organization to which the party belongs, such as a company or
   * university name
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @param institution the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setInstitution(java.lang.String institution) 
      throws com.poesys.db.dto.DtoStatusException {
    dto.setInstitution(institution);
  }

  /**
   * <p>
   * a partner-specific identifier for the user, represented as a string (such as the
   * TAIR community id); used by the partner to identify the user
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @return a java.lang.String userIdentifier
   */
  public java.lang.String getUserIdentifier() {
    return dto.getUserIdentifier();
  }

  /**
   * <p>
   * Set the userIdentifier.
   * </p>
   * <p>
   * a partner-specific identifier for the user, represented as a string (such as the
   * TAIR community id); used by the partner to identify the user
   * </p>
   * <p>
   * Added by AddLocalAttributeProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @param userIdentifier the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   */
  public void setUserIdentifier(java.lang.String userIdentifier) 
      throws com.poesys.db.dto.DtoStatusException {
    dto.setUserIdentifier(userIdentifier);
  }

  /**
   * <p>
   * the partner against which to authenticate with the login information
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @return a org.phoenixbioinformatics.api.bs.api.BsPartner partner
   */
  public org.phoenixbioinformatics.api.bs.api.BsPartner getPartner() {
    // Return 4
    return new org.phoenixbioinformatics.api.bs.api.BsPartner(dto.getPartner());
  }

  /**
   * <p>
   * Set the partner.
   * </p>
   * <p>
   * the partner against which to authenticate with the login information
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @param partner the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter partner is null
   */
  public void setPartner(org.phoenixbioinformatics.api.bs.api.BsPartner partner) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setPartner(partner == null ? null : partner.toDto());
  }

  /**
   * <p>
   * the party that owns a login
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @return a org.phoenixbioinformatics.api.bs.api.BsParty party
   */
  public org.phoenixbioinformatics.api.bs.api.BsParty getParty() {
    // Return 4
    return new org.phoenixbioinformatics.api.bs.api.BsParty(dto.getParty());
  }

  /**
   * <p>
   * Set the party.
   * </p>
   * <p>
   * the party that owns a login
   * </p>
   * <p>
   * Added by AddToOneAssociationRequiredObjectProperties
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: true</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @param party the associated business object
   * @throws com.poesys.db.dto.DtoStatusException when the system can't set
   *                 the data-access status to CHANGED
   * @throws com.poesys.db.InvalidParametersException when the property is
   *                 required but the input parameter party is null
   */
  public void setParty(org.phoenixbioinformatics.api.bs.api.BsParty party) 
      throws com.poesys.db.dto.DtoStatusException , com.poesys.db.InvalidParametersException {
    dto.setParty(party == null ? null : party.toDto());
  }

  /**
   * <p>
   * Foreign key used by setter to query associated object
   * </p>
   * <p>
   * Added by AddNaturalKeyProperties + AddToOneAssociationAttributeProperties as data member
   * </p>
   * <p>
   * <ul>
   * <li>Property is read/write: false</li>
   * <li>Property is defined in the data-access object Login</li>
   * </ul>
   * </p>
   * @return a java.lang.String partnerId
   */
  public java.lang.String getPartnerId() {
    // Return 3
    return dto.getPartnerId();
  }
}