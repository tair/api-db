/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDbDto.vsl

package org.phoenixbioinformatics.api.db.api;


import com.poesys.db.pk.IPrimaryKey;

import com.poesys.db.dto.AbstractDto;
import com.poesys.db.dto.DtoStatusException;


/**
 * <p>
 * A data-access layer data-transfer object for the SubscriptionDescription. This class
 * is an abstract class that contains AndroMDA generated code; change nothing
 * in this class. Instead, override any methods in the concrete subclass
 * generated in the same package. AndroMDA will overwrite this class each time
 * you run it but will never overwrite the concrete subclass.
 * </p>
 * <p>
 * A collection of descriptive texts to display for a particular kind of
 * subscription; a partner may have any number of such texts to display in
 * different named contexts
 * </p>
 * <p>
 * Stereotypes:
 * </p>
 * <ul>
 *     <li>CompositeKey</li>
 *     <li>Persistent</li>
 * </ul>
 * <p>
 * Class is read/write: true
 * </p>
 *
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractSubscriptionDescription extends AbstractDto implements ISubscriptionDescription {
  /** Default serial version UID for the Serializable DTO */
  private static final long serialVersionUID = 1L;
  // Setter strategy nested classes for single-object associations
  
  /**
   * Nested class that manages the partner association data
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   *
   * @author Poesys/DB Cartridge
   */
  private class QueryPartnerSetter extends com.poesys.db.dto.AbstractObjectSetter<org.phoenixbioinformatics.api.db.api.IPartner> {
    private static final long serialVersionUID = 1L;
    
    /**
     * Create a QueryPartnerSetter object.
     */
    public QueryPartnerSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Partner.class.getName();
    }

    @Override
    protected IPrimaryKey getKey() {
      return partnerKey;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.IPartner> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryPartner();
    }

    @Override
    protected void set(org.phoenixbioinformatics.api.db.api.IPartner dto) {
      // No status change, this is just filling in the object data.
      partner = dto;
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated partner is not null
      return partner != null;
    }
  }

  /**
   * Insert setter for inserting nested object property partner.
   */
  private class InsertPartnerSetter 
      extends com.poesys.db.dto.AbstractInsertSetter {
    // Property partner source: AddToOneAssociationRequiredObjectProperties
    private static final long serialVersionUID = 1L;

    /**
     * Create an InsertPartnerSetter object.
     */
    public InsertPartnerSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Partner.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.ArrayList<com.poesys.db.dto.IDbDto> array =
        new java.util.ArrayList<com.poesys.db.dto.IDbDto>(1);
      array.add(partner);
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = array;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      // Key type: NaturalKey
      return true;
    }
  }

  /**
   * Setter for processing added partner, updated partner, and 
   * deleted partner. 
   */
   
  private class UpdatePartnerSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObject<org.phoenixbioinformatics.api.db.api.IPartner> {
    private static final long serialVersionUID = 1L;

    /**
     * Create an UpdatePartnerSetter object.
     */
    public UpdatePartnerSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, org.phoenixbioinformatics.api.db.api.IPartner dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
        // partner source: AddToOneAssociationRequiredObjectProperties
        // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IPartner> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Partner.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdate<org.phoenixbioinformatics.api.db.api.IPartner> updater = 
        factory.getUpdate(new org.phoenixbioinformatics.api.db.api.sql.UpdatePartner());

      // Update the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dto);
      // Complete the update by setting the DTO to EXISTING status.
      dto.setExisting();
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, org.phoenixbioinformatics.api.db.api.IPartner dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IPartner> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Partner.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDelete<org.phoenixbioinformatics.api.db.api.IPartner> dao = 
        factory.getDelete(new org.phoenixbioinformatics.api.db.api.sql.DeletePartner());
      dao.delete(connection, dto);
    }

    @Override
    protected void doNew(java.sql.Connection connection, org.phoenixbioinformatics.api.db.api.IPartner dto)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.IPartner> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.Partner.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsert<org.phoenixbioinformatics.api.db.api.IPartner> inserter =
        factory.getInsert(new org.phoenixbioinformatics.api.db.api.sql.InsertPartner(), createKey());


      // Insert the superclass objects from the root down. Suppress nested
      // inserts for the superclasses, wait until the concrete class. Also set 
      // pre-insert suppression off to have the root insert linked, to-one class
      // objects.
      dto.setSuppressNestedInserts(true);
      dto.setSuppressNestedPreInserts(false);

      // Suppress inserts in concrete class.
      dto.setSuppressNestedPreInserts(true);
      
      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      dto.setSuppressNestedInserts(false);
      inserter.setLeaf(true);
      inserter.insert(connection, dto);
    }

    @Override
    protected org.phoenixbioinformatics.api.db.api.IPartner getDto() {
      return partner;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.Partner.class.getName();
    }

    @Override
    protected boolean createKey() {
      // Key type: NaturalKey
      return true;
    }
  }

  /**
   * Foreign key object used by QueryPartnerSetter nested class to query object
   */
  private IPrimaryKey partnerKey;
  
  /**
   * Set the foreign key partnerKey. This has package access to enable
   * the subsystem factory getData method to call this method to set the key
   * by creating it from the queried result set.
   *
   * @param partnerKey the foreign key
   */
  void setPartnerKey(IPrimaryKey partnerKey) {
    this.partnerKey = partnerKey;
  }

  // Setter strategy nested classes for multiple-object associations

  /**
   * Query setter for querying nested items
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QueryItemsBySubscriptionDescription
   */
  private class QueryItemsSetter 
      extends com.poesys.db.dto.AbstractListSetter<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem, ISubscriptionDescription, java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem>> {
    private static final long serialVersionUID = 1L;
    private static final int FETCH_SIZE = 10;

    /**
     * Create a QueryItemsSetter object.
     */
    public QueryItemsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionDescriptionItem.class.getName();
    }

    @Override
    protected int getFetchSize() {
      return FETCH_SIZE;
    }

    @Override
    protected ISubscriptionDescription getParametersDto() {
      return AbstractSubscriptionDescription.this;
    }

    @Override
    protected com.poesys.db.dao.query.IParameterizedQuerySql<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem, ISubscriptionDescription> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QueryItemsBySubscriptionDescription();
    }

    @Override
    protected void set(java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> list) {
      // No status change; this is just filling in the object data.
      items = list;
      // Add the primary keys to the serialized key list if there are any.
      if (items != null) {
        for (com.poesys.db.dto.IDbDto object : items) {
          itemsKeys.add(object.getPrimaryKey());
        }
      }
    }

    @Override
    public boolean isSet() {
      // Object is set if the associated items list is not null
      return items != null;
    }
  }

  /**
   * Read-Object setter for de-serializing nested items list
   *
   * Source: AddToManyChildCollectionProperties
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionDescriptionItem
   */
  private class ReadItemsSetter 
      extends com.poesys.db.dto.AbstractListReadSetter<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> {
    private static final long serialVersionUID = 1L;

    /**
     * Create a ReadItemsSetter object to read the items list.
     */
    public ReadItemsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionDescriptionItem.class.getName();
    }

    @Override
    protected java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> getObjectList() {
      return items;
    }

    @Override
    protected java.util.List<IPrimaryKey> getPrimaryKeys() {
      return itemsKeys;
    }

    @Override
    protected com.poesys.db.dao.query.IKeyQuerySql<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> getSql() {
      return new org.phoenixbioinformatics.api.db.api.sql.QuerySubscriptionDescriptionItem();
    }

    @Override
    protected void set(java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> list) {
      items = list;
    }
  }

  /**
   * Insert setter for inserting nested to-many association items.
   *
   * @see org.phoenixbioinformatics.api.db.api.sql.InsertSubscriptionDescriptionItem
   */
  private class InsertItemsSetter extends com.poesys.db.dto.AbstractInsertSetter {
    private static final long serialVersionUID = 1L;
    
    // Association items source: AddToManyChildCollectionProperties

    /**
     * Create an InsertItemsSetter object.
     */
    public InsertItemsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionDescriptionItem.class.getName();
    }

    @SuppressWarnings("unchecked")
    @Override
    protected java.util.Collection<com.poesys.db.dto.IDbDto> getDtos() {
      java.util.Collection<? extends com.poesys.db.dto.IDbDto> dtos = items;
      return (java.util.Collection<com.poesys.db.dto.IDbDto>)dtos;
    }

    @Override
    protected boolean createKey() {
      return true;
    }
  }

  /**
   * Setter for processing added items and updated items.
   * Deleted items are deleted in the database cascade delete.
   */
   
  private class UpdateItemsSetter 
      extends com.poesys.db.dto.AbstractProcessNestedObjects<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem, java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem>> {
    private static final long serialVersionUID = 1L;
    private static final int BATCH_SIZE = 100;

    /**
     * Create an UpdateItemsSetter object.
     */
    public UpdateItemsSetter() {
      super("org.phoenixbioinformatics.api.db.api", 2147483647);
    }

    @Override
    protected void doChanged(java.sql.Connection connection, java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      // items source: AddToManyChildCollectionProperties
      // Immutable: false
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);

      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionDescriptionItem.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.update.IUpdateBatch<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> updater =
        factory.getUpdateBatch(new org.phoenixbioinformatics.api.db.api.sql.UpdateSubscriptionDescriptionItem());

      // Update the object of the leaf class.
      updater.setLeaf(true);
      updater.update(connection, dtos, dtos.size() / 2);
      // Complete the update by setting the DTOs to EXISTING status.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        if (dto.getStatus() == Status.CHANGED) {
          dto.setExisting();
        }
      }
    }
    
    @Override
    protected void doDeleted(java.sql.Connection connection, java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);
      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionDescriptionItem.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.delete.IDeleteBatch<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> dao = 
        factory.getDeleteBatch(new org.phoenixbioinformatics.api.db.api.sql.DeleteSubscriptionDescriptionItem());
      dao.delete(connection, dtos, BATCH_SIZE);
    }

    @Override
    protected void doNew(java.sql.Connection connection, java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> dtos)
        throws java.sql.SQLException, com.poesys.db.BatchException, com.poesys.db.ConstraintViolationException,
        com.poesys.db.dto.DtoStatusException {
      com.poesys.db.dao.IDaoManager manager = 
        com.poesys.db.dao.DaoManagerFactory.getManager(subsystem);


      com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> factory = 
        manager.getFactory(org.phoenixbioinformatics.api.db.api.SubscriptionDescriptionItem.class.getName(), subsystem, 2147483647);
      com.poesys.db.dao.insert.IInsertBatch<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> inserter =
        factory.getInsertBatch(new org.phoenixbioinformatics.api.db.api.sql.InsertSubscriptionDescriptionItem());


      // Insert the object of the current class after enabling nested inserts,
      // which will allow connecting up linked objects to any of the inserted
      // classes.
      for (com.poesys.db.dto.IDbDto dto : dtos) {
        dto.setSuppressNestedInserts(false);
      }
      inserter.setLeaf(true);
      inserter.insert(connection, dtos, dtos.size() / 2);
    }

    @Override
    protected java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> getDtos() {
      return items;
    }
    
    @Override
    protected String getClassName() {
      return org.phoenixbioinformatics.api.db.api.SubscriptionDescriptionItem.class.getName();
    }
  }

  /**
   * Add org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem object to items collection.
   * 
   * @param object the org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem object
   */
  public void addItemsSubscriptionDescriptionItem(org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem object) {
    if (items == null) {
      // Association not yet created, create it.
      items = new java.util.concurrent.CopyOnWriteArrayList<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem>();
    }
    items.add(object);
    // Add the primary key to the primary key array.
    itemsKeys.add(object.getPrimaryKey());
  }
   
  /**
   * Create an empty SubscriptionDescription for use in building a new object. The 
   * concrete subclass must call this constructor.
   */
  public AbstractSubscriptionDescription() {
    abstractClass = false;
    createInserters();

    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }

    // Add the setters for the partner property.
    querySetters.add(new QueryPartnerSetter());
    preSetters.add(new InsertPartnerSetter());
    postSetters.add(new UpdatePartnerSetter());
    
    // Add the many-to-many collection setters for the items property.
    querySetters.add(new QueryItemsSetter());
    readObjectSetters.add(new ReadItemsSetter());
    insertSetters.add(new InsertItemsSetter());
    postSetters.add(new UpdateItemsSetter());
  }

  /**
   * Create a SubscriptionDescription. The concrete subclass must call this constructor.
   *
   * @param key the primary key of the SubscriptionDescription
   * @param partnerId composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * @param descriptionType the type of description:
Default
Individual
Institution
Commercial
   * @param header the header text for the section display
   */
  public AbstractSubscriptionDescription(IPrimaryKey key, java.lang.String partnerId, java.lang.String descriptionType, java.lang.String header) {
    this.key = key;

    this.partnerId = partnerId;

    this.descriptionType = descriptionType;

    if (descriptionType == null) {
      throw new com.poesys.db.InvalidParametersException("descriptionType is required for " + key.getValueList());
    }
    
    this.header = header;

    if (header == null) {
      throw new com.poesys.db.InvalidParametersException("header is required for " + key.getValueList());
    }
    
    // Setter arrays (create if null)
    if (querySetters == null) {
      querySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertQuerySetters == null) {
      insertQuerySetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (insertSetters == null) {
      insertSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (preSetters == null) {
      preSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (postSetters == null) {
      postSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    if (readObjectSetters == null) {
      readObjectSetters = new java.util.concurrent.CopyOnWriteArrayList<com.poesys.db.dto.ISet>();
    }
    
    // Add the setters for the partner property.
    querySetters.add(new QueryPartnerSetter());
    // Set the object property primary key with a factory method.
    // TODO: fix problem with foreign keys/associated keys VND-168
    // partnerKey = org.phoenixbioinformatics.api.db.api.ApiFactory.getPartnerPrimaryKey();
    insertSetters.add(new InsertPartnerSetter());
    preSetters.add(new InsertPartnerSetter());
    postSetters.add(new UpdatePartnerSetter());
    
    
    // Add the many-to-many collection setters for the items property.
    querySetters.add(new QueryItemsSetter());
    readObjectSetters.add(new ReadItemsSetter());
    insertSetters.add(new InsertItemsSetter());
    postSetters.add(new UpdateItemsSetter());
    abstractClass = false;
    createInserters();
  }

  @Override
  public boolean equals(Object arg0) {
    ISubscriptionDescription other = (ISubscriptionDescription)arg0;
    return other.getPrimaryKey().equals(key);
  }

  @Override
  public int hashCode() {
    return key.hashCode();
  }

  @Override
  public int compareTo(com.poesys.db.dto.IDbDto o) {
    ISubscriptionDescription other = (ISubscriptionDescription)o;
    // Sort on the key. Same semantics as equals and hashCode().
    return other.getPrimaryKey().compareTo(key);
  }
  
  @Override
  public String getSubsystem() {
    return "org.phoenixbioinformatics.api.db.api";
  }

  @Override
  public void markChildrenDeleted() throws DtoStatusException {
    // Only process deletes if child exists.
    if (items != null) {
      for (com.poesys.db.dto.IDbDto dto : items) {
        dto.cascadeDelete();
      }
    }
  }

  @Override
  public IPrimaryKey getPrimaryKey() {
    return key;
  }
  
  @Override
  public java.sql.Connection getConnection() throws java.sql.SQLException {
    java.sql.Connection connection = null;
    
	/* 
	 * The resource bundle for the DTO's subsystem contains the suffix that
	 * distinguishes multiple versions of the subsystem in the database.properties
	 * file, such as "prod" or "test". Most database.properties files have only
	 * one implementation and use external facilities to switch between the
	 * databases (JNDI, for example, or producing different database.properties
	 * files in different setups). Use the subsystem resource bundle to get the
	 * suffix, then use the full subsystem name to get a connection factory for
	 * the DTO's subsystem, then use that factory to get a JDBC connection.
	 */
	java.util.ResourceBundle rb = 
	  java.util.ResourceBundle.getBundle("org.phoenixbioinformatics.api.db.api");
    String subsystem =
      "org.phoenixbioinformatics.api.db.api"
          + (rb.getString("suffix") == null
             || rb.getString("suffix").length() == 0 ? ""
              : "." + rb.getString("suffix"));
	  
	try {
	  connection = 
	    com.poesys.db.connection.ConnectionFactoryFactory.getInstance(subsystem).getConnection();
	} catch (com.poesys.db.InvalidParametersException e) {
	  throw new java.sql.SQLException(e.getMessage());
	} catch (java.io.IOException e) {
	  throw new java.sql.SQLException(e.getMessage());
	}
	
	return connection;
  }
  /**
   * Nested property partnerId
   *
   * <p>
   * Composite super-key attribute that uniquely identifies child combined with child sub-key and any other parent super-keys
   * </p>
   *
   * Added by AddNaturalKeyProperties + AddParentKeyAttributes
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String partnerId;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddNaturalKeyProperties + AddParentKeyAttributes
   * 
   * @return a java.lang.String
   */

  public java.lang.String getPartnerId() {
    return partnerId;
  }

  /**
   * Clear the partnerId data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPartnerId() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property descriptionType
   *
   * <p>
   * the type of description:
   * </p>
   * <p>
   * Default
   * </p>
   * <p>
   * Individual
   * </p>
   * <p>
   * Institution
   * </p>
   * <p>
   * Commercial
   * </p>
   *
   * Added by AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: false
   * Property is lazy: false
   */
  private java.lang.String descriptionType;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddExplicitSubKeyProperties + addNaturalSubkeyOnClass
   * 
   * @return a java.lang.String
   */

  public java.lang.String getDescriptionType() {
    return descriptionType;
  }

  /**
   * Clear the descriptionType data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearDescriptionType() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }
  /**
   * Nested property header
   *
   * <p>
   * the header text for the section display
   * </p>
   *
   * Added by AddLocalAttributeProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private java.lang.String header;
  
  /**
   * Get an object of java.lang.String.
   *
   * Source: AddLocalAttributeProperties
   * 
   * @return a java.lang.String
   */

  public java.lang.String getHeader() {
    return header;
  }

  /**
   * Clear the header data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearHeader() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the header.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the header text for the section display
   * </p>
   *
   * @param header the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input header is null
   */
  public void setHeader(java.lang.String header)
      throws com.poesys.db.InvalidParametersException {
    if (header == null) {
      throw new com.poesys.db.InvalidParametersException("header is required");
    }
    
    this.header = header;
    setChanged();
  }
  /**
   * Nested property partner
   *
   * <p>
   * the partner to which the subscription description applies
   * </p>
   *
   * Added by AddToOneAssociationRequiredObjectProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  private org.phoenixbioinformatics.api.db.api.IPartner partner;
  
  /**
   * Get an object of org.phoenixbioinformatics.api.db.api.IPartner.
   *
   * Source: AddToOneAssociationRequiredObjectProperties
   * 
   * @return a org.phoenixbioinformatics.api.db.api.IPartner
   */

  public org.phoenixbioinformatics.api.db.api.IPartner getPartner() {
    return partner;
  }

  /**
   * Clear the partner data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearPartner() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the partner.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the partner to which the subscription description applies
   * </p>
   *
   * @param partner the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input partner is null
   */
  public void setPartner(org.phoenixbioinformatics.api.db.api.IPartner partner)
      throws com.poesys.db.InvalidParametersException {
    if (partner == null) {
      throw new com.poesys.db.InvalidParametersException("partner is required");
    }
    
    this.partner = partner;
    // Set the IPrimaryKey cache lookup key.
    this.partnerKey = partner.getPrimaryKey();
    setChanged();
  }
  /**
   * Nested property items
   *
   * <p>
   * the set of items within the description
   * </p>
   *
   * Added by AddToManyChildCollectionProperties
   * Class is read/write: true
   * Class is immutable: false
   * Property is read/write: true
   * Property is lazy: false
   */
  // Doesn't serialize; package access allows proxy to set on readObject()
  transient java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> items;
  // Ordered list of keys of the objects in the items list
  java.util.List<com.poesys.db.pk.IPrimaryKey> itemsKeys = 
    new java.util.ArrayList<com.poesys.db.pk.IPrimaryKey>();
  
  /**
   * Get a list of org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem.
   *
   * Source: AddToManyChildCollectionProperties
   * 
   * @return a java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem>
   */

  public java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> getItems() {
    return items;
  }

  /**
   * Clear the items data member; override in proxy if lazily loaded,
   * otherwise this method does nothing.
   */
  public void clearItems() {
    // Override in proxy if lazily loaded; otherwise does nothing
  }

  /**
   * <p>
   * Set the items.
   * </p>
   * <ul>
   * <li>Read/Write DTO: true</li>
   * <li>Immutable DTO: false</li>
   * <li>Read/Write property: true</li>
   * <li>Immutable property: false</li>
   * <li>Lazy property: false (if true, proxy calls this method)</li>
   * </ul>
   * <p>
   * the set of items within the description
   * </p>
   *
   * @param items the value with which to set the property
   * @throws com.poesys.db.InvalidParametersException when the input items is null
   */
  public void setItems(java.util.List<org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem> items)
      throws com.poesys.db.InvalidParametersException {
    if (items == null) {
      throw new com.poesys.db.InvalidParametersException("items is required");
    }
    
    this.items = items;
    // Add the primary keys of the new collection to the serialized key list.
    itemsKeys.clear();
    if (items != null) {
      for (com.poesys.db.dto.IDbDto object : items) {
        itemsKeys.add(object.getPrimaryKey());
      }
    }
    setChanged();
  }

  @Override
  public void update(com.poesys.db.dto.ISubject subject,
                     com.poesys.db.dao.DataEvent event)
      throws com.poesys.db.dto.DtoStatusException {

    // Clean up items.
    if (subject != null && subject instanceof org.phoenixbioinformatics.api.db.api.ISubscriptionDescriptionItem && 
        event == com.poesys.db.dao.DataEvent.DELETE &&
        items != null) {
      // Delete to-many items child from collection
      items.remove(subject);
      subject.detach(this, com.poesys.db.dao.DataEvent.MARKED_DELETED);
      subject.detach(this, com.poesys.db.dao.DataEvent.DELETE);
    }
  }

  /**
   * Create the inserters for the SubscriptionDescription and its superclasses.
   */
  private void createInserters() {
    com.poesys.db.dao.IDaoManager manager =
      com.poesys.db.dao.DaoManagerFactory.getManager(getSubsystem());
    final com.poesys.db.dao.IDaoFactory<org.phoenixbioinformatics.api.db.api.ISubscriptionDescription> subscriptionDescriptionFactory =
      manager.getFactory("org.phoenixbioinformatics.api.db.api.SubscriptionDescription",
                         getSubsystem(),
                         2147483647);
    com.poesys.db.dao.insert.IInsertSql<ISubscriptionDescription> sql =
      new org.phoenixbioinformatics.api.db.api.sql.InsertSubscriptionDescription();
    com.poesys.db.dao.insert.IInsert<ISubscriptionDescription> inserter =
      subscriptionDescriptionFactory.getInsert(sql, true);
    inserters.add(inserter);
  }
}