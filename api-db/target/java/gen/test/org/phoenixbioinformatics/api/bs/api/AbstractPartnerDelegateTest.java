/**
 * Copyright 2011 Carnegie Institution for Science. All rights reserved.
 */
// Generated by AndroMDA Poesys/DB cartridge: DO NOT EDIT DIRECTLY.
// Template: AbstractDelegateTest.vsl

package org.phoenixbioinformatics.api.bs.api;


import static org.junit.Assert.assertTrue;
import org.junit.After;

import com.poesys.db.connection.ConnectionException;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

import org.apache.log4j.Logger;
import org.junit.Before;
import org.junit.Test;

import com.poesys.bs.delegate.DelegateException;
import com.poesys.db.InvalidParametersException;
import com.poesys.db.dao.DaoManagerFactory;
import com.poesys.db.dao.IDaoManager;


/**
 * <p>
 * Test the PartnerDelegate class.
 * </p>
 * <p>
 * Note that all the test cases defined here run independently, because JUnit
 * does not guarantee the execution order of the test cases in any way.
 * </p>
 * 
 * @author Poesys/DB Cartridge
 */
public abstract class AbstractPartnerDelegateTest {
  /** Define a class logger. */
  protected static Logger logger = Logger.getLogger(AbstractPartnerDelegateTest.class);
  /** Subsystem name in database.properties file */
  protected String subsystem = "org.phoenixbioinformatics.api.db.api";
  /** Boolean saved off for later comparison in update tests */
  protected Boolean originalBooleanValue = null;
  /** Delegate created at class level for sharing between methods */
  protected PartnerDelegate delegate = null;

  /**
   * Set up the test by creating the class under test (CUT).
   * 
   * @throws InvalidParametersException when an invalid parameter prevents the
   *       creation of an object
   * @throws DelegateException when a problem occurs during object creation
   */
  @Before
  public void setUp() {
    delegate = ApiDelegateFactory.getPartnerDelegate();
    // Clear any existing caches of objects using the memory manager set in
    // the creation of the delegate.
    clearCaches();
    assertTrue("No delegate created", delegate != null);
  }
  
  /**
   * Helper method to clear caches for any objects used in the test
   */
  protected void clearCaches() {
    // Primary class PartnerProxy cache
    IDaoManager manager = DaoManagerFactory.getManager(getSubsystem());
    if (manager != null) {
      manager.clearCache(org.phoenixbioinformatics.api.db.api.PartnerProxy.class.getName());
    }

    // Clear nested object caches
    
    // Child PartnerPattern cache
    IDaoManager PartnerPatternManager = DaoManagerFactory.getManager("org.phoenixbioinformatics.api.db.api");
    if (PartnerPatternManager != null) {
      PartnerPatternManager.clearCache(org.phoenixbioinformatics.api.db.api.PartnerPattern.class.getName());
    }
    
    // Child SubscriptionTerm cache
    IDaoManager SubscriptionTermManager = DaoManagerFactory.getManager("org.phoenixbioinformatics.api.db.api");
    if (SubscriptionTermManager != null) {
      SubscriptionTermManager.clearCache(org.phoenixbioinformatics.api.db.api.SubscriptionTerm.class.getName());
    }
    
    // Child SubscriptionDescriptionItem cache
    IDaoManager SubscriptionDescriptionItemManager = DaoManagerFactory.getManager("org.phoenixbioinformatics.api.db.api");
    if (SubscriptionDescriptionItemManager != null) {
      SubscriptionDescriptionItemManager.clearCache(org.phoenixbioinformatics.api.db.api.SubscriptionDescriptionItem.class.getName());
    }
    
    // Child SubscriptionDescription cache
    IDaoManager SubscriptionDescriptionManager = DaoManagerFactory.getManager("org.phoenixbioinformatics.api.db.api");
    if (SubscriptionDescriptionManager != null) {
      SubscriptionDescriptionManager.clearCache(org.phoenixbioinformatics.api.db.api.SubscriptionDescription.class.getName());
    }
    
    // Child IpCount cache
    IDaoManager IpCountManager = DaoManagerFactory.getManager("org.phoenixbioinformatics.api.db.api");
    if (IpCountManager != null) {
      IpCountManager.clearCache(org.phoenixbioinformatics.api.db.api.IpCount.class.getName());
    }
    
    // Child LimitValue cache
    IDaoManager LimitValueManager = DaoManagerFactory.getManager("org.phoenixbioinformatics.api.db.api");
    if (LimitValueManager != null) {
      LimitValueManager.clearCache(org.phoenixbioinformatics.api.db.api.LimitValue.class.getName());
    }
    
    // Child AccessRule Proxy cache
    IDaoManager AccessRuleManager = DaoManagerFactory.getManager("org.phoenixbioinformatics.api.db.api");
    if (AccessRuleManager != null) {
      AccessRuleManager.clearCache(org.phoenixbioinformatics.api.db.api.AccessRule.class.getName());
    }
    
    // Child SubscriptionTransaction cache
    IDaoManager SubscriptionTransactionManager = DaoManagerFactory.getManager("org.phoenixbioinformatics.api.db.api");
    if (SubscriptionTransactionManager != null) {
      SubscriptionTransactionManager.clearCache(org.phoenixbioinformatics.api.db.api.SubscriptionTransaction.class.getName());
    }
    
    // Child Subscription Proxy cache
    IDaoManager SubscriptionManager = DaoManagerFactory.getManager("org.phoenixbioinformatics.api.db.api");
    if (SubscriptionManager != null) {
      SubscriptionManager.clearCache(org.phoenixbioinformatics.api.db.api.Subscription.class.getName());
    }
  }

  /**
   * Create some number of new Partner objects and return them in a list.  
   * This is a helper method for writable children DTOs.
   * 
   * @param count the number of objects to create
   * @return the stored object
   * @throws InvalidParametersException when an invalid parameter prevents the
   *       creation of an object
   * @throws DelegateException when a problem occurs during object creation
   */
  protected List<org.phoenixbioinformatics.api.bs.api.BsPartner> createApiPartner(int count) 
      throws DelegateException, InvalidParametersException {
    List<org.phoenixbioinformatics.api.bs.api.BsPartner> objects = 
      new CopyOnWriteArrayList<org.phoenixbioinformatics.api.bs.api.BsPartner>();
    @SuppressWarnings("unused")
    java.util.Random r = new java.util.Random();
    
    for (int i = 0; i < count; i++) {
      java.lang.String partnerId = 
        com.poesys.cartridges.db.utilities.StringUtilities.generateString(500);
      java.lang.String name = 
        com.poesys.cartridges.db.utilities.StringUtilities.generateString(500);
      java.lang.String logoUri = 
        com.poesys.cartridges.db.utilities.StringUtilities.generateString(200);
      java.lang.String termOfServiceUri = 
        com.poesys.cartridges.db.utilities.StringUtilities.generateString(200);

      // Create the object.
      BsPartner object = null;
      try {
        object = delegate.createPartner(partnerId, name, logoUri, termOfServiceUri);
      } catch (InvalidParametersException e) {
        Object[] args = e.getParameters().toArray();
        String message = com.poesys.db.Message.getMessage(e.getMessage(), args);
        throw new RuntimeException(message, e);
      } catch (DelegateException e) {
        throw new RuntimeException(e.getMessage(), e);
      }
        
      objects.add(object);
    }
    
    return objects;
  }

  /**
   * <p>
   * Create some number of new PartnerPattern objects and return them in a list.  
   * This is a helper method that the concrete subclass needs to implement. It
   * returns a child object.
   * </p>
   * <ul>
   * <li>Create the list to return as a CopyOnWriteArrayList&lt;BsPartnerPattern&gt;</li>
   * <li>Generate any required objects linked to this object other than the 
   * parent by calling the appropriate delegate's create method</li>
   * <li>Create the sub-key as an integer for ordered subkeys or a random string
   * for unordered subkeys</li>
   * <li>Generate random values for any primitive data members</li>
   * <li>Create the BsPartnerPattern by calling delegate.createBsPartnerPattern</li>
   * <li>Add the new child to the list</li>
   * </ul>
   * <p>
   * Key type: CompositeKey
   * </p>
   * @param parent the parent Partner
   * @param count the number of objects to create
   * @return the stored object
   * @throws DelegateException when there is a problem creating an object
   * @throws InvalidParametersException when there is some problem with the 
   *                                    input parameters for creating an object
   */
  abstract protected List<org.phoenixbioinformatics.api.bs.api.BsPartnerPattern> createApiPartnerPattern(org.phoenixbioinformatics.api.db.api.IPartner parent, 
                                                       int count) 
      throws DelegateException, InvalidParametersException; // create 2
      
  /**
   * <p>
   * Create some number of new SubscriptionTerm objects and return them in a list.  
   * This is a helper method that the concrete subclass needs to implement. It
   * returns a child object.
   * </p>
   * <ul>
   * <li>Create the list to return as a CopyOnWriteArrayList&lt;BsSubscriptionTerm&gt;</li>
   * <li>Generate any required objects linked to this object other than the 
   * parent by calling the appropriate delegate's create method</li>
   * <li>Create the sub-key as an integer for ordered subkeys or a random string
   * for unordered subkeys</li>
   * <li>Generate random values for any primitive data members</li>
   * <li>Create the BsSubscriptionTerm by calling delegate.createBsSubscriptionTerm</li>
   * <li>Add the new child to the list</li>
   * </ul>
   * <p>
   * Key type: CompositeKey
   * </p>
   * @param parent the parent Partner
   * @param count the number of objects to create
   * @return the stored object
   * @throws DelegateException when there is a problem creating an object
   * @throws InvalidParametersException when there is some problem with the 
   *                                    input parameters for creating an object
   */
  abstract protected List<org.phoenixbioinformatics.api.bs.api.BsSubscriptionTerm> createApiSubscriptionTerm(org.phoenixbioinformatics.api.db.api.IPartner parent, 
                                                       int count) 
      throws DelegateException, InvalidParametersException; // create 2
      
  /**
   * <p>
   * Create some number of new SubscriptionDescriptionItem objects and return them in a list.  
   * This is a helper method that the concrete subclass needs to implement. It
   * returns a child object.
   * </p>
   * <ul>
   * <li>Create the list to return as a CopyOnWriteArrayList&lt;BsSubscriptionDescriptionItem&gt;</li>
   * <li>Generate any required objects linked to this object other than the 
   * parent by calling the appropriate delegate's create method</li>
   * <li>Create the sub-key as an integer for ordered subkeys or a random string
   * for unordered subkeys</li>
   * <li>Generate random values for any primitive data members</li>
   * <li>Create the BsSubscriptionDescriptionItem by calling delegate.createBsSubscriptionDescriptionItem</li>
   * <li>Add the new child to the list</li>
   * </ul>
   * <p>
   * Key type: CompositeKey
   * </p>
   * @param parent the parent Partner
   * @param count the number of objects to create
   * @return the stored object
   * @throws DelegateException when there is a problem creating an object
   * @throws InvalidParametersException when there is some problem with the 
   *                                    input parameters for creating an object
   */
  abstract protected List<org.phoenixbioinformatics.api.bs.api.BsSubscriptionDescriptionItem> createApiSubscriptionDescriptionItem(org.phoenixbioinformatics.api.db.api.IPartner parent, 
                                                       int count) 
      throws DelegateException, InvalidParametersException; // create 2
      
  /**
   * <p>
   * Create some number of new SubscriptionDescription objects and return them in a list.  
   * This is a helper method that the concrete subclass needs to implement. It
   * returns a child object.
   * </p>
   * <ul>
   * <li>Create the list to return as a CopyOnWriteArrayList&lt;BsSubscriptionDescription&gt;</li>
   * <li>Generate any required objects linked to this object other than the 
   * parent by calling the appropriate delegate's create method</li>
   * <li>Create the sub-key as an integer for ordered subkeys or a random string
   * for unordered subkeys</li>
   * <li>Generate random values for any primitive data members</li>
   * <li>Create the BsSubscriptionDescription by calling delegate.createBsSubscriptionDescription</li>
   * <li>Add the new child to the list</li>
   * </ul>
   * <p>
   * Key type: CompositeKey
   * </p>
   * @param parent the parent Partner
   * @param count the number of objects to create
   * @return the stored object
   * @throws DelegateException when there is a problem creating an object
   * @throws InvalidParametersException when there is some problem with the 
   *                                    input parameters for creating an object
   */
  abstract protected List<org.phoenixbioinformatics.api.bs.api.BsSubscriptionDescription> createApiSubscriptionDescription(org.phoenixbioinformatics.api.db.api.IPartner parent, 
                                                       int count) 
      throws DelegateException, InvalidParametersException; // create 2
      
  /**
   * <p>
   * Create some number of new IpCount objects and return them in a list.  
   * This is a helper method that the concrete subclass needs to implement. It
   * returns a child object.
   * </p>
   * <ul>
   * <li>Create the list to return as a CopyOnWriteArrayList&lt;BsIpCount&gt;</li>
   * <li>Generate any required objects linked to this object other than the 
   * parent by calling the appropriate delegate's create method</li>
   * <li>Create the sub-key as an integer for ordered subkeys or a random string
   * for unordered subkeys</li>
   * <li>Generate random values for any primitive data members</li>
   * <li>Create the BsIpCount by calling delegate.createBsIpCount</li>
   * <li>Add the new child to the list</li>
   * </ul>
   * <p>
   * Key type: CompositeKey
   * </p>
   * @param parent the parent Partner
   * @param count the number of objects to create
   * @return the stored object
   * @throws DelegateException when there is a problem creating an object
   * @throws InvalidParametersException when there is some problem with the 
   *                                    input parameters for creating an object
   */
  abstract protected List<org.phoenixbioinformatics.api.bs.api.BsIpCount> createApiIpCount(org.phoenixbioinformatics.api.db.api.IPartner parent, 
                                                       int count) 
      throws DelegateException, InvalidParametersException; // create 2
      
  /**
   * <p>
   * Create some number of new LimitValue objects and return them in a list.  
   * This is a helper method that the concrete subclass needs to implement. It
   * returns a child object.
   * </p>
   * <ul>
   * <li>Create the list to return as a CopyOnWriteArrayList&lt;BsLimitValue&gt;</li>
   * <li>Generate any required objects linked to this object other than the 
   * parent by calling the appropriate delegate's create method</li>
   * <li>Create the sub-key as an integer for ordered subkeys or a random string
   * for unordered subkeys</li>
   * <li>Generate random values for any primitive data members</li>
   * <li>Create the BsLimitValue by calling delegate.createBsLimitValue</li>
   * <li>Add the new child to the list</li>
   * </ul>
   * <p>
   * Key type: CompositeKey
   * </p>
   * @param parent the parent Partner
   * @param count the number of objects to create
   * @return the stored object
   * @throws DelegateException when there is a problem creating an object
   * @throws InvalidParametersException when there is some problem with the 
   *                                    input parameters for creating an object
   */
  abstract protected List<org.phoenixbioinformatics.api.bs.api.BsLimitValue> createApiLimitValue(org.phoenixbioinformatics.api.db.api.IPartner parent, 
                                                       int count) 
      throws DelegateException, InvalidParametersException; // create 2
      
  /**
   * <p>
   * Create some number of new AccessRule objects and return them in a list.  
   * This is a helper method that the concrete subclass needs to implement. It
   * returns a child object.
   * </p>
   * <ul>
   * <li>Create the list to return as a CopyOnWriteArrayList&lt;BsAccessRule&gt;</li>
   * <li>Generate any required objects linked to this object other than the 
   * associated objects by calling the appropriate delegate's create method</li>
   * <li>Generate random values for any primitive data members</li>
   * <li>Create the BsAccessRule by calling delegate.createBsAccessRule</li>
   * <li>Add the new child to the list</li>
   * </ul>
   * <p>
   * Key type: AssociationKey
   * </p>
   * @param accessTypesList a list of source objects to link with at least the number
   *                 of objects required by count
   * @param partnerList a list of source objects to link with at least the number
   *                 of objects required by count
   * @param uriPatternsList a list of source objects to link with at least the number
   *                 of objects required by count
   * @param count the number of objects to create
   * @return the stored object
   * @throws DelegateException when there is a problem creating an object
   * @throws InvalidParametersException when there is some problem with the 
   *                                    input parameters for creating an object
   */
  abstract protected List<org.phoenixbioinformatics.api.bs.api.BsAccessRule> createApiAccessRule(List<org.phoenixbioinformatics.api.db.api.IAccessType> accessTypesList, List<org.phoenixbioinformatics.api.db.api.IPartner> partnerList, List<org.phoenixbioinformatics.api.db.api.IUriPattern> uriPatternsList, int count) 
      throws DelegateException, InvalidParametersException; // create 1

  /**
   * <p>
   * Create some number of new SubscriptionTransaction objects and return them in a list.  
   * This is a helper method that the concrete subclass needs to implement. It
   * returns a child object.
   * </p>
   * <ul>
   * <li>Create the list to return as a CopyOnWriteArrayList&lt;BsSubscriptionTransaction&gt;</li>
   * <li>Generate any required objects linked to this object other than the 
   * parent by calling the appropriate delegate's create method</li>
   * <li>Create the sub-key as an integer for ordered subkeys or a random string
   * for unordered subkeys</li>
   * <li>Generate random values for any primitive data members</li>
   * <li>Create the BsSubscriptionTransaction by calling delegate.createBsSubscriptionTransaction</li>
   * <li>Add the new child to the list</li>
   * </ul>
   * <p>
   * Key type: CompositeKey
   * </p>
   * @param parent the parent Partner
   * @param count the number of objects to create
   * @return the stored object
   * @throws DelegateException when there is a problem creating an object
   * @throws InvalidParametersException when there is some problem with the 
   *                                    input parameters for creating an object
   */
  abstract protected List<org.phoenixbioinformatics.api.bs.api.BsSubscriptionTransaction> createApiSubscriptionTransaction(org.phoenixbioinformatics.api.db.api.IPartner parent, 
                                                       int count) 
      throws DelegateException, InvalidParametersException; // create 2
      
  /**
   * <p>
   * Create some number of new Subscription objects and return them in a list.  
   * This is a helper method that the concrete subclass needs to implement. It
   * returns a child object.
   * </p>
   * <ul>
   * <li>Create the list to return as a CopyOnWriteArrayList&lt;BsSubscription&gt;</li>
   * <li>Generate any required objects linked to this object other than the 
   * associated objects by calling the appropriate delegate's create method</li>
   * <li>Generate random values for any primitive data members</li>
   * <li>Create the BsSubscription by calling delegate.createBsSubscription</li>
   * <li>Add the new child to the list</li>
   * </ul>
   * <p>
   * Key type: AssociationKey
   * </p>
   * @param subscribedPartnersList a list of source objects to link with at least the number
   *                 of objects required by count
   * @param subscribersList a list of source objects to link with at least the number
   *                 of objects required by count
   * @param count the number of objects to create
   * @return the stored object
   * @throws DelegateException when there is a problem creating an object
   * @throws InvalidParametersException when there is some problem with the 
   *                                    input parameters for creating an object
   */
  abstract protected List<org.phoenixbioinformatics.api.bs.api.BsSubscription> createApiSubscription(List<org.phoenixbioinformatics.api.db.api.IPartner> subscribedPartnersList, List<org.phoenixbioinformatics.api.db.api.IParty> subscribersList, int count) 
      throws DelegateException, InvalidParametersException; // create 1

  /**
   * Test method for delegate insert
   */
  @Test
  public void testInsert() {
    // Create a new Partner object to perform the test.
    List<BsPartner> objects = createApiPartner(1);
    assertTrue("No object created", objects.get(0) != null);
    delegate.insert(objects);
    com.poesys.db.pk.NaturalPrimaryKey key = 
      (com.poesys.db.pk.NaturalPrimaryKey)objects.get(0).getPrimaryKey();
    assertTrue("No key for inserted object", key != null);

    BsPartner queriedObject = queryStoredObject(key);
    assertTrue("No queried inserted object", queriedObject != null);
    assertTrue("Wrong object", objects.get(0).equals(queriedObject));
    // Delete the inserted objects to clean up.
    // Mark all the objects for delete.
    for (BsPartner object : objects) {
      object.delete();
    }

    delegate.deleteBatch(objects);
  }

  /**
   * Test method for getObject
   * 
   * @throws java.sql.SQLException when there is a problem querying a collection 
   *                               property
   */
  @Test
  public void testGetObject() throws java.sql.SQLException {
    // Create a new Partner object to perform the test.
    List<BsPartner> objects = createApiPartner(1);
    assertTrue("No object created", objects.get(0) != null);
    delegate.insert(objects);
    com.poesys.db.pk.NaturalPrimaryKey key = 
      (com.poesys.db.pk.NaturalPrimaryKey)objects.get(0).getPrimaryKey();
    assertTrue("No key generated from concrete implementation", key != null);
    BsPartner insertedObject = objects.get(0);
    assertTrue("No comparison object for object query", insertedObject != null);
    
    // Query the object.
    BsPartner object = delegate.getObject(key);
    assertTrue("Couldn't get object", object != null);
    assertTrue("Wrong object", insertedObject.equals(object));
    
    // Testing lazy loading of subscribers Collection property
    java.util.Collection<org.phoenixbioinformatics.api.bs.api.BsParty> subscribers = 
      object.getSubscribers();
    assertTrue("subscriber not lazily loaded", subscribers != null);
    
    // Testing lazy loading of subscription Collection property
    java.util.Collection<org.phoenixbioinformatics.api.bs.api.BsSubscription> subscription = 
      object.getSubscription();
    assertTrue("subscription not lazily loaded", subscription != null);
    // Delete the inserted objects to clean up.
    // Mark all the objects for delete.
    for (BsPartner o : objects) {
      o.delete();
    }

    delegate.deleteBatch(objects);
  }

  /**
   * <p>
   * Test method for getAllObjects
   * </p>
   * <p>
   * For this read/write class, the method ensures that there are objects to
   * query by inserting an object, querying, then deleting the object.
   * </p>
   *
   * @throws InvalidParametersException when an invalid parameter prevents the
   *       creation of an object
   * @throws DelegateException when a problem occurs during object creation
   */
  @Test
  public void testGetAllObjects() 
       throws InvalidParametersException, DelegateException {
    // Create a new Partner object to perform the test.
    List<BsPartner> insertedObjects = createApiPartner(1);
    assertTrue("No object created", insertedObjects.get(0) != null);
    delegate.insert(insertedObjects);
    
    // Query all the objects.
    List<BsPartner> objects = delegate.getAllObjects(100);
    assertTrue("Couldn't create list", objects != null);
    // The list should not be empty.
    assertTrue("List of all objects empty", objects.size() != 0);
    // Delete the inserted objects to clean up.
    // Mark all the objects for delete.
    for (BsPartner o : insertedObjects) {
      o.delete();
    }

    delegate.deleteBatch(insertedObjects);
  }

  /**
   * A helper method that queried a previously stored object identified by its
   * primary key. The method returns the queried object for further testing
   * after performing structural tests on the object.
   * 
   * @param key the primary key of the object to retrieve
   * @return the object
   * @throws DelegateException when there is a problem querying the object
   */
  protected BsPartner queryStoredObject(com.poesys.db.pk.NaturalPrimaryKey key)
      throws DelegateException {
    // Clear the caches, then query the saved object and test it.
    clearCaches();

    BsPartner queriedObject = delegate.getDatabaseObject(key);
    assertTrue("Object not found", queriedObject != null);
    return queriedObject;
  }

  /**
   * A helper method that tests the stored existence of the object identified
   * by the pre-existing, saved primary key.
   * 
   * @param key the primary key (com.poesys.db.pk.NaturalPrimaryKey) of the object to check
   * @return true if the object is in the database, false if not
   * @throws DelegateException when there is a problem querying the object
   */
  protected boolean exists(com.poesys.db.pk.NaturalPrimaryKey key) throws DelegateException {
    // Clear the caches, then query the saved object and test it.
    clearCaches();

    BsPartner queriedObject = delegate.getObject(key);
    return queriedObject != null;
  }

  /**
   * Test the updating of the inserted object.
   */
  @Test
  public void testUpdate() {
    // Create a new Partner object to perform the test.
    List<BsPartner> objects = createApiPartner(1);
    assertTrue("No object created", objects.get(0) != null);
    delegate.insert(objects);
    com.poesys.db.pk.NaturalPrimaryKey key = 
      (com.poesys.db.pk.NaturalPrimaryKey)objects.get(0).getPrimaryKey();
    assertTrue("No key for inserted object", key != null);
    BsPartner insertedObject = objects.get(0);
    assertTrue("No created object to update", insertedObject != null);
    
    // Update the inserted object and query it to test.
    updateColumn(insertedObject);
    delegate.update(insertedObject);
    BsPartner queriedObject = queryStoredObject(key);
    assertTrue("Object not updated", isColumnUpdated(queriedObject));
    // Delete the inserted objects to clean up.
    // Mark all the objects for delete.
    for (BsPartner object : objects) {
      object.delete();
    }

    delegate.deleteBatch(objects);
  }
  
  /**
   * Update the first mutable column with a new value.
   *
   * @param object the BsPartner object to update
   */
  protected void updateColumn(BsPartner object) {
    try {
      object.setName("Partner.name updated".substring(0, "Partner.name updated".length() < 500 ? "Partner.name updated".length() : 500));
    } catch (com.poesys.db.dto.DtoStatusException e) {
      org.junit.Assert.fail(e.getMessage());
    }
  }

  /**
   * Is the appropriate column in the input object set to the update value?
   *
   * @param object the BsPartner object to update
   * @return true if the column is updated, false if not
   * @see #updateColumn
   */
  protected boolean isColumnUpdated(BsPartner object) {
    boolean retVal = false;
    retVal = object.getName().equals("Partner.name updated".substring(0, "Partner.name updated".length() < 500 ? "Partner.name updated".length() : 500));
    return retVal;
  }

  /**
   * Is the appropriate column in the input object set to the updated value in 
   * the original object? This method is a helper for the batchUpdate test.
   *
   * @param original the original, updated BsPartner object
   * @param queried the queried BsPartner object
   * @return true if the column is updated, false if not
   */
  protected boolean isColumnUpdated(BsPartner original, BsPartner queried) {
    boolean retVal = true;
    retVal = 
      retVal && queried.getName().equals(original.getName());
    retVal = 
      retVal && queried.getLogoUri().equals(original.getLogoUri());
    retVal = 
      retVal && queried.getTermOfServiceUri().equals(original.getTermOfServiceUri());
    return retVal;
  }

  /**
   * Test method for batch update
   * 
   * @throws InvalidParametersException when an invalid parameter prevents the
   *       creation of an object
   * @throws DelegateException when a problem occurs during object creation
   */
  @Test
  public void testUpdateBatch() throws InvalidParametersException,
      DelegateException {
    List<BsPartner> objects = createApiPartner(2);
    delegate.insert(objects);
    // Allocate a map to hold the updated objects for later comparison.
    java.util.Map<com.poesys.db.pk.IPrimaryKey, BsPartner> map = 
      new java.util.TreeMap<com.poesys.db.pk.IPrimaryKey, BsPartner>();
    for (BsPartner object : objects) {
      updateColumn(object);
      // Add the object to the storage map.
      map.put(object.getPrimaryKey(), object);
    }
    delegate.updateBatch(objects);
    
    clearCaches();
    
    for (BsPartner object : objects) {
      BsPartner queriedObject = 
        queryStoredObject((com.poesys.db.pk.NaturalPrimaryKey)object.getPrimaryKey());
      BsPartner originalObject = map.get(object.getPrimaryKey());
      assertTrue("Object not updated", 
                 isColumnUpdated(originalObject, queriedObject));
    }
    // Delete the inserted objects to clean up.
    // Mark all the objects for delete.
    for (BsPartner object : objects) {
      object.delete();
    }

    delegate.deleteBatch(objects);
  }

  /**
   * Test method for delete
   * 
   * @throws InvalidParametersException when an invalid parameter prevents the
   *       creation of an object
   * @throws DelegateException when a problem occurs during object creation
   */
  @Test
  public void testDelete() throws InvalidParametersException,
      DelegateException {
    // Create a new Partner object to perform the test.
    List<BsPartner> objects = createApiPartner(1);
    assertTrue("No object created", objects.get(0) != null);
    delegate.insert(objects);
    com.poesys.db.pk.NaturalPrimaryKey key = 
      (com.poesys.db.pk.NaturalPrimaryKey)objects.get(0).getPrimaryKey();
    assertTrue("No key for inserted object", key != null);
    BsPartner insertedObject = objects.get(0);
    assertTrue("No inserted object to delete", insertedObject != null);
    
    delegate.delete(insertedObject);
    assertTrue("object not deleted", !exists(key));
    // Delete the inserted objects to clean up.
    // Mark all the objects for delete.
    for (BsPartner object : objects) {
      object.delete();
    }

    delegate.deleteBatch(objects);
  }

  /**
   * Test method for deleteBatch
   * 
   * @throws InvalidParametersException when an invalid parameter prevents the
   *       creation of an object
   * @throws DelegateException when a problem occurs during object creation
   */
  @Test
  public void testDeleteBatch() throws InvalidParametersException,
      DelegateException {
    List<BsPartner> objects = createApiPartner(2);
    delegate.insert(objects);
    
    // Mark all the objects for delete.
    for (BsPartner object : objects) {
      object.delete();
    }

    delegate.deleteBatch(objects);

    for (BsPartner object : objects) {
      assertTrue("object not deleted", !exists((com.poesys.db.pk.NaturalPrimaryKey)object.getPrimaryKey()));
    }
  }

  /**
   * Test method for process()
   * 
   * @throws InvalidParametersException when an invalid parameter prevents the
   *       creation of an object
   * @throws DelegateException when a problem occurs during object creation
   */
  @Test
  public void testProcess() throws InvalidParametersException,
      DelegateException {
    // Create 3 rows--one to insert, one to update, one to delete.
    List<BsPartner> allObjects = createApiPartner(3);
    // Insert the first two rows to later update and delete.
    List<BsPartner> existingObjects = 
      new CopyOnWriteArrayList<BsPartner>();
    existingObjects.add(allObjects.get(0));
    existingObjects.add(allObjects.get(1));
    delegate.insert(existingObjects);
    updateColumn(existingObjects.get(0));
    existingObjects.get(1).delete();

    // Set the third object as the object to insert.
    List<BsPartner> insertObject = 
      new CopyOnWriteArrayList<BsPartner>();
    insertObject.add(allObjects.get(2));
    
    // Put it all together.
    List<BsPartner> objects = 
      new CopyOnWriteArrayList<BsPartner>(existingObjects);
    objects.addAll(insertObject);

    // Test the process method
    delegate.process(objects);

    // Verify the update
    BsPartner queriedObject = 
      queryStoredObject((com.poesys.db.pk.NaturalPrimaryKey)existingObjects.get(0).getPrimaryKey());
    assertTrue("Update not processed", isColumnUpdated(queriedObject));

    // Verify the delete
    assertTrue("object not deleted", !exists((com.poesys.db.pk.NaturalPrimaryKey)existingObjects.get(1).getPrimaryKey()));

    // Verify the insert
    assertTrue("object not inserted", exists((com.poesys.db.pk.NaturalPrimaryKey)insertObject.get(0).getPrimaryKey()));
    
    // Delete the inserted objects to clean up.
    // Mark all the objects for delete.
    for (BsPartner object : allObjects) {
      object.delete();
    }

    delegate.deleteBatch(allObjects);
  }

  /**
   * Test the creation and adding of a child BsPartnerPattern object to the BsPartner
   * as a patterns link.
   */
  @Test
  public void testUpdateAddPatternsPartnerPattern()  {
    // Create a new BsPartner object to perform the test.
    List<BsPartner> objects = createApiPartner(1);
    assertTrue("No object created", objects.get(0) != null);
    delegate.insert(objects);
    com.poesys.db.pk.NaturalPrimaryKey key = 
      (com.poesys.db.pk.NaturalPrimaryKey)objects.get(0).getPrimaryKey();
    assertTrue("No key for inserted object", key != null);

    // Test to make sure the object is there.
    BsPartner queriedObject = queryStoredObject(key);
    assertTrue("No queried inserted object", queriedObject != null);
    assertTrue("Wrong object", objects.get(0).equals(queriedObject));

    // Add a child and update the parent to insert the child.
    List<BsPartnerPattern> children = createApiPartnerPattern(queriedObject.toDto(), 1);
    queriedObject.addPatternsPartnerPattern(children.get(0));
    delegate.update(queriedObject);
    
    // Test to make sure the object is there.
    BsPartner queriedUpdatedObject = queryStoredObject(key);
    assertTrue("No queried updated object", queriedUpdatedObject != null);
    assertTrue("Wrong object", objects.get(0).equals(queriedUpdatedObject));
    assertTrue("No patterns, PartnerPattern not inserted", 
               queriedUpdatedObject.getPatterns().size() == 1);
    // Delete the inserted objects to clean up.
    // Mark all the objects for delete.
    for (BsPartner object : objects) {
      object.delete();
    }

    delegate.deleteBatch(objects);
  }

  /**
   * Test the creation and adding of a child BsSubscriptionTerm object to the BsPartner
   * as a subscriptionTerms link.
   */
  @Test
  public void testUpdateAddSubscriptionTermsSubscriptionTerm()  {
    // Create a new BsPartner object to perform the test.
    List<BsPartner> objects = createApiPartner(1);
    assertTrue("No object created", objects.get(0) != null);
    delegate.insert(objects);
    com.poesys.db.pk.NaturalPrimaryKey key = 
      (com.poesys.db.pk.NaturalPrimaryKey)objects.get(0).getPrimaryKey();
    assertTrue("No key for inserted object", key != null);

    // Test to make sure the object is there.
    BsPartner queriedObject = queryStoredObject(key);
    assertTrue("No queried inserted object", queriedObject != null);
    assertTrue("Wrong object", objects.get(0).equals(queriedObject));

    // Add a child and update the parent to insert the child.
    List<BsSubscriptionTerm> children = createApiSubscriptionTerm(queriedObject.toDto(), 1);
    queriedObject.addSubscriptionTermsSubscriptionTerm(children.get(0));
    delegate.update(queriedObject);
    
    // Test to make sure the object is there.
    BsPartner queriedUpdatedObject = queryStoredObject(key);
    assertTrue("No queried updated object", queriedUpdatedObject != null);
    assertTrue("Wrong object", objects.get(0).equals(queriedUpdatedObject));
    assertTrue("No subscriptionTerms, SubscriptionTerm not inserted", 
               queriedUpdatedObject.getSubscriptionTerms().size() == 1);
    // Delete the inserted objects to clean up.
    // Mark all the objects for delete.
    for (BsPartner object : objects) {
      object.delete();
    }

    delegate.deleteBatch(objects);
  }

  /**
   * Test the creation and adding of a child BsSubscriptionDescription object to the BsPartner
   * as a subscriptionDescriptions link.
   */
  @Test
  public void testUpdateAddSubscriptionDescriptionsSubscriptionDescription()  {
    // Create a new BsPartner object to perform the test.
    List<BsPartner> objects = createApiPartner(1);
    assertTrue("No object created", objects.get(0) != null);
    delegate.insert(objects);
    com.poesys.db.pk.NaturalPrimaryKey key = 
      (com.poesys.db.pk.NaturalPrimaryKey)objects.get(0).getPrimaryKey();
    assertTrue("No key for inserted object", key != null);

    // Test to make sure the object is there.
    BsPartner queriedObject = queryStoredObject(key);
    assertTrue("No queried inserted object", queriedObject != null);
    assertTrue("Wrong object", objects.get(0).equals(queriedObject));

    // Add a child and update the parent to insert the child.
    List<BsSubscriptionDescription> children = createApiSubscriptionDescription(queriedObject.toDto(), 1);
    queriedObject.addSubscriptionDescriptionsSubscriptionDescription(children.get(0));
    delegate.update(queriedObject);
    
    // Test to make sure the object is there.
    BsPartner queriedUpdatedObject = queryStoredObject(key);
    assertTrue("No queried updated object", queriedUpdatedObject != null);
    assertTrue("Wrong object", objects.get(0).equals(queriedUpdatedObject));
    assertTrue("No subscriptionDescriptions, SubscriptionDescription not inserted", 
               queriedUpdatedObject.getSubscriptionDescriptions().size() == 1);
    // Delete the inserted objects to clean up.
    // Mark all the objects for delete.
    for (BsPartner object : objects) {
      object.delete();
    }

    delegate.deleteBatch(objects);
  }

  /**
   * Test the creation and adding of a child BsIpCount object to the BsPartner
   * as a ipCounts link.
   */
  @Test
  public void testUpdateAddIpCountsIpCount()  {
    // Create a new BsPartner object to perform the test.
    List<BsPartner> objects = createApiPartner(1);
    assertTrue("No object created", objects.get(0) != null);
    delegate.insert(objects);
    com.poesys.db.pk.NaturalPrimaryKey key = 
      (com.poesys.db.pk.NaturalPrimaryKey)objects.get(0).getPrimaryKey();
    assertTrue("No key for inserted object", key != null);

    // Test to make sure the object is there.
    BsPartner queriedObject = queryStoredObject(key);
    assertTrue("No queried inserted object", queriedObject != null);
    assertTrue("Wrong object", objects.get(0).equals(queriedObject));

    // Add a child and update the parent to insert the child.
    List<BsIpCount> children = createApiIpCount(queriedObject.toDto(), 1);
    queriedObject.addIpCountsIpCount(children.get(0));
    delegate.update(queriedObject);
    
    // Test to make sure the object is there.
    BsPartner queriedUpdatedObject = queryStoredObject(key);
    assertTrue("No queried updated object", queriedUpdatedObject != null);
    assertTrue("Wrong object", objects.get(0).equals(queriedUpdatedObject));
    assertTrue("No ipCounts, IpCount not inserted", 
               queriedUpdatedObject.getIpCounts().size() == 1);
    // Delete the inserted objects to clean up.
    // Mark all the objects for delete.
    for (BsPartner object : objects) {
      object.delete();
    }

    delegate.deleteBatch(objects);
  }

  /**
   * Test the creation and adding of a child BsLimitValue object to the BsPartner
   * as a limitValues link.
   */
  @Test
  public void testUpdateAddLimitValuesLimitValue()  {
    // Create a new BsPartner object to perform the test.
    List<BsPartner> objects = createApiPartner(1);
    assertTrue("No object created", objects.get(0) != null);
    delegate.insert(objects);
    com.poesys.db.pk.NaturalPrimaryKey key = 
      (com.poesys.db.pk.NaturalPrimaryKey)objects.get(0).getPrimaryKey();
    assertTrue("No key for inserted object", key != null);

    // Test to make sure the object is there.
    BsPartner queriedObject = queryStoredObject(key);
    assertTrue("No queried inserted object", queriedObject != null);
    assertTrue("Wrong object", objects.get(0).equals(queriedObject));

    // Add a child and update the parent to insert the child.
    List<BsLimitValue> children = createApiLimitValue(queriedObject.toDto(), 1);
    queriedObject.addLimitValuesLimitValue(children.get(0));
    delegate.update(queriedObject);
    
    // Test to make sure the object is there.
    BsPartner queriedUpdatedObject = queryStoredObject(key);
    assertTrue("No queried updated object", queriedUpdatedObject != null);
    assertTrue("Wrong object", objects.get(0).equals(queriedUpdatedObject));
    assertTrue("No limitValues, LimitValue not inserted", 
               queriedUpdatedObject.getLimitValues().size() == 1);
    // Delete the inserted objects to clean up.
    // Mark all the objects for delete.
    for (BsPartner object : objects) {
      object.delete();
    }

    delegate.deleteBatch(objects);
  }

  /**
   * Test method for truncateTable
   */
  @Test
  public void testTruncateTable() {
    delegate.truncateTable("Partner");
    List<BsPartner> objects = delegate.getAllObjects(100);
    assertTrue("Couldn't create list", objects != null);
    // The list should be empty.
    assertTrue("Table not truncated", objects.size() == 0);
  }

  /**
   * Return the database access subsystem name to use to look up access
   * properties in the database.properties file. The concrete implementation
   * should override this method to provide a different subsystem name if
   * needed.
   * 
   * @return the database access subsystem name
   */
  protected String getSubsystem() {
    return subsystem;
  }
  
  /**
   * Flush all resources associated with connections.
   * 
   * @throws ConnectionException when there is a problem flushing resources
   */
  @After
  public void tearDown() throws ConnectionException {
    delegate.flush();
  }
}
